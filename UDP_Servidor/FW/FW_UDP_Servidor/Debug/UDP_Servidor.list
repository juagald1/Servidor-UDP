
UDP_Servidor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e488  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002bb4  0800e618  0800e618  0001e618  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080111cc  080111cc  00030078  2**0
                  CONTENTS
  4 .ARM          00000008  080111cc  080111cc  000211cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080111d4  080111d4  00030078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080111d4  080111d4  000211d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080111d8  080111d8  000211d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080111dc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030078  2**0
                  CONTENTS
 10 .bss          00006828  20000078  20000078  00030078  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200068a0  200068a0  00030078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030078  2**0
                  CONTENTS, READONLY
 13 .debug_info   00029b9c  00000000  00000000  000300a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000554b  00000000  00000000  00059c44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ff0  00000000  00000000  0005f190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ef8  00000000  00000000  00060180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002c555  00000000  00000000  00061078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f9d7  00000000  00000000  0008d5cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d8f18  00000000  00000000  000acfa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00185ebc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004814  00000000  00000000  00185f10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e600 	.word	0x0800e600

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	0800e600 	.word	0x0800e600

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b094      	sub	sp, #80	; 0x50
 800058c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800058e:	f107 0320 	add.w	r3, r7, #32
 8000592:	2230      	movs	r2, #48	; 0x30
 8000594:	2100      	movs	r1, #0
 8000596:	4618      	mov	r0, r3
 8000598:	f00c fe5e 	bl	800d258 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800059c:	f107 030c 	add.w	r3, r7, #12
 80005a0:	2200      	movs	r2, #0
 80005a2:	601a      	str	r2, [r3, #0]
 80005a4:	605a      	str	r2, [r3, #4]
 80005a6:	609a      	str	r2, [r3, #8]
 80005a8:	60da      	str	r2, [r3, #12]
 80005aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ac:	2300      	movs	r3, #0
 80005ae:	60bb      	str	r3, [r7, #8]
 80005b0:	4b23      	ldr	r3, [pc, #140]	; (8000640 <SystemClock_Config+0xb8>)
 80005b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b4:	4a22      	ldr	r2, [pc, #136]	; (8000640 <SystemClock_Config+0xb8>)
 80005b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ba:	6413      	str	r3, [r2, #64]	; 0x40
 80005bc:	4b20      	ldr	r3, [pc, #128]	; (8000640 <SystemClock_Config+0xb8>)
 80005be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005c4:	60bb      	str	r3, [r7, #8]
 80005c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005c8:	2300      	movs	r3, #0
 80005ca:	607b      	str	r3, [r7, #4]
 80005cc:	4b1d      	ldr	r3, [pc, #116]	; (8000644 <SystemClock_Config+0xbc>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4a1c      	ldr	r2, [pc, #112]	; (8000644 <SystemClock_Config+0xbc>)
 80005d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005d6:	6013      	str	r3, [r2, #0]
 80005d8:	4b1a      	ldr	r3, [pc, #104]	; (8000644 <SystemClock_Config+0xbc>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005e0:	607b      	str	r3, [r7, #4]
 80005e2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005e4:	2301      	movs	r3, #1
 80005e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005ec:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ee:	2302      	movs	r3, #2
 80005f0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005f2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005f8:	2304      	movs	r3, #4
 80005fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80005fc:	2348      	movs	r3, #72	; 0x48
 80005fe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000600:	2302      	movs	r3, #2
 8000602:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000604:	2307      	movs	r3, #7
 8000606:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000608:	f107 0320 	add.w	r3, r7, #32
 800060c:	4618      	mov	r0, r3
 800060e:	f002 f885 	bl	800271c <HAL_RCC_OscConfig>
  {
    //Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000612:	230f      	movs	r3, #15
 8000614:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000616:	2302      	movs	r3, #2
 8000618:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800061a:	2300      	movs	r3, #0
 800061c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800061e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000622:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000624:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000628:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800062a:	f107 030c 	add.w	r3, r7, #12
 800062e:	2102      	movs	r1, #2
 8000630:	4618      	mov	r0, r3
 8000632:	f002 faeb 	bl	8002c0c <HAL_RCC_ClockConfig>
  {
    //Error_Handler();
  }
}
 8000636:	bf00      	nop
 8000638:	3750      	adds	r7, #80	; 0x50
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	40023800 	.word	0x40023800
 8000644:	40007000 	.word	0x40007000

08000648 <GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void GPIO_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b08a      	sub	sp, #40	; 0x28
 800064c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800064e:	f107 0314 	add.w	r3, r7, #20
 8000652:	2200      	movs	r2, #0
 8000654:	601a      	str	r2, [r3, #0]
 8000656:	605a      	str	r2, [r3, #4]
 8000658:	609a      	str	r2, [r3, #8]
 800065a:	60da      	str	r2, [r3, #12]
 800065c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800065e:	2300      	movs	r3, #0
 8000660:	613b      	str	r3, [r7, #16]
 8000662:	4b2e      	ldr	r3, [pc, #184]	; (800071c <GPIO_Init+0xd4>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000666:	4a2d      	ldr	r2, [pc, #180]	; (800071c <GPIO_Init+0xd4>)
 8000668:	f043 0304 	orr.w	r3, r3, #4
 800066c:	6313      	str	r3, [r2, #48]	; 0x30
 800066e:	4b2b      	ldr	r3, [pc, #172]	; (800071c <GPIO_Init+0xd4>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000672:	f003 0304 	and.w	r3, r3, #4
 8000676:	613b      	str	r3, [r7, #16]
 8000678:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800067a:	2300      	movs	r3, #0
 800067c:	60fb      	str	r3, [r7, #12]
 800067e:	4b27      	ldr	r3, [pc, #156]	; (800071c <GPIO_Init+0xd4>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000682:	4a26      	ldr	r2, [pc, #152]	; (800071c <GPIO_Init+0xd4>)
 8000684:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000688:	6313      	str	r3, [r2, #48]	; 0x30
 800068a:	4b24      	ldr	r3, [pc, #144]	; (800071c <GPIO_Init+0xd4>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000692:	60fb      	str	r3, [r7, #12]
 8000694:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000696:	2300      	movs	r3, #0
 8000698:	60bb      	str	r3, [r7, #8]
 800069a:	4b20      	ldr	r3, [pc, #128]	; (800071c <GPIO_Init+0xd4>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069e:	4a1f      	ldr	r2, [pc, #124]	; (800071c <GPIO_Init+0xd4>)
 80006a0:	f043 0301 	orr.w	r3, r3, #1
 80006a4:	6313      	str	r3, [r2, #48]	; 0x30
 80006a6:	4b1d      	ldr	r3, [pc, #116]	; (800071c <GPIO_Init+0xd4>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006aa:	f003 0301 	and.w	r3, r3, #1
 80006ae:	60bb      	str	r3, [r7, #8]
 80006b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006b2:	2300      	movs	r3, #0
 80006b4:	607b      	str	r3, [r7, #4]
 80006b6:	4b19      	ldr	r3, [pc, #100]	; (800071c <GPIO_Init+0xd4>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ba:	4a18      	ldr	r2, [pc, #96]	; (800071c <GPIO_Init+0xd4>)
 80006bc:	f043 0302 	orr.w	r3, r3, #2
 80006c0:	6313      	str	r3, [r2, #48]	; 0x30
 80006c2:	4b16      	ldr	r3, [pc, #88]	; (800071c <GPIO_Init+0xd4>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c6:	f003 0302 	and.w	r3, r3, #2
 80006ca:	607b      	str	r3, [r7, #4]
 80006cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006ce:	2300      	movs	r3, #0
 80006d0:	603b      	str	r3, [r7, #0]
 80006d2:	4b12      	ldr	r3, [pc, #72]	; (800071c <GPIO_Init+0xd4>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	4a11      	ldr	r2, [pc, #68]	; (800071c <GPIO_Init+0xd4>)
 80006d8:	f043 0308 	orr.w	r3, r3, #8
 80006dc:	6313      	str	r3, [r2, #48]	; 0x30
 80006de:	4b0f      	ldr	r3, [pc, #60]	; (800071c <GPIO_Init+0xd4>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	f003 0308 	and.w	r3, r3, #8
 80006e6:	603b      	str	r3, [r7, #0]
 80006e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80006ea:	2200      	movs	r2, #0
 80006ec:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80006f0:	480b      	ldr	r0, [pc, #44]	; (8000720 <GPIO_Init+0xd8>)
 80006f2:	f001 fff9 	bl	80026e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80006f6:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80006fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006fc:	2301      	movs	r3, #1
 80006fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000700:	2300      	movs	r3, #0
 8000702:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000704:	2300      	movs	r3, #0
 8000706:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000708:	f107 0314 	add.w	r3, r7, #20
 800070c:	4619      	mov	r1, r3
 800070e:	4804      	ldr	r0, [pc, #16]	; (8000720 <GPIO_Init+0xd8>)
 8000710:	f001 fe4e 	bl	80023b0 <HAL_GPIO_Init>

}
 8000714:	bf00      	nop
 8000716:	3728      	adds	r7, #40	; 0x28
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	40023800 	.word	0x40023800
 8000720:	40020c00 	.word	0x40020c00

08000724 <Init_HW>:


void Init_HW (void){
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0

	HAL_Init();
 8000728:	f000 faee 	bl	8000d08 <HAL_Init>
	SystemClock_Config();
 800072c:	f7ff ff2c 	bl	8000588 <SystemClock_Config>
	GPIO_Init();
 8000730:	f7ff ff8a 	bl	8000648 <GPIO_Init>

}
 8000734:	bf00      	nop
 8000736:	bd80      	pop	{r7, pc}

08000738 <Gestion_Datos_Servidor_UPD>:
#include "stm32f4xx_hal.h"
#include "string.h"


int Gestion_Datos_Servidor_UPD (int longitud, char* str)
{
 8000738:	b5b0      	push	{r4, r5, r7, lr}
 800073a:	b084      	sub	sp, #16
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
 8000740:	6039      	str	r1, [r7, #0]
 8000742:	466b      	mov	r3, sp
 8000744:	461d      	mov	r5, r3
	char string[longitud];						//Recibe hasta 1 Byte
 8000746:	687c      	ldr	r4, [r7, #4]
 8000748:	1e63      	subs	r3, r4, #1
 800074a:	60fb      	str	r3, [r7, #12]
 800074c:	4623      	mov	r3, r4
 800074e:	4618      	mov	r0, r3
 8000750:	f04f 0100 	mov.w	r1, #0
 8000754:	f04f 0200 	mov.w	r2, #0
 8000758:	f04f 0300 	mov.w	r3, #0
 800075c:	00cb      	lsls	r3, r1, #3
 800075e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000762:	00c2      	lsls	r2, r0, #3
 8000764:	4623      	mov	r3, r4
 8000766:	4618      	mov	r0, r3
 8000768:	f04f 0100 	mov.w	r1, #0
 800076c:	f04f 0200 	mov.w	r2, #0
 8000770:	f04f 0300 	mov.w	r3, #0
 8000774:	00cb      	lsls	r3, r1, #3
 8000776:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800077a:	00c2      	lsls	r2, r0, #3
 800077c:	4623      	mov	r3, r4
 800077e:	3307      	adds	r3, #7
 8000780:	08db      	lsrs	r3, r3, #3
 8000782:	00db      	lsls	r3, r3, #3
 8000784:	ebad 0d03 	sub.w	sp, sp, r3
 8000788:	466b      	mov	r3, sp
 800078a:	3300      	adds	r3, #0
 800078c:	60bb      	str	r3, [r7, #8]
	strcpy(string, str);						//Copia datos recibidos en buffer a la cadena
 800078e:	68bb      	ldr	r3, [r7, #8]
 8000790:	6839      	ldr	r1, [r7, #0]
 8000792:	4618      	mov	r0, r3
 8000794:	f00c fde0 	bl	800d358 <strcpy>

	////////////////////////////////////
	//  DESARROLLO APLICACION AQUI   //
	///////////////////////////////////

	if(strcmp(string,"LED1_ON") == 0)
 8000798:	68bb      	ldr	r3, [r7, #8]
 800079a:	4942      	ldr	r1, [pc, #264]	; (80008a4 <Gestion_Datos_Servidor_UPD+0x16c>)
 800079c:	4618      	mov	r0, r3
 800079e:	f7ff fd17 	bl	80001d0 <strcmp>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d107      	bne.n	80007b8 <Gestion_Datos_Servidor_UPD+0x80>
	{
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 80007a8:	2201      	movs	r2, #1
 80007aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007ae:	483e      	ldr	r0, [pc, #248]	; (80008a8 <Gestion_Datos_Servidor_UPD+0x170>)
 80007b0:	f001 ff9a 	bl	80026e8 <HAL_GPIO_WritePin>
		  return 1;
 80007b4:	2301      	movs	r3, #1
 80007b6:	e070      	b.n	800089a <Gestion_Datos_Servidor_UPD+0x162>
	}

	if(strcmp(string,"LED1_OFF") == 0)
 80007b8:	68bb      	ldr	r3, [r7, #8]
 80007ba:	493c      	ldr	r1, [pc, #240]	; (80008ac <Gestion_Datos_Servidor_UPD+0x174>)
 80007bc:	4618      	mov	r0, r3
 80007be:	f7ff fd07 	bl	80001d0 <strcmp>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d107      	bne.n	80007d8 <Gestion_Datos_Servidor_UPD+0xa0>
	{
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 80007c8:	2200      	movs	r2, #0
 80007ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007ce:	4836      	ldr	r0, [pc, #216]	; (80008a8 <Gestion_Datos_Servidor_UPD+0x170>)
 80007d0:	f001 ff8a 	bl	80026e8 <HAL_GPIO_WritePin>
		  return 1;
 80007d4:	2301      	movs	r3, #1
 80007d6:	e060      	b.n	800089a <Gestion_Datos_Servidor_UPD+0x162>
	}

	if(strcmp(string,"LED2_ON") == 0)
 80007d8:	68bb      	ldr	r3, [r7, #8]
 80007da:	4935      	ldr	r1, [pc, #212]	; (80008b0 <Gestion_Datos_Servidor_UPD+0x178>)
 80007dc:	4618      	mov	r0, r3
 80007de:	f7ff fcf7 	bl	80001d0 <strcmp>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d107      	bne.n	80007f8 <Gestion_Datos_Servidor_UPD+0xc0>
	{
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80007e8:	2201      	movs	r2, #1
 80007ea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007ee:	482e      	ldr	r0, [pc, #184]	; (80008a8 <Gestion_Datos_Servidor_UPD+0x170>)
 80007f0:	f001 ff7a 	bl	80026e8 <HAL_GPIO_WritePin>
		  return 1;
 80007f4:	2301      	movs	r3, #1
 80007f6:	e050      	b.n	800089a <Gestion_Datos_Servidor_UPD+0x162>
	}

	if(strcmp(string,"LED2_OFF") == 0)
 80007f8:	68bb      	ldr	r3, [r7, #8]
 80007fa:	492e      	ldr	r1, [pc, #184]	; (80008b4 <Gestion_Datos_Servidor_UPD+0x17c>)
 80007fc:	4618      	mov	r0, r3
 80007fe:	f7ff fce7 	bl	80001d0 <strcmp>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d107      	bne.n	8000818 <Gestion_Datos_Servidor_UPD+0xe0>
	{
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000808:	2200      	movs	r2, #0
 800080a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800080e:	4826      	ldr	r0, [pc, #152]	; (80008a8 <Gestion_Datos_Servidor_UPD+0x170>)
 8000810:	f001 ff6a 	bl	80026e8 <HAL_GPIO_WritePin>
		  return 1;
 8000814:	2301      	movs	r3, #1
 8000816:	e040      	b.n	800089a <Gestion_Datos_Servidor_UPD+0x162>
	}

	if(strcmp(string,"LED3_ON") == 0)
 8000818:	68bb      	ldr	r3, [r7, #8]
 800081a:	4927      	ldr	r1, [pc, #156]	; (80008b8 <Gestion_Datos_Servidor_UPD+0x180>)
 800081c:	4618      	mov	r0, r3
 800081e:	f7ff fcd7 	bl	80001d0 <strcmp>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d107      	bne.n	8000838 <Gestion_Datos_Servidor_UPD+0x100>
	{
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000828:	2201      	movs	r2, #1
 800082a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800082e:	481e      	ldr	r0, [pc, #120]	; (80008a8 <Gestion_Datos_Servidor_UPD+0x170>)
 8000830:	f001 ff5a 	bl	80026e8 <HAL_GPIO_WritePin>
		  return 1;
 8000834:	2301      	movs	r3, #1
 8000836:	e030      	b.n	800089a <Gestion_Datos_Servidor_UPD+0x162>
	}

	if(strcmp(string,"LED3_OFF") == 0)
 8000838:	68bb      	ldr	r3, [r7, #8]
 800083a:	4920      	ldr	r1, [pc, #128]	; (80008bc <Gestion_Datos_Servidor_UPD+0x184>)
 800083c:	4618      	mov	r0, r3
 800083e:	f7ff fcc7 	bl	80001d0 <strcmp>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d107      	bne.n	8000858 <Gestion_Datos_Servidor_UPD+0x120>
	{
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000848:	2200      	movs	r2, #0
 800084a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800084e:	4816      	ldr	r0, [pc, #88]	; (80008a8 <Gestion_Datos_Servidor_UPD+0x170>)
 8000850:	f001 ff4a 	bl	80026e8 <HAL_GPIO_WritePin>
		  return 1;
 8000854:	2301      	movs	r3, #1
 8000856:	e020      	b.n	800089a <Gestion_Datos_Servidor_UPD+0x162>
	}

	if(strcmp(string,"LED4_ON") == 0)
 8000858:	68bb      	ldr	r3, [r7, #8]
 800085a:	4919      	ldr	r1, [pc, #100]	; (80008c0 <Gestion_Datos_Servidor_UPD+0x188>)
 800085c:	4618      	mov	r0, r3
 800085e:	f7ff fcb7 	bl	80001d0 <strcmp>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d107      	bne.n	8000878 <Gestion_Datos_Servidor_UPD+0x140>
	{
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000868:	2201      	movs	r2, #1
 800086a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800086e:	480e      	ldr	r0, [pc, #56]	; (80008a8 <Gestion_Datos_Servidor_UPD+0x170>)
 8000870:	f001 ff3a 	bl	80026e8 <HAL_GPIO_WritePin>
		  return 1;
 8000874:	2301      	movs	r3, #1
 8000876:	e010      	b.n	800089a <Gestion_Datos_Servidor_UPD+0x162>
	}

	if(strcmp(string,"LED4_OFF") == 0)
 8000878:	68bb      	ldr	r3, [r7, #8]
 800087a:	4912      	ldr	r1, [pc, #72]	; (80008c4 <Gestion_Datos_Servidor_UPD+0x18c>)
 800087c:	4618      	mov	r0, r3
 800087e:	f7ff fca7 	bl	80001d0 <strcmp>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d107      	bne.n	8000898 <Gestion_Datos_Servidor_UPD+0x160>
	{
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000888:	2200      	movs	r2, #0
 800088a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800088e:	4806      	ldr	r0, [pc, #24]	; (80008a8 <Gestion_Datos_Servidor_UPD+0x170>)
 8000890:	f001 ff2a 	bl	80026e8 <HAL_GPIO_WritePin>
		  return 1;
 8000894:	2301      	movs	r3, #1
 8000896:	e000      	b.n	800089a <Gestion_Datos_Servidor_UPD+0x162>
	}

	  return 0;
 8000898:	2300      	movs	r3, #0
 800089a:	46ad      	mov	sp, r5
}
 800089c:	4618      	mov	r0, r3
 800089e:	3710      	adds	r7, #16
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bdb0      	pop	{r4, r5, r7, pc}
 80008a4:	0800e618 	.word	0x0800e618
 80008a8:	40020c00 	.word	0x40020c00
 80008ac:	0800e620 	.word	0x0800e620
 80008b0:	0800e62c 	.word	0x0800e62c
 80008b4:	0800e634 	.word	0x0800e634
 80008b8:	0800e640 	.word	0x0800e640
 80008bc:	0800e648 	.word	0x0800e648
 80008c0:	0800e654 	.word	0x0800e654
 80008c4:	0800e65c 	.word	0x0800e65c

080008c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0

  Init_HW();
 80008cc:	f7ff ff2a 	bl	8000724 <Init_HW>
  LWIP_Init();						//Declarar aqui IP, Mascara Subred y Puerta de Enlace del Servidor (Microcontrolador)
 80008d0:	f002 fb70 	bl	8002fb4 <LWIP_Init>
  udpServer_init();					//Declarar aqui IP del cliente (PC)
 80008d4:	f000 f940 	bl	8000b58 <udpServer_init>

  while (1)
  {
	  ethernetif_input(&gnetif);
 80008d8:	4802      	ldr	r0, [pc, #8]	; (80008e4 <main+0x1c>)
 80008da:	f002 ff31 	bl	8003740 <ethernetif_input>
	  sys_check_timeouts();
 80008de:	f009 fbf3 	bl	800a0c8 <sys_check_timeouts>
	  ethernetif_input(&gnetif);
 80008e2:	e7f9      	b.n	80008d8 <main+0x10>
 80008e4:	20000218 	.word	0x20000218

080008e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	607b      	str	r3, [r7, #4]
 80008f2:	4b10      	ldr	r3, [pc, #64]	; (8000934 <HAL_MspInit+0x4c>)
 80008f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008f6:	4a0f      	ldr	r2, [pc, #60]	; (8000934 <HAL_MspInit+0x4c>)
 80008f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008fc:	6453      	str	r3, [r2, #68]	; 0x44
 80008fe:	4b0d      	ldr	r3, [pc, #52]	; (8000934 <HAL_MspInit+0x4c>)
 8000900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000902:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000906:	607b      	str	r3, [r7, #4]
 8000908:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800090a:	2300      	movs	r3, #0
 800090c:	603b      	str	r3, [r7, #0]
 800090e:	4b09      	ldr	r3, [pc, #36]	; (8000934 <HAL_MspInit+0x4c>)
 8000910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000912:	4a08      	ldr	r2, [pc, #32]	; (8000934 <HAL_MspInit+0x4c>)
 8000914:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000918:	6413      	str	r3, [r2, #64]	; 0x40
 800091a:	4b06      	ldr	r3, [pc, #24]	; (8000934 <HAL_MspInit+0x4c>)
 800091c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000922:	603b      	str	r3, [r7, #0]
 8000924:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000926:	2007      	movs	r0, #7
 8000928:	f000 fb54 	bl	8000fd4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800092c:	bf00      	nop
 800092e:	3708      	adds	r7, #8
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	40023800 	.word	0x40023800

08000938 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800093c:	e7fe      	b.n	800093c <NMI_Handler+0x4>

0800093e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800093e:	b480      	push	{r7}
 8000940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000942:	e7fe      	b.n	8000942 <HardFault_Handler+0x4>

08000944 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000948:	e7fe      	b.n	8000948 <MemManage_Handler+0x4>

0800094a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800094a:	b480      	push	{r7}
 800094c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800094e:	e7fe      	b.n	800094e <BusFault_Handler+0x4>

08000950 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000954:	e7fe      	b.n	8000954 <UsageFault_Handler+0x4>

08000956 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000956:	b480      	push	{r7}
 8000958:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800095a:	bf00      	nop
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr

08000964 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000968:	bf00      	nop
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr

08000972 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000972:	b480      	push	{r7}
 8000974:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000976:	bf00      	nop
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr

08000980 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000984:	f000 fa12 	bl	8000dac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000988:	bf00      	nop
 800098a:	bd80      	pop	{r7, pc}

0800098c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000990:	4802      	ldr	r0, [pc, #8]	; (800099c <ETH_IRQHandler+0x10>)
 8000992:	f000 ff41 	bl	8001818 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000996:	bf00      	nop
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	20001b30 	.word	0x20001b30

080009a0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
	return 1;
 80009a4:	2301      	movs	r3, #1
}
 80009a6:	4618      	mov	r0, r3
 80009a8:	46bd      	mov	sp, r7
 80009aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ae:	4770      	bx	lr

080009b0 <_kill>:

int _kill(int pid, int sig)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b083      	sub	sp, #12
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
 80009b8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80009ba:	4b05      	ldr	r3, [pc, #20]	; (80009d0 <_kill+0x20>)
 80009bc:	2216      	movs	r2, #22
 80009be:	601a      	str	r2, [r3, #0]
	return -1;
 80009c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009c4:	4618      	mov	r0, r3
 80009c6:	370c      	adds	r7, #12
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr
 80009d0:	20006890 	.word	0x20006890

080009d4 <_exit>:

void _exit (int status)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80009dc:	f04f 31ff 	mov.w	r1, #4294967295
 80009e0:	6878      	ldr	r0, [r7, #4]
 80009e2:	f7ff ffe5 	bl	80009b0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80009e6:	e7fe      	b.n	80009e6 <_exit+0x12>

080009e8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b086      	sub	sp, #24
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	60f8      	str	r0, [r7, #12]
 80009f0:	60b9      	str	r1, [r7, #8]
 80009f2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009f4:	2300      	movs	r3, #0
 80009f6:	617b      	str	r3, [r7, #20]
 80009f8:	e00a      	b.n	8000a10 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80009fa:	f3af 8000 	nop.w
 80009fe:	4601      	mov	r1, r0
 8000a00:	68bb      	ldr	r3, [r7, #8]
 8000a02:	1c5a      	adds	r2, r3, #1
 8000a04:	60ba      	str	r2, [r7, #8]
 8000a06:	b2ca      	uxtb	r2, r1
 8000a08:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a0a:	697b      	ldr	r3, [r7, #20]
 8000a0c:	3301      	adds	r3, #1
 8000a0e:	617b      	str	r3, [r7, #20]
 8000a10:	697a      	ldr	r2, [r7, #20]
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	429a      	cmp	r2, r3
 8000a16:	dbf0      	blt.n	80009fa <_read+0x12>
	}

return len;
 8000a18:	687b      	ldr	r3, [r7, #4]
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	3718      	adds	r7, #24
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}

08000a22 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a22:	b580      	push	{r7, lr}
 8000a24:	b086      	sub	sp, #24
 8000a26:	af00      	add	r7, sp, #0
 8000a28:	60f8      	str	r0, [r7, #12]
 8000a2a:	60b9      	str	r1, [r7, #8]
 8000a2c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a2e:	2300      	movs	r3, #0
 8000a30:	617b      	str	r3, [r7, #20]
 8000a32:	e009      	b.n	8000a48 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000a34:	68bb      	ldr	r3, [r7, #8]
 8000a36:	1c5a      	adds	r2, r3, #1
 8000a38:	60ba      	str	r2, [r7, #8]
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a42:	697b      	ldr	r3, [r7, #20]
 8000a44:	3301      	adds	r3, #1
 8000a46:	617b      	str	r3, [r7, #20]
 8000a48:	697a      	ldr	r2, [r7, #20]
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	429a      	cmp	r2, r3
 8000a4e:	dbf1      	blt.n	8000a34 <_write+0x12>
	}
	return len;
 8000a50:	687b      	ldr	r3, [r7, #4]
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	3718      	adds	r7, #24
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}

08000a5a <_close>:

int _close(int file)
{
 8000a5a:	b480      	push	{r7}
 8000a5c:	b083      	sub	sp, #12
 8000a5e:	af00      	add	r7, sp, #0
 8000a60:	6078      	str	r0, [r7, #4]
	return -1;
 8000a62:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	370c      	adds	r7, #12
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr

08000a72 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a72:	b480      	push	{r7}
 8000a74:	b083      	sub	sp, #12
 8000a76:	af00      	add	r7, sp, #0
 8000a78:	6078      	str	r0, [r7, #4]
 8000a7a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a82:	605a      	str	r2, [r3, #4]
	return 0;
 8000a84:	2300      	movs	r3, #0
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	370c      	adds	r7, #12
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr

08000a92 <_isatty>:

int _isatty(int file)
{
 8000a92:	b480      	push	{r7}
 8000a94:	b083      	sub	sp, #12
 8000a96:	af00      	add	r7, sp, #0
 8000a98:	6078      	str	r0, [r7, #4]
	return 1;
 8000a9a:	2301      	movs	r3, #1
}
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	370c      	adds	r7, #12
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr

08000aa8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b085      	sub	sp, #20
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	60f8      	str	r0, [r7, #12]
 8000ab0:	60b9      	str	r1, [r7, #8]
 8000ab2:	607a      	str	r2, [r7, #4]
	return 0;
 8000ab4:	2300      	movs	r3, #0
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	3714      	adds	r7, #20
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
	...

08000ac4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b087      	sub	sp, #28
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000acc:	4a14      	ldr	r2, [pc, #80]	; (8000b20 <_sbrk+0x5c>)
 8000ace:	4b15      	ldr	r3, [pc, #84]	; (8000b24 <_sbrk+0x60>)
 8000ad0:	1ad3      	subs	r3, r2, r3
 8000ad2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ad4:	697b      	ldr	r3, [r7, #20]
 8000ad6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ad8:	4b13      	ldr	r3, [pc, #76]	; (8000b28 <_sbrk+0x64>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d102      	bne.n	8000ae6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ae0:	4b11      	ldr	r3, [pc, #68]	; (8000b28 <_sbrk+0x64>)
 8000ae2:	4a12      	ldr	r2, [pc, #72]	; (8000b2c <_sbrk+0x68>)
 8000ae4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ae6:	4b10      	ldr	r3, [pc, #64]	; (8000b28 <_sbrk+0x64>)
 8000ae8:	681a      	ldr	r2, [r3, #0]
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	4413      	add	r3, r2
 8000aee:	693a      	ldr	r2, [r7, #16]
 8000af0:	429a      	cmp	r2, r3
 8000af2:	d205      	bcs.n	8000b00 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000af4:	4b0e      	ldr	r3, [pc, #56]	; (8000b30 <_sbrk+0x6c>)
 8000af6:	220c      	movs	r2, #12
 8000af8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000afa:	f04f 33ff 	mov.w	r3, #4294967295
 8000afe:	e009      	b.n	8000b14 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b00:	4b09      	ldr	r3, [pc, #36]	; (8000b28 <_sbrk+0x64>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b06:	4b08      	ldr	r3, [pc, #32]	; (8000b28 <_sbrk+0x64>)
 8000b08:	681a      	ldr	r2, [r3, #0]
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	4413      	add	r3, r2
 8000b0e:	4a06      	ldr	r2, [pc, #24]	; (8000b28 <_sbrk+0x64>)
 8000b10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b12:	68fb      	ldr	r3, [r7, #12]
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	371c      	adds	r7, #28
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr
 8000b20:	20020000 	.word	0x20020000
 8000b24:	00000400 	.word	0x00000400
 8000b28:	20000094 	.word	0x20000094
 8000b2c:	200068a0 	.word	0x200068a0
 8000b30:	20006890 	.word	0x20006890

08000b34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b38:	4b06      	ldr	r3, [pc, #24]	; (8000b54 <SystemInit+0x20>)
 8000b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b3e:	4a05      	ldr	r2, [pc, #20]	; (8000b54 <SystemInit+0x20>)
 8000b40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b48:	bf00      	nop
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	e000ed00 	.word	0xe000ed00

08000b58 <udpServer_init>:
4. Process the datagram packet and send a reply to client.
5. Go back to Step 3.
*/

void udpServer_init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b084      	sub	sp, #16
 8000b5c:	af00      	add	r7, sp, #0
	// UDP Control Block structure
   struct udp_pcb *upcb;
   err_t err;

   /* 1. Create a new UDP control block  */
   upcb = udp_new();
 8000b5e:	f00a f819 	bl	800ab94 <udp_new>
 8000b62:	60f8      	str	r0, [r7, #12]

   /* 2. Bind the upcb to the local port */
   ip_addr_t myIPADDR;
   IP_ADDR4(&myIPADDR, 172, 25, 144, 126);
 8000b64:	4b0d      	ldr	r3, [pc, #52]	; (8000b9c <udpServer_init+0x44>)
 8000b66:	607b      	str	r3, [r7, #4]

   err = udp_bind(upcb, &myIPADDR, 7);  // 7 is the server UDP port
 8000b68:	1d3b      	adds	r3, r7, #4
 8000b6a:	2207      	movs	r2, #7
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	68f8      	ldr	r0, [r7, #12]
 8000b70:	f009 fe90 	bl	800a894 <udp_bind>
 8000b74:	4603      	mov	r3, r0
 8000b76:	72fb      	strb	r3, [r7, #11]


   /* 3. Set a receive callback for the upcb */
   if(err == ERR_OK)
 8000b78:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d105      	bne.n	8000b8c <udpServer_init+0x34>
   {
	   udp_recv(upcb, udp_receive_callback, NULL);
 8000b80:	2200      	movs	r2, #0
 8000b82:	4907      	ldr	r1, [pc, #28]	; (8000ba0 <udpServer_init+0x48>)
 8000b84:	68f8      	ldr	r0, [r7, #12]
 8000b86:	f009 ffa3 	bl	800aad0 <udp_recv>
   }
   else
   {
	   udp_remove(upcb);
   }
}
 8000b8a:	e002      	b.n	8000b92 <udpServer_init+0x3a>
	   udp_remove(upcb);
 8000b8c:	68f8      	ldr	r0, [r7, #12]
 8000b8e:	f009 ffbf 	bl	800ab10 <udp_remove>
}
 8000b92:	bf00      	nop
 8000b94:	3710      	adds	r7, #16
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	7e9019ac 	.word	0x7e9019ac
 8000ba0:	08000ba5 	.word	0x08000ba5

08000ba4 <udp_receive_callback>:

// udp_receive_callback will be called, when the client sends some data to the server
/* 4. Process the datagram packet and send a reply to client. */

void udp_receive_callback(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8000ba4:	b590      	push	{r4, r7, lr}
 8000ba6:	b0c9      	sub	sp, #292	; 0x124
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	f107 040c 	add.w	r4, r7, #12
 8000bae:	6020      	str	r0, [r4, #0]
 8000bb0:	f107 0008 	add.w	r0, r7, #8
 8000bb4:	6001      	str	r1, [r0, #0]
 8000bb6:	1d39      	adds	r1, r7, #4
 8000bb8:	600a      	str	r2, [r1, #0]
 8000bba:	463a      	mov	r2, r7
 8000bbc:	6013      	str	r3, [r2, #0]
	//char *remoteIP = ipaddr_ntoa(addr);

	char buf[256];												//Almacena datos recibidos
	char tx_buf[6];

	int len = sprintf (buf,"%s", (char*)p->payload);			//Obtiene numero de bytes recibido
 8000bbe:	1d3b      	adds	r3, r7, #4
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	685a      	ldr	r2, [r3, #4]
 8000bc4:	f107 0318 	add.w	r3, r7, #24
 8000bc8:	4939      	ldr	r1, [pc, #228]	; (8000cb0 <udp_receive_callback+0x10c>)
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f00c fba4 	bl	800d318 <siprintf>
 8000bd0:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c

	//APLICACION

	if(Gestion_Datos_Servidor_UPD(len, &buf)==1){				//Si la accion SI existe en el diccionario el servidor devuelve OK
 8000bd4:	f107 0318 	add.w	r3, r7, #24
 8000bd8:	4619      	mov	r1, r3
 8000bda:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8000bde:	f7ff fdab 	bl	8000738 <Gestion_Datos_Servidor_UPD>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b01      	cmp	r3, #1
 8000be6:	d10c      	bne.n	8000c02 <udp_receive_callback+0x5e>
		 tx_buf[0] = 'O'; tx_buf[1] = 'K';
 8000be8:	f107 0310 	add.w	r3, r7, #16
 8000bec:	224f      	movs	r2, #79	; 0x4f
 8000bee:	701a      	strb	r2, [r3, #0]
 8000bf0:	f107 0310 	add.w	r3, r7, #16
 8000bf4:	224b      	movs	r2, #75	; 0x4b
 8000bf6:	705a      	strb	r2, [r3, #1]
		 tx_buf[2] = '\n';
 8000bf8:	f107 0310 	add.w	r3, r7, #16
 8000bfc:	220a      	movs	r2, #10
 8000bfe:	709a      	strb	r2, [r3, #2]
 8000c00:	e017      	b.n	8000c32 <udp_receive_callback+0x8e>
	}else{
		 tx_buf[0] = 'E'; tx_buf[1] = 'R';						//Si la accion NO existe en el diccionario el servidor devuelve ERRROR
 8000c02:	f107 0310 	add.w	r3, r7, #16
 8000c06:	2245      	movs	r2, #69	; 0x45
 8000c08:	701a      	strb	r2, [r3, #0]
 8000c0a:	f107 0310 	add.w	r3, r7, #16
 8000c0e:	2252      	movs	r2, #82	; 0x52
 8000c10:	705a      	strb	r2, [r3, #1]
		 tx_buf[2] = 'R'; tx_buf[3] = 'O';
 8000c12:	f107 0310 	add.w	r3, r7, #16
 8000c16:	2252      	movs	r2, #82	; 0x52
 8000c18:	709a      	strb	r2, [r3, #2]
 8000c1a:	f107 0310 	add.w	r3, r7, #16
 8000c1e:	224f      	movs	r2, #79	; 0x4f
 8000c20:	70da      	strb	r2, [r3, #3]
		 tx_buf[4] = 'R'; tx_buf[5] = '\n';
 8000c22:	f107 0310 	add.w	r3, r7, #16
 8000c26:	2252      	movs	r2, #82	; 0x52
 8000c28:	711a      	strb	r2, [r3, #4]
 8000c2a:	f107 0310 	add.w	r3, r7, #16
 8000c2e:	220a      	movs	r2, #10
 8000c30:	715a      	strb	r2, [r3, #5]
	}

	//DEVUELVE RESPUESTA

	/* allocate pbuf from RAM*/
	txBuf = pbuf_alloc(PBUF_TRANSPORT,len, PBUF_RAM);
 8000c32:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000c36:	b29b      	uxth	r3, r3
 8000c38:	f44f 7220 	mov.w	r2, #640	; 0x280
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	2036      	movs	r0, #54	; 0x36
 8000c40:	f003 fdfe 	bl	8004840 <pbuf_alloc>
 8000c44:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

	/* copy the data into the buffer  */
	pbuf_take(txBuf, tx_buf, len);
 8000c48:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000c4c:	b29a      	uxth	r2, r3
 8000c4e:	f107 0310 	add.w	r3, r7, #16
 8000c52:	4619      	mov	r1, r3
 8000c54:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 8000c58:	f004 fb40 	bl	80052dc <pbuf_take>

	/* Connect to the remote client */
	udp_connect(upcb, addr, port);
 8000c5c:	f8b7 2130 	ldrh.w	r2, [r7, #304]	; 0x130
 8000c60:	4639      	mov	r1, r7
 8000c62:	f107 0308 	add.w	r3, r7, #8
 8000c66:	6809      	ldr	r1, [r1, #0]
 8000c68:	6818      	ldr	r0, [r3, #0]
 8000c6a:	f009 fe9b 	bl	800a9a4 <udp_connect>

	/* Send a Reply to the Client */
	udp_send(upcb, txBuf);
 8000c6e:	f107 0308 	add.w	r3, r7, #8
 8000c72:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 8000c76:	6818      	ldr	r0, [r3, #0]
 8000c78:	f009 fc22 	bl	800a4c0 <udp_send>

	/* free the UDP connection, so we can accept new clients */
	udp_disconnect(upcb);
 8000c7c:	f107 0308 	add.w	r3, r7, #8
 8000c80:	6818      	ldr	r0, [r3, #0]
 8000c82:	f009 fefd 	bl	800aa80 <udp_disconnect>

	/* Free the p_tx buffer */
	pbuf_free(txBuf);
 8000c86:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 8000c8a:	f004 f8bb 	bl	8004e04 <pbuf_free>

	/* Free the p buffer */
	pbuf_free(p);
 8000c8e:	1d3b      	adds	r3, r7, #4
 8000c90:	6818      	ldr	r0, [r3, #0]
 8000c92:	f004 f8b7 	bl	8004e04 <pbuf_free>

    memset(tx_buf, 0, len);										//Borra cadena de respuesta para siguiente peticion
 8000c96:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8000c9a:	f107 0310 	add.w	r3, r7, #16
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f00c fad9 	bl	800d258 <memset>

}
 8000ca6:	bf00      	nop
 8000ca8:	f507 7792 	add.w	r7, r7, #292	; 0x124
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd90      	pop	{r4, r7, pc}
 8000cb0:	0800e668 	.word	0x0800e668

08000cb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000cb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cb8:	480d      	ldr	r0, [pc, #52]	; (8000cf0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000cba:	490e      	ldr	r1, [pc, #56]	; (8000cf4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000cbc:	4a0e      	ldr	r2, [pc, #56]	; (8000cf8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cc0:	e002      	b.n	8000cc8 <LoopCopyDataInit>

08000cc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cc6:	3304      	adds	r3, #4

08000cc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ccc:	d3f9      	bcc.n	8000cc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cce:	4a0b      	ldr	r2, [pc, #44]	; (8000cfc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000cd0:	4c0b      	ldr	r4, [pc, #44]	; (8000d00 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cd4:	e001      	b.n	8000cda <LoopFillZerobss>

08000cd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cd8:	3204      	adds	r2, #4

08000cda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cdc:	d3fb      	bcc.n	8000cd6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000cde:	f7ff ff29 	bl	8000b34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ce2:	f00c fa5f 	bl	800d1a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ce6:	f7ff fdef 	bl	80008c8 <main>
  bx  lr    
 8000cea:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000cec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cf0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cf4:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000cf8:	080111dc 	.word	0x080111dc
  ldr r2, =_sbss
 8000cfc:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000d00:	200068a0 	.word	0x200068a0

08000d04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d04:	e7fe      	b.n	8000d04 <ADC_IRQHandler>
	...

08000d08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d0c:	4b0e      	ldr	r3, [pc, #56]	; (8000d48 <HAL_Init+0x40>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a0d      	ldr	r2, [pc, #52]	; (8000d48 <HAL_Init+0x40>)
 8000d12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d18:	4b0b      	ldr	r3, [pc, #44]	; (8000d48 <HAL_Init+0x40>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a0a      	ldr	r2, [pc, #40]	; (8000d48 <HAL_Init+0x40>)
 8000d1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d24:	4b08      	ldr	r3, [pc, #32]	; (8000d48 <HAL_Init+0x40>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a07      	ldr	r2, [pc, #28]	; (8000d48 <HAL_Init+0x40>)
 8000d2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d30:	2003      	movs	r0, #3
 8000d32:	f000 f94f 	bl	8000fd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d36:	2000      	movs	r0, #0
 8000d38:	f000 f808 	bl	8000d4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d3c:	f7ff fdd4 	bl	80008e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d40:	2300      	movs	r3, #0
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	40023c00 	.word	0x40023c00

08000d4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d54:	4b12      	ldr	r3, [pc, #72]	; (8000da0 <HAL_InitTick+0x54>)
 8000d56:	681a      	ldr	r2, [r3, #0]
 8000d58:	4b12      	ldr	r3, [pc, #72]	; (8000da4 <HAL_InitTick+0x58>)
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d62:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d66:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f000 f967 	bl	800103e <HAL_SYSTICK_Config>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d76:	2301      	movs	r3, #1
 8000d78:	e00e      	b.n	8000d98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	2b0f      	cmp	r3, #15
 8000d7e:	d80a      	bhi.n	8000d96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d80:	2200      	movs	r2, #0
 8000d82:	6879      	ldr	r1, [r7, #4]
 8000d84:	f04f 30ff 	mov.w	r0, #4294967295
 8000d88:	f000 f92f 	bl	8000fea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d8c:	4a06      	ldr	r2, [pc, #24]	; (8000da8 <HAL_InitTick+0x5c>)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d92:	2300      	movs	r3, #0
 8000d94:	e000      	b.n	8000d98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d96:	2301      	movs	r3, #1
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	3708      	adds	r7, #8
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	20000000 	.word	0x20000000
 8000da4:	20000008 	.word	0x20000008
 8000da8:	20000004 	.word	0x20000004

08000dac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000db0:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <HAL_IncTick+0x20>)
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	461a      	mov	r2, r3
 8000db6:	4b06      	ldr	r3, [pc, #24]	; (8000dd0 <HAL_IncTick+0x24>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4413      	add	r3, r2
 8000dbc:	4a04      	ldr	r2, [pc, #16]	; (8000dd0 <HAL_IncTick+0x24>)
 8000dbe:	6013      	str	r3, [r2, #0]
}
 8000dc0:	bf00      	nop
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	20000008 	.word	0x20000008
 8000dd0:	20000210 	.word	0x20000210

08000dd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  return uwTick;
 8000dd8:	4b03      	ldr	r3, [pc, #12]	; (8000de8 <HAL_GetTick+0x14>)
 8000dda:	681b      	ldr	r3, [r3, #0]
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	20000210 	.word	0x20000210

08000dec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b084      	sub	sp, #16
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000df4:	f7ff ffee 	bl	8000dd4 <HAL_GetTick>
 8000df8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e04:	d005      	beq.n	8000e12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e06:	4b0a      	ldr	r3, [pc, #40]	; (8000e30 <HAL_Delay+0x44>)
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	461a      	mov	r2, r3
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	4413      	add	r3, r2
 8000e10:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e12:	bf00      	nop
 8000e14:	f7ff ffde 	bl	8000dd4 <HAL_GetTick>
 8000e18:	4602      	mov	r2, r0
 8000e1a:	68bb      	ldr	r3, [r7, #8]
 8000e1c:	1ad3      	subs	r3, r2, r3
 8000e1e:	68fa      	ldr	r2, [r7, #12]
 8000e20:	429a      	cmp	r2, r3
 8000e22:	d8f7      	bhi.n	8000e14 <HAL_Delay+0x28>
  {
  }
}
 8000e24:	bf00      	nop
 8000e26:	bf00      	nop
 8000e28:	3710      	adds	r7, #16
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	20000008 	.word	0x20000008

08000e34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b085      	sub	sp, #20
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	f003 0307 	and.w	r3, r3, #7
 8000e42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e44:	4b0c      	ldr	r3, [pc, #48]	; (8000e78 <__NVIC_SetPriorityGrouping+0x44>)
 8000e46:	68db      	ldr	r3, [r3, #12]
 8000e48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e4a:	68ba      	ldr	r2, [r7, #8]
 8000e4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e50:	4013      	ands	r3, r2
 8000e52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e66:	4a04      	ldr	r2, [pc, #16]	; (8000e78 <__NVIC_SetPriorityGrouping+0x44>)
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	60d3      	str	r3, [r2, #12]
}
 8000e6c:	bf00      	nop
 8000e6e:	3714      	adds	r7, #20
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr
 8000e78:	e000ed00 	.word	0xe000ed00

08000e7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e80:	4b04      	ldr	r3, [pc, #16]	; (8000e94 <__NVIC_GetPriorityGrouping+0x18>)
 8000e82:	68db      	ldr	r3, [r3, #12]
 8000e84:	0a1b      	lsrs	r3, r3, #8
 8000e86:	f003 0307 	and.w	r3, r3, #7
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr
 8000e94:	e000ed00 	.word	0xe000ed00

08000e98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	db0b      	blt.n	8000ec2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eaa:	79fb      	ldrb	r3, [r7, #7]
 8000eac:	f003 021f 	and.w	r2, r3, #31
 8000eb0:	4907      	ldr	r1, [pc, #28]	; (8000ed0 <__NVIC_EnableIRQ+0x38>)
 8000eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb6:	095b      	lsrs	r3, r3, #5
 8000eb8:	2001      	movs	r0, #1
 8000eba:	fa00 f202 	lsl.w	r2, r0, r2
 8000ebe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ec2:	bf00      	nop
 8000ec4:	370c      	adds	r7, #12
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	e000e100 	.word	0xe000e100

08000ed4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	4603      	mov	r3, r0
 8000edc:	6039      	str	r1, [r7, #0]
 8000ede:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ee0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	db0a      	blt.n	8000efe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	b2da      	uxtb	r2, r3
 8000eec:	490c      	ldr	r1, [pc, #48]	; (8000f20 <__NVIC_SetPriority+0x4c>)
 8000eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef2:	0112      	lsls	r2, r2, #4
 8000ef4:	b2d2      	uxtb	r2, r2
 8000ef6:	440b      	add	r3, r1
 8000ef8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000efc:	e00a      	b.n	8000f14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	b2da      	uxtb	r2, r3
 8000f02:	4908      	ldr	r1, [pc, #32]	; (8000f24 <__NVIC_SetPriority+0x50>)
 8000f04:	79fb      	ldrb	r3, [r7, #7]
 8000f06:	f003 030f 	and.w	r3, r3, #15
 8000f0a:	3b04      	subs	r3, #4
 8000f0c:	0112      	lsls	r2, r2, #4
 8000f0e:	b2d2      	uxtb	r2, r2
 8000f10:	440b      	add	r3, r1
 8000f12:	761a      	strb	r2, [r3, #24]
}
 8000f14:	bf00      	nop
 8000f16:	370c      	adds	r7, #12
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr
 8000f20:	e000e100 	.word	0xe000e100
 8000f24:	e000ed00 	.word	0xe000ed00

08000f28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b089      	sub	sp, #36	; 0x24
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	60f8      	str	r0, [r7, #12]
 8000f30:	60b9      	str	r1, [r7, #8]
 8000f32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	f003 0307 	and.w	r3, r3, #7
 8000f3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f3c:	69fb      	ldr	r3, [r7, #28]
 8000f3e:	f1c3 0307 	rsb	r3, r3, #7
 8000f42:	2b04      	cmp	r3, #4
 8000f44:	bf28      	it	cs
 8000f46:	2304      	movcs	r3, #4
 8000f48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	3304      	adds	r3, #4
 8000f4e:	2b06      	cmp	r3, #6
 8000f50:	d902      	bls.n	8000f58 <NVIC_EncodePriority+0x30>
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	3b03      	subs	r3, #3
 8000f56:	e000      	b.n	8000f5a <NVIC_EncodePriority+0x32>
 8000f58:	2300      	movs	r3, #0
 8000f5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f5c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f60:	69bb      	ldr	r3, [r7, #24]
 8000f62:	fa02 f303 	lsl.w	r3, r2, r3
 8000f66:	43da      	mvns	r2, r3
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	401a      	ands	r2, r3
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f70:	f04f 31ff 	mov.w	r1, #4294967295
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	fa01 f303 	lsl.w	r3, r1, r3
 8000f7a:	43d9      	mvns	r1, r3
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f80:	4313      	orrs	r3, r2
         );
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3724      	adds	r7, #36	; 0x24
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
	...

08000f90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	3b01      	subs	r3, #1
 8000f9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fa0:	d301      	bcc.n	8000fa6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	e00f      	b.n	8000fc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fa6:	4a0a      	ldr	r2, [pc, #40]	; (8000fd0 <SysTick_Config+0x40>)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	3b01      	subs	r3, #1
 8000fac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fae:	210f      	movs	r1, #15
 8000fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb4:	f7ff ff8e 	bl	8000ed4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fb8:	4b05      	ldr	r3, [pc, #20]	; (8000fd0 <SysTick_Config+0x40>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fbe:	4b04      	ldr	r3, [pc, #16]	; (8000fd0 <SysTick_Config+0x40>)
 8000fc0:	2207      	movs	r2, #7
 8000fc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fc4:	2300      	movs	r3, #0
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	e000e010 	.word	0xe000e010

08000fd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	f7ff ff29 	bl	8000e34 <__NVIC_SetPriorityGrouping>
}
 8000fe2:	bf00      	nop
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fea:	b580      	push	{r7, lr}
 8000fec:	b086      	sub	sp, #24
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	60b9      	str	r1, [r7, #8]
 8000ff4:	607a      	str	r2, [r7, #4]
 8000ff6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ffc:	f7ff ff3e 	bl	8000e7c <__NVIC_GetPriorityGrouping>
 8001000:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001002:	687a      	ldr	r2, [r7, #4]
 8001004:	68b9      	ldr	r1, [r7, #8]
 8001006:	6978      	ldr	r0, [r7, #20]
 8001008:	f7ff ff8e 	bl	8000f28 <NVIC_EncodePriority>
 800100c:	4602      	mov	r2, r0
 800100e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001012:	4611      	mov	r1, r2
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff ff5d 	bl	8000ed4 <__NVIC_SetPriority>
}
 800101a:	bf00      	nop
 800101c:	3718      	adds	r7, #24
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}

08001022 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001022:	b580      	push	{r7, lr}
 8001024:	b082      	sub	sp, #8
 8001026:	af00      	add	r7, sp, #0
 8001028:	4603      	mov	r3, r0
 800102a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800102c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff ff31 	bl	8000e98 <__NVIC_EnableIRQ>
}
 8001036:	bf00      	nop
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}

0800103e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800103e:	b580      	push	{r7, lr}
 8001040:	b082      	sub	sp, #8
 8001042:	af00      	add	r7, sp, #0
 8001044:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001046:	6878      	ldr	r0, [r7, #4]
 8001048:	f7ff ffa2 	bl	8000f90 <SysTick_Config>
 800104c:	4603      	mov	r3, r0
}
 800104e:	4618      	mov	r0, r3
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
	...

08001058 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b088      	sub	sp, #32
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8001060:	2300      	movs	r3, #0
 8001062:	61fb      	str	r3, [r7, #28]
 8001064:	2300      	movs	r3, #0
 8001066:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8001068:	4baa      	ldr	r3, [pc, #680]	; (8001314 <HAL_ETH_Init+0x2bc>)
 800106a:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 800106c:	2300      	movs	r3, #0
 800106e:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001070:	2300      	movs	r3, #0
 8001072:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d101      	bne.n	800107e <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 800107a:	2301      	movs	r3, #1
 800107c:	e183      	b.n	8001386 <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001084:	b2db      	uxtb	r3, r3
 8001086:	2b00      	cmp	r3, #0
 8001088:	d106      	bne.n	8001098 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2200      	movs	r2, #0
 800108e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001092:	6878      	ldr	r0, [r7, #4]
 8001094:	f002 f8c0 	bl	8003218 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001098:	2300      	movs	r3, #0
 800109a:	60bb      	str	r3, [r7, #8]
 800109c:	4b9e      	ldr	r3, [pc, #632]	; (8001318 <HAL_ETH_Init+0x2c0>)
 800109e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010a0:	4a9d      	ldr	r2, [pc, #628]	; (8001318 <HAL_ETH_Init+0x2c0>)
 80010a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010a6:	6453      	str	r3, [r2, #68]	; 0x44
 80010a8:	4b9b      	ldr	r3, [pc, #620]	; (8001318 <HAL_ETH_Init+0x2c0>)
 80010aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010b0:	60bb      	str	r3, [r7, #8]
 80010b2:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80010b4:	4b99      	ldr	r3, [pc, #612]	; (800131c <HAL_ETH_Init+0x2c4>)
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	4a98      	ldr	r2, [pc, #608]	; (800131c <HAL_ETH_Init+0x2c4>)
 80010ba:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80010be:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80010c0:	4b96      	ldr	r3, [pc, #600]	; (800131c <HAL_ETH_Init+0x2c4>)
 80010c2:	685a      	ldr	r2, [r3, #4]
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6a1b      	ldr	r3, [r3, #32]
 80010c8:	4994      	ldr	r1, [pc, #592]	; (800131c <HAL_ETH_Init+0x2c4>)
 80010ca:	4313      	orrs	r3, r2
 80010cc:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f042 0201 	orr.w	r2, r2, #1
 80010e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80010e4:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80010e6:	f7ff fe75 	bl	8000dd4 <HAL_GetTick>
 80010ea:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80010ec:	e011      	b.n	8001112 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 80010ee:	f7ff fe71 	bl	8000dd4 <HAL_GetTick>
 80010f2:	4602      	mov	r2, r0
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	1ad3      	subs	r3, r2, r3
 80010f8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80010fc:	d909      	bls.n	8001112 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2203      	movs	r2, #3
 8001102:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2200      	movs	r2, #0
 800110a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 800110e:	2303      	movs	r3, #3
 8001110:	e139      	b.n	8001386 <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f003 0301 	and.w	r3, r3, #1
 8001120:	2b00      	cmp	r3, #0
 8001122:	d1e4      	bne.n	80010ee <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	691b      	ldr	r3, [r3, #16]
 800112a:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 800112c:	69fb      	ldr	r3, [r7, #28]
 800112e:	f023 031c 	bic.w	r3, r3, #28
 8001132:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001134:	f001 ff32 	bl	8002f9c <HAL_RCC_GetHCLKFreq>
 8001138:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 800113a:	69bb      	ldr	r3, [r7, #24]
 800113c:	4a78      	ldr	r2, [pc, #480]	; (8001320 <HAL_ETH_Init+0x2c8>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d908      	bls.n	8001154 <HAL_ETH_Init+0xfc>
 8001142:	69bb      	ldr	r3, [r7, #24]
 8001144:	4a77      	ldr	r2, [pc, #476]	; (8001324 <HAL_ETH_Init+0x2cc>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d804      	bhi.n	8001154 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	f043 0308 	orr.w	r3, r3, #8
 8001150:	61fb      	str	r3, [r7, #28]
 8001152:	e027      	b.n	80011a4 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8001154:	69bb      	ldr	r3, [r7, #24]
 8001156:	4a73      	ldr	r2, [pc, #460]	; (8001324 <HAL_ETH_Init+0x2cc>)
 8001158:	4293      	cmp	r3, r2
 800115a:	d908      	bls.n	800116e <HAL_ETH_Init+0x116>
 800115c:	69bb      	ldr	r3, [r7, #24]
 800115e:	4a6d      	ldr	r2, [pc, #436]	; (8001314 <HAL_ETH_Init+0x2bc>)
 8001160:	4293      	cmp	r3, r2
 8001162:	d204      	bcs.n	800116e <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	f043 030c 	orr.w	r3, r3, #12
 800116a:	61fb      	str	r3, [r7, #28]
 800116c:	e01a      	b.n	80011a4 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 800116e:	69bb      	ldr	r3, [r7, #24]
 8001170:	4a68      	ldr	r2, [pc, #416]	; (8001314 <HAL_ETH_Init+0x2bc>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d303      	bcc.n	800117e <HAL_ETH_Init+0x126>
 8001176:	69bb      	ldr	r3, [r7, #24]
 8001178:	4a6b      	ldr	r2, [pc, #428]	; (8001328 <HAL_ETH_Init+0x2d0>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d911      	bls.n	80011a2 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 800117e:	69bb      	ldr	r3, [r7, #24]
 8001180:	4a69      	ldr	r2, [pc, #420]	; (8001328 <HAL_ETH_Init+0x2d0>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d908      	bls.n	8001198 <HAL_ETH_Init+0x140>
 8001186:	69bb      	ldr	r3, [r7, #24]
 8001188:	4a68      	ldr	r2, [pc, #416]	; (800132c <HAL_ETH_Init+0x2d4>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d804      	bhi.n	8001198 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	f043 0304 	orr.w	r3, r3, #4
 8001194:	61fb      	str	r3, [r7, #28]
 8001196:	e005      	b.n	80011a4 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001198:	69fb      	ldr	r3, [r7, #28]
 800119a:	f043 0310 	orr.w	r3, r3, #16
 800119e:	61fb      	str	r3, [r7, #28]
 80011a0:	e000      	b.n	80011a4 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80011a2:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	69fa      	ldr	r2, [r7, #28]
 80011aa:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80011ac:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011b0:	2100      	movs	r1, #0
 80011b2:	6878      	ldr	r0, [r7, #4]
 80011b4:	f000 fc1d 	bl	80019f2 <HAL_ETH_WritePHYRegister>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d00b      	beq.n	80011d6 <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 80011be:	2301      	movs	r3, #1
 80011c0:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 80011c2:	6939      	ldr	r1, [r7, #16]
 80011c4:	6878      	ldr	r0, [r7, #4]
 80011c6:	f000 fdd3 	bl	8001d70 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2201      	movs	r2, #1
 80011ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 80011d2:	2301      	movs	r3, #1
 80011d4:	e0d7      	b.n	8001386 <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 80011d6:	20ff      	movs	r0, #255	; 0xff
 80011d8:	f7ff fe08 	bl	8000dec <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	f000 80a5 	beq.w	8001330 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80011e6:	f7ff fdf5 	bl	8000dd4 <HAL_GetTick>
 80011ea:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80011ec:	f107 030c 	add.w	r3, r7, #12
 80011f0:	461a      	mov	r2, r3
 80011f2:	2101      	movs	r1, #1
 80011f4:	6878      	ldr	r0, [r7, #4]
 80011f6:	f000 fb94 	bl	8001922 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 80011fa:	f7ff fdeb 	bl	8000dd4 <HAL_GetTick>
 80011fe:	4602      	mov	r2, r0
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	1ad3      	subs	r3, r2, r3
 8001204:	f241 3288 	movw	r2, #5000	; 0x1388
 8001208:	4293      	cmp	r3, r2
 800120a:	d90f      	bls.n	800122c <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800120c:	2301      	movs	r3, #1
 800120e:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001210:	6939      	ldr	r1, [r7, #16]
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	f000 fdac 	bl	8001d70 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2201      	movs	r2, #1
 800121c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2200      	movs	r2, #0
 8001224:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001228:	2303      	movs	r3, #3
 800122a:	e0ac      	b.n	8001386 <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	f003 0304 	and.w	r3, r3, #4
 8001232:	2b00      	cmp	r3, #0
 8001234:	d0da      	beq.n	80011ec <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8001236:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800123a:	2100      	movs	r1, #0
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f000 fbd8 	bl	80019f2 <HAL_ETH_WritePHYRegister>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d00b      	beq.n	8001260 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001248:	2301      	movs	r3, #1
 800124a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800124c:	6939      	ldr	r1, [r7, #16]
 800124e:	6878      	ldr	r0, [r7, #4]
 8001250:	f000 fd8e 	bl	8001d70 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2201      	movs	r2, #1
 8001258:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800125c:	2301      	movs	r3, #1
 800125e:	e092      	b.n	8001386 <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001260:	f7ff fdb8 	bl	8000dd4 <HAL_GetTick>
 8001264:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001266:	f107 030c 	add.w	r3, r7, #12
 800126a:	461a      	mov	r2, r3
 800126c:	2101      	movs	r1, #1
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	f000 fb57 	bl	8001922 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001274:	f7ff fdae 	bl	8000dd4 <HAL_GetTick>
 8001278:	4602      	mov	r2, r0
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001282:	4293      	cmp	r3, r2
 8001284:	d90f      	bls.n	80012a6 <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001286:	2301      	movs	r3, #1
 8001288:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800128a:	6939      	ldr	r1, [r7, #16]
 800128c:	6878      	ldr	r0, [r7, #4]
 800128e:	f000 fd6f 	bl	8001d70 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2201      	movs	r2, #1
 8001296:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2200      	movs	r2, #0
 800129e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80012a2:	2303      	movs	r3, #3
 80012a4:	e06f      	b.n	8001386 <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	f003 0320 	and.w	r3, r3, #32
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d0da      	beq.n	8001266 <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80012b0:	f107 030c 	add.w	r3, r7, #12
 80012b4:	461a      	mov	r2, r3
 80012b6:	211f      	movs	r1, #31
 80012b8:	6878      	ldr	r0, [r7, #4]
 80012ba:	f000 fb32 	bl	8001922 <HAL_ETH_ReadPHYRegister>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d00b      	beq.n	80012dc <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80012c4:	2301      	movs	r3, #1
 80012c6:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80012c8:	6939      	ldr	r1, [r7, #16]
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	f000 fd50 	bl	8001d70 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2201      	movs	r2, #1
 80012d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80012d8:	2301      	movs	r3, #1
 80012da:	e054      	b.n	8001386 <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	f003 0310 	and.w	r3, r3, #16
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d004      	beq.n	80012f0 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80012ec:	60da      	str	r2, [r3, #12]
 80012ee:	e002      	b.n	80012f6 <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2200      	movs	r2, #0
 80012f4:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	f003 0304 	and.w	r3, r3, #4
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d003      	beq.n	8001308 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2200      	movs	r2, #0
 8001304:	609a      	str	r2, [r3, #8]
 8001306:	e035      	b.n	8001374 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800130e:	609a      	str	r2, [r3, #8]
 8001310:	e030      	b.n	8001374 <HAL_ETH_Init+0x31c>
 8001312:	bf00      	nop
 8001314:	03938700 	.word	0x03938700
 8001318:	40023800 	.word	0x40023800
 800131c:	40013800 	.word	0x40013800
 8001320:	01312cff 	.word	0x01312cff
 8001324:	02160ebf 	.word	0x02160ebf
 8001328:	05f5e0ff 	.word	0x05f5e0ff
 800132c:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	68db      	ldr	r3, [r3, #12]
 8001334:	08db      	lsrs	r3, r3, #3
 8001336:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	689b      	ldr	r3, [r3, #8]
 800133c:	085b      	lsrs	r3, r3, #1
 800133e:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8001340:	4313      	orrs	r3, r2
 8001342:	b29b      	uxth	r3, r3
 8001344:	461a      	mov	r2, r3
 8001346:	2100      	movs	r1, #0
 8001348:	6878      	ldr	r0, [r7, #4]
 800134a:	f000 fb52 	bl	80019f2 <HAL_ETH_WritePHYRegister>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d00b      	beq.n	800136c <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001354:	2301      	movs	r3, #1
 8001356:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001358:	6939      	ldr	r1, [r7, #16]
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	f000 fd08 	bl	8001d70 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2201      	movs	r2, #1
 8001364:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001368:	2301      	movs	r3, #1
 800136a:	e00c      	b.n	8001386 <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 800136c:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001370:	f7ff fd3c 	bl	8000dec <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001374:	6939      	ldr	r1, [r7, #16]
 8001376:	6878      	ldr	r0, [r7, #4]
 8001378:	f000 fcfa 	bl	8001d70 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2201      	movs	r2, #1
 8001380:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001384:	2300      	movs	r3, #0
}
 8001386:	4618      	mov	r0, r3
 8001388:	3720      	adds	r7, #32
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop

08001390 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8001390:	b480      	push	{r7}
 8001392:	b087      	sub	sp, #28
 8001394:	af00      	add	r7, sp, #0
 8001396:	60f8      	str	r0, [r7, #12]
 8001398:	60b9      	str	r1, [r7, #8]
 800139a:	607a      	str	r2, [r7, #4]
 800139c:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 800139e:	2300      	movs	r3, #0
 80013a0:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	d101      	bne.n	80013b0 <HAL_ETH_DMATxDescListInit+0x20>
 80013ac:	2302      	movs	r3, #2
 80013ae:	e052      	b.n	8001456 <HAL_ETH_DMATxDescListInit+0xc6>
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	2201      	movs	r2, #1
 80013b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	2202      	movs	r2, #2
 80013bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	68ba      	ldr	r2, [r7, #8]
 80013c4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 80013c6:	2300      	movs	r3, #0
 80013c8:	617b      	str	r3, [r7, #20]
 80013ca:	e030      	b.n	800142e <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	015b      	lsls	r3, r3, #5
 80013d0:	68ba      	ldr	r2, [r7, #8]
 80013d2:	4413      	add	r3, r2
 80013d4:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80013dc:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80013e4:	fb02 f303 	mul.w	r3, r2, r3
 80013e8:	687a      	ldr	r2, [r7, #4]
 80013ea:	4413      	add	r3, r2
 80013ec:	461a      	mov	r2, r3
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	69db      	ldr	r3, [r3, #28]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d105      	bne.n	8001406 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	3b01      	subs	r3, #1
 800140a:	697a      	ldr	r2, [r7, #20]
 800140c:	429a      	cmp	r2, r3
 800140e:	d208      	bcs.n	8001422 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	3301      	adds	r3, #1
 8001414:	015b      	lsls	r3, r3, #5
 8001416:	68ba      	ldr	r2, [r7, #8]
 8001418:	4413      	add	r3, r2
 800141a:	461a      	mov	r2, r3
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	60da      	str	r2, [r3, #12]
 8001420:	e002      	b.n	8001428 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8001422:	68ba      	ldr	r2, [r7, #8]
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	3301      	adds	r3, #1
 800142c:	617b      	str	r3, [r7, #20]
 800142e:	697a      	ldr	r2, [r7, #20]
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	429a      	cmp	r2, r3
 8001434:	d3ca      	bcc.n	80013cc <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	68ba      	ldr	r2, [r7, #8]
 800143c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001440:	3310      	adds	r3, #16
 8001442:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	2201      	movs	r2, #1
 8001448:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	2200      	movs	r2, #0
 8001450:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001454:	2300      	movs	r3, #0
}
 8001456:	4618      	mov	r0, r3
 8001458:	371c      	adds	r7, #28
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr

08001462 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8001462:	b480      	push	{r7}
 8001464:	b087      	sub	sp, #28
 8001466:	af00      	add	r7, sp, #0
 8001468:	60f8      	str	r0, [r7, #12]
 800146a:	60b9      	str	r1, [r7, #8]
 800146c:	607a      	str	r2, [r7, #4]
 800146e:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8001470:	2300      	movs	r3, #0
 8001472:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800147a:	2b01      	cmp	r3, #1
 800147c:	d101      	bne.n	8001482 <HAL_ETH_DMARxDescListInit+0x20>
 800147e:	2302      	movs	r3, #2
 8001480:	e056      	b.n	8001530 <HAL_ETH_DMARxDescListInit+0xce>
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	2201      	movs	r2, #1
 8001486:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	2202      	movs	r2, #2
 800148e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	68ba      	ldr	r2, [r7, #8]
 8001496:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 8001498:	2300      	movs	r3, #0
 800149a:	617b      	str	r3, [r7, #20]
 800149c:	e034      	b.n	8001508 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	015b      	lsls	r3, r3, #5
 80014a2:	68ba      	ldr	r2, [r7, #8]
 80014a4:	4413      	add	r3, r2
 80014a6:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80014ae:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80014b6:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80014be:	fb02 f303 	mul.w	r3, r2, r3
 80014c2:	687a      	ldr	r2, [r7, #4]
 80014c4:	4413      	add	r3, r2
 80014c6:	461a      	mov	r2, r3
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	699b      	ldr	r3, [r3, #24]
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d105      	bne.n	80014e0 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	3b01      	subs	r3, #1
 80014e4:	697a      	ldr	r2, [r7, #20]
 80014e6:	429a      	cmp	r2, r3
 80014e8:	d208      	bcs.n	80014fc <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	3301      	adds	r3, #1
 80014ee:	015b      	lsls	r3, r3, #5
 80014f0:	68ba      	ldr	r2, [r7, #8]
 80014f2:	4413      	add	r3, r2
 80014f4:	461a      	mov	r2, r3
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	60da      	str	r2, [r3, #12]
 80014fa:	e002      	b.n	8001502 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 80014fc:	68ba      	ldr	r2, [r7, #8]
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	3301      	adds	r3, #1
 8001506:	617b      	str	r3, [r7, #20]
 8001508:	697a      	ldr	r2, [r7, #20]
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	429a      	cmp	r2, r3
 800150e:	d3c6      	bcc.n	800149e <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	68ba      	ldr	r2, [r7, #8]
 8001516:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800151a:	330c      	adds	r3, #12
 800151c:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	2201      	movs	r2, #1
 8001522:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	2200      	movs	r2, #0
 800152a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800152e:	2300      	movs	r3, #0
}
 8001530:	4618      	mov	r0, r3
 8001532:	371c      	adds	r7, #28
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr

0800153c <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 800153c:	b480      	push	{r7}
 800153e:	b087      	sub	sp, #28
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8001546:	2300      	movs	r3, #0
 8001548:	617b      	str	r3, [r7, #20]
 800154a:	2300      	movs	r3, #0
 800154c:	60fb      	str	r3, [r7, #12]
 800154e:	2300      	movs	r3, #0
 8001550:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001558:	2b01      	cmp	r3, #1
 800155a:	d101      	bne.n	8001560 <HAL_ETH_TransmitFrame+0x24>
 800155c:	2302      	movs	r3, #2
 800155e:	e0cd      	b.n	80016fc <HAL_ETH_TransmitFrame+0x1c0>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2201      	movs	r2, #1
 8001564:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2202      	movs	r2, #2
 800156c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d109      	bne.n	800158a <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2201      	movs	r2, #1
 800157a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2200      	movs	r2, #0
 8001582:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8001586:	2301      	movs	r3, #1
 8001588:	e0b8      	b.n	80016fc <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	2b00      	cmp	r3, #0
 8001592:	da09      	bge.n	80015a8 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2212      	movs	r2, #18
 8001598:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2200      	movs	r2, #0
 80015a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 80015a4:	2301      	movs	r3, #1
 80015a6:	e0a9      	b.n	80016fc <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d915      	bls.n	80015de <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	4a54      	ldr	r2, [pc, #336]	; (8001708 <HAL_ETH_TransmitFrame+0x1cc>)
 80015b6:	fba2 2303 	umull	r2, r3, r2, r3
 80015ba:	0a9b      	lsrs	r3, r3, #10
 80015bc:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 80015be:	683a      	ldr	r2, [r7, #0]
 80015c0:	4b51      	ldr	r3, [pc, #324]	; (8001708 <HAL_ETH_TransmitFrame+0x1cc>)
 80015c2:	fba3 1302 	umull	r1, r3, r3, r2
 80015c6:	0a9b      	lsrs	r3, r3, #10
 80015c8:	f240 51f4 	movw	r1, #1524	; 0x5f4
 80015cc:	fb01 f303 	mul.w	r3, r1, r3
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d005      	beq.n	80015e2 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	3301      	adds	r3, #1
 80015da:	617b      	str	r3, [r7, #20]
 80015dc:	e001      	b.n	80015e2 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 80015de:	2301      	movs	r3, #1
 80015e0:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	d11c      	bne.n	8001622 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015f2:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 80015f6:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015fc:	683a      	ldr	r2, [r7, #0]
 80015fe:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001602:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800160e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001612:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001618:	68db      	ldr	r3, [r3, #12]
 800161a:	461a      	mov	r2, r3
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001620:	e04b      	b.n	80016ba <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 8001622:	2300      	movs	r3, #0
 8001624:	613b      	str	r3, [r7, #16]
 8001626:	e044      	b.n	80016b2 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001632:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001636:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d107      	bne.n	800164e <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001648:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800164c:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001652:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001656:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	3b01      	subs	r3, #1
 800165c:	693a      	ldr	r2, [r7, #16]
 800165e:	429a      	cmp	r2, r3
 8001660:	d116      	bne.n	8001690 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800166c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001670:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	4a25      	ldr	r2, [pc, #148]	; (800170c <HAL_ETH_TransmitFrame+0x1d0>)
 8001676:	fb02 f203 	mul.w	r2, r2, r3
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	4413      	add	r3, r2
 800167e:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8001682:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001688:	68fa      	ldr	r2, [r7, #12]
 800168a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800168e:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800169a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800169e:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016a4:	68db      	ldr	r3, [r3, #12]
 80016a6:	461a      	mov	r2, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	3301      	adds	r3, #1
 80016b0:	613b      	str	r3, [r7, #16]
 80016b2:	693a      	ldr	r2, [r7, #16]
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	429a      	cmp	r2, r3
 80016b8:	d3b6      	bcc.n	8001628 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016c2:	3314      	adds	r3, #20
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 0304 	and.w	r3, r3, #4
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d00d      	beq.n	80016ea <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016d6:	3314      	adds	r3, #20
 80016d8:	2204      	movs	r2, #4
 80016da:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016e4:	3304      	adds	r3, #4
 80016e6:	2200      	movs	r2, #0
 80016e8:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2201      	movs	r2, #1
 80016ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2200      	movs	r2, #0
 80016f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80016fa:	2300      	movs	r3, #0
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	371c      	adds	r7, #28
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr
 8001708:	ac02b00b 	.word	0xac02b00b
 800170c:	fffffa0c 	.word	0xfffffa0c

08001710 <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 8001710:	b480      	push	{r7}
 8001712:	b085      	sub	sp, #20
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0U;
 8001718:	2300      	movs	r3, #0
 800171a:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001722:	2b01      	cmp	r3, #1
 8001724:	d101      	bne.n	800172a <HAL_ETH_GetReceivedFrame+0x1a>
 8001726:	2302      	movs	r3, #2
 8001728:	e070      	b.n	800180c <HAL_ETH_GetReceivedFrame+0xfc>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2201      	movs	r2, #1
 800172e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2202      	movs	r2, #2
 8001736:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	2b00      	cmp	r3, #0
 8001742:	db5a      	blt.n	80017fa <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800174e:	2b00      	cmp	r3, #0
 8001750:	d030      	beq.n	80017b4 <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001756:	1c5a      	adds	r2, r3, #1
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1U)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001760:	2b01      	cmp	r3, #1
 8001762:	d103      	bne.n	800176c <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	0c1b      	lsrs	r3, r3, #16
 800177c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001780:	3b04      	subs	r3, #4
 8001782:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	68fa      	ldr	r2, [r7, #12]
 8001788:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178e:	689a      	ldr	r2, [r3, #8]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001798:	68db      	ldr	r3, [r3, #12]
 800179a:	461a      	mov	r2, r3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2201      	movs	r2, #1
 80017a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2200      	movs	r2, #0
 80017ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 80017b0:	2300      	movs	r3, #0
 80017b2:	e02b      	b.n	800180c <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d010      	beq.n	80017e4 <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2200      	movs	r2, #0
 80017ce:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1U;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2201      	movs	r2, #1
 80017d4:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	461a      	mov	r2, r3
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	629a      	str	r2, [r3, #40]	; 0x28
 80017e2:	e00a      	b.n	80017fa <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017e8:	1c5a      	adds	r2, r3, #1
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	461a      	mov	r2, r3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2201      	movs	r2, #1
 80017fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2200      	movs	r2, #0
 8001806:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
}
 800180c:	4618      	mov	r0, r3
 800180e:	3714      	adds	r7, #20
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr

08001818 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001828:	3314      	adds	r3, #20
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001830:	2b40      	cmp	r3, #64	; 0x40
 8001832:	d112      	bne.n	800185a <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8001834:	6878      	ldr	r0, [r7, #4]
 8001836:	f000 f860 	bl	80018fa <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001842:	3314      	adds	r3, #20
 8001844:	2240      	movs	r2, #64	; 0x40
 8001846:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2201      	movs	r2, #1
 800184c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2200      	movs	r2, #0
 8001854:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001858:	e01b      	b.n	8001892 <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001862:	3314      	adds	r3, #20
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 0301 	and.w	r3, r3, #1
 800186a:	2b01      	cmp	r3, #1
 800186c:	d111      	bne.n	8001892 <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f000 f839 	bl	80018e6 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800187c:	3314      	adds	r3, #20
 800187e:	2201      	movs	r2, #1
 8001880:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2201      	movs	r2, #1
 8001886:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2200      	movs	r2, #0
 800188e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800189a:	3314      	adds	r3, #20
 800189c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80018a0:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018aa:	3314      	adds	r3, #20
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80018b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80018b6:	d112      	bne.n	80018de <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 80018b8:	6878      	ldr	r0, [r7, #4]
 80018ba:	f000 f828 	bl	800190e <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018c6:	3314      	adds	r3, #20
 80018c8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80018cc:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2201      	movs	r2, #1
 80018d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2200      	movs	r2, #0
 80018da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 80018de:	bf00      	nop
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}

080018e6 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 80018e6:	b480      	push	{r7}
 80018e8:	b083      	sub	sp, #12
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 80018ee:	bf00      	nop
 80018f0:	370c      	adds	r7, #12
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr

080018fa <HAL_ETH_RxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 80018fa:	b480      	push	{r7}
 80018fc:	b083      	sub	sp, #12
 80018fe:	af00      	add	r7, sp, #0
 8001900:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8001902:	bf00      	nop
 8001904:	370c      	adds	r7, #12
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr

0800190e <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 800190e:	b480      	push	{r7}
 8001910:	b083      	sub	sp, #12
 8001912:	af00      	add	r7, sp, #0
 8001914:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8001916:	bf00      	nop
 8001918:	370c      	adds	r7, #12
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr

08001922 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001922:	b580      	push	{r7, lr}
 8001924:	b086      	sub	sp, #24
 8001926:	af00      	add	r7, sp, #0
 8001928:	60f8      	str	r0, [r7, #12]
 800192a:	460b      	mov	r3, r1
 800192c:	607a      	str	r2, [r7, #4]
 800192e:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 8001930:	2300      	movs	r3, #0
 8001932:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001934:	2300      	movs	r3, #0
 8001936:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800193e:	b2db      	uxtb	r3, r3
 8001940:	2b82      	cmp	r3, #130	; 0x82
 8001942:	d101      	bne.n	8001948 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001944:	2302      	movs	r3, #2
 8001946:	e050      	b.n	80019ea <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	2282      	movs	r2, #130	; 0x82
 800194c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	691b      	ldr	r3, [r3, #16]
 8001956:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	f003 031c 	and.w	r3, r3, #28
 800195e:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	8a1b      	ldrh	r3, [r3, #16]
 8001964:	02db      	lsls	r3, r3, #11
 8001966:	b29b      	uxth	r3, r3
 8001968:	697a      	ldr	r2, [r7, #20]
 800196a:	4313      	orrs	r3, r2
 800196c:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 800196e:	897b      	ldrh	r3, [r7, #10]
 8001970:	019b      	lsls	r3, r3, #6
 8001972:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001976:	697a      	ldr	r2, [r7, #20]
 8001978:	4313      	orrs	r3, r2
 800197a:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	f023 0302 	bic.w	r3, r3, #2
 8001982:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	f043 0301 	orr.w	r3, r3, #1
 800198a:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	697a      	ldr	r2, [r7, #20]
 8001992:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001994:	f7ff fa1e 	bl	8000dd4 <HAL_GetTick>
 8001998:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800199a:	e015      	b.n	80019c8 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 800199c:	f7ff fa1a 	bl	8000dd4 <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019aa:	d309      	bcc.n	80019c0 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	2201      	movs	r2, #1
 80019b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	2200      	movs	r2, #0
 80019b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80019bc:	2303      	movs	r3, #3
 80019be:	e014      	b.n	80019ea <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	691b      	ldr	r3, [r3, #16]
 80019c6:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	f003 0301 	and.w	r3, r3, #1
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d1e4      	bne.n	800199c <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	695b      	ldr	r3, [r3, #20]
 80019d8:	b29b      	uxth	r3, r3
 80019da:	461a      	mov	r2, r3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	2201      	movs	r2, #1
 80019e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80019e8:	2300      	movs	r3, #0
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3718      	adds	r7, #24
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}

080019f2 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 80019f2:	b580      	push	{r7, lr}
 80019f4:	b086      	sub	sp, #24
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	60f8      	str	r0, [r7, #12]
 80019fa:	460b      	mov	r3, r1
 80019fc:	607a      	str	r2, [r7, #4]
 80019fe:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8001a00:	2300      	movs	r3, #0
 8001a02:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001a04:	2300      	movs	r3, #0
 8001a06:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	2b42      	cmp	r3, #66	; 0x42
 8001a12:	d101      	bne.n	8001a18 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001a14:	2302      	movs	r3, #2
 8001a16:	e04e      	b.n	8001ab6 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	2242      	movs	r2, #66	; 0x42
 8001a1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	691b      	ldr	r3, [r3, #16]
 8001a26:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	f003 031c 	and.w	r3, r3, #28
 8001a2e:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	8a1b      	ldrh	r3, [r3, #16]
 8001a34:	02db      	lsls	r3, r3, #11
 8001a36:	b29b      	uxth	r3, r3
 8001a38:	697a      	ldr	r2, [r7, #20]
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001a3e:	897b      	ldrh	r3, [r7, #10]
 8001a40:	019b      	lsls	r3, r3, #6
 8001a42:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001a46:	697a      	ldr	r2, [r7, #20]
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	f043 0302 	orr.w	r3, r3, #2
 8001a52:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	f043 0301 	orr.w	r3, r3, #1
 8001a5a:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	b29a      	uxth	r2, r3
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	697a      	ldr	r2, [r7, #20]
 8001a6c:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001a6e:	f7ff f9b1 	bl	8000dd4 <HAL_GetTick>
 8001a72:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001a74:	e015      	b.n	8001aa2 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001a76:	f7ff f9ad 	bl	8000dd4 <HAL_GetTick>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	1ad3      	subs	r3, r2, r3
 8001a80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a84:	d309      	bcc.n	8001a9a <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	2201      	movs	r2, #1
 8001a8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	2200      	movs	r2, #0
 8001a92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001a96:	2303      	movs	r3, #3
 8001a98:	e00d      	b.n	8001ab6 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	691b      	ldr	r3, [r3, #16]
 8001aa0:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	f003 0301 	and.w	r3, r3, #1
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d1e4      	bne.n	8001a76 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	2201      	movs	r2, #1
 8001ab0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001ab4:	2300      	movs	r3, #0
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3718      	adds	r7, #24
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}

08001abe <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8001abe:	b580      	push	{r7, lr}
 8001ac0:	b082      	sub	sp, #8
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d101      	bne.n	8001ad4 <HAL_ETH_Start+0x16>
 8001ad0:	2302      	movs	r3, #2
 8001ad2:	e01f      	b.n	8001b14 <HAL_ETH_Start+0x56>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2202      	movs	r2, #2
 8001ae0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f000 fb45 	bl	8002174 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f000 fb7c 	bl	80021e8 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001af0:	6878      	ldr	r0, [r7, #4]
 8001af2:	f000 fc13 	bl	800231c <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f000 fbb0 	bl	800225c <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f000 fbdd 	bl	80022bc <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2201      	movs	r2, #1
 8001b06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001b12:	2300      	movs	r3, #0
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	3708      	adds	r7, #8
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}

08001b1c <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d101      	bne.n	8001b32 <HAL_ETH_Stop+0x16>
 8001b2e:	2302      	movs	r3, #2
 8001b30:	e01f      	b.n	8001b72 <HAL_ETH_Stop+0x56>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2201      	movs	r2, #1
 8001b36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2202      	movs	r2, #2
 8001b3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f000 fba2 	bl	800228c <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f000 fbcf 	bl	80022ec <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f000 fb67 	bl	8002222 <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001b54:	6878      	ldr	r0, [r7, #4]
 8001b56:	f000 fbe1 	bl	800231c <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f000 fb27 	bl	80021ae <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2201      	movs	r2, #1
 8001b64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001b70:	2300      	movs	r3, #0
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
	...

08001b7c <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b084      	sub	sp, #16
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 8001b86:	2300      	movs	r3, #0
 8001b88:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d101      	bne.n	8001b98 <HAL_ETH_ConfigMAC+0x1c>
 8001b94:	2302      	movs	r3, #2
 8001b96:	e0e4      	b.n	8001d62 <HAL_ETH_ConfigMAC+0x1e6>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2202      	movs	r2, #2
 8001ba4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	f000 80b1 	beq.w	8001d12 <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001bb8:	68fa      	ldr	r2, [r7, #12]
 8001bba:	4b6c      	ldr	r3, [pc, #432]	; (8001d6c <HAL_ETH_ConfigMAC+0x1f0>)
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001bc8:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8001bce:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8001bd4:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8001bda:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8001be0:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8001be6:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8001bec:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8001bf2:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8001bf8:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8001bfe:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8001c04:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8001c0a:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001c0c:	68fa      	ldr	r2, [r7, #12]
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	68fa      	ldr	r2, [r7, #12]
 8001c18:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c22:	2001      	movs	r0, #1
 8001c24:	f7ff f8e2 	bl	8000dec <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	68fa      	ldr	r2, [r7, #12]
 8001c2e:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001c38:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8001c3e:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8001c44:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8001c4a:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8001c50:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8001c56:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8001c62:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001c64:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c6e:	2001      	movs	r0, #1
 8001c70:	f7ff f8bc 	bl	8000dec <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	68fa      	ldr	r2, [r7, #12]
 8001c7a:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	683a      	ldr	r2, [r7, #0]
 8001c82:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001c84:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	683a      	ldr	r2, [r7, #0]
 8001c8c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001c8e:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	699b      	ldr	r3, [r3, #24]
 8001c96:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001c98:	68fa      	ldr	r2, [r7, #12]
 8001c9a:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ca6:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8001cac:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8001cb2:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8001cb8:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8001cbe:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8001cc4:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8001cc6:	68fa      	ldr	r2, [r7, #12]
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	68fa      	ldr	r2, [r7, #12]
 8001cd2:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	699b      	ldr	r3, [r3, #24]
 8001cda:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001cdc:	2001      	movs	r0, #1
 8001cde:	f7ff f885 	bl	8000dec <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	68fa      	ldr	r2, [r7, #12]
 8001ce8:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	430a      	orrs	r2, r1
 8001cf8:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	69db      	ldr	r3, [r3, #28]
 8001d00:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d02:	2001      	movs	r0, #1
 8001d04:	f7ff f872 	bl	8000dec <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	68fa      	ldr	r2, [r7, #12]
 8001d0e:	61da      	str	r2, [r3, #28]
 8001d10:	e01e      	b.n	8001d50 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001d20:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	689a      	ldr	r2, [r3, #8]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	68db      	ldr	r3, [r3, #12]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	68fa      	ldr	r2, [r7, #12]
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	68fa      	ldr	r2, [r7, #12]
 8001d38:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d42:	2001      	movs	r0, #1
 8001d44:	f7ff f852 	bl	8000dec <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	68fa      	ldr	r2, [r7, #12]
 8001d4e:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2201      	movs	r2, #1
 8001d54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8001d60:	2300      	movs	r3, #0
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3710      	adds	r7, #16
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	ff20810f 	.word	0xff20810f

08001d70 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b0b0      	sub	sp, #192	; 0xc0
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
 8001d78:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d007      	beq.n	8001d96 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d8c:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d94:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001d96:	2300      	movs	r3, #0
 8001d98:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8001da2:	2300      	movs	r3, #0
 8001da4:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8001da6:	2300      	movs	r3, #0
 8001da8:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8001daa:	2300      	movs	r3, #0
 8001dac:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	69db      	ldr	r3, [r3, #28]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d103      	bne.n	8001dbe <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8001db6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001dba:	663b      	str	r3, [r7, #96]	; 0x60
 8001dbc:	e001      	b.n	8001dc2 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8001dc2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001dc6:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001ddc:	2340      	movs	r3, #64	; 0x40
 8001dde:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8001de0:	2300      	movs	r3, #0
 8001de2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8001de6:	2300      	movs	r3, #0
 8001de8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001dec:	2300      	movs	r3, #0
 8001dee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8001df2:	2300      	movs	r3, #0
 8001df4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8001e04:	2300      	movs	r3, #0
 8001e06:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8001e10:	2380      	movs	r3, #128	; 0x80
 8001e12:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001e16:	2300      	movs	r3, #0
 8001e18:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8001e22:	2300      	movs	r3, #0
 8001e24:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8001e34:	2300      	movs	r3, #0
 8001e36:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001e44:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001e48:	4bac      	ldr	r3, [pc, #688]	; (80020fc <ETH_MACDMAConfig+0x38c>)
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001e50:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8001e52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001e54:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8001e56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8001e58:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8001e5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8001e5c:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8001e62:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8001e64:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8001e66:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8001e68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8001e6a:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8001e70:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8001e72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8001e74:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8001e76:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8001e78:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8001e7a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8001e7c:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8001e7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8001e80:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8001e82:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8001e84:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001e86:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001e98:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ea4:	2001      	movs	r0, #1
 8001ea6:	f7fe ffa1 	bl	8000dec <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001eb2:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001eb4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8001eb6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001eb8:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8001eba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8001ebc:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8001ebe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8001ec2:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8001ec4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8001ec8:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8001eca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8001ece:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8001ed0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8001ed4:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8001ed8:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8001ee0:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001ee2:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001eee:	2001      	movs	r0, #1
 8001ef0:	f7fe ff7c 	bl	8000dec <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001efc:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001f06:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001f10:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	699b      	ldr	r3, [r3, #24]
 8001f18:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001f1c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f20:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001f24:	4013      	ands	r3, r2
 8001f26:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001f2a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001f2e:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8001f30:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001f34:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8001f36:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8001f3a:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8001f3c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8001f40:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8001f42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8001f46:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8001f48:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8001f4c:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001f4e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f52:	4313      	orrs	r3, r2
 8001f54:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f60:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	699b      	ldr	r3, [r3, #24]
 8001f68:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f6c:	2001      	movs	r0, #1
 8001f6e:	f7fe ff3d 	bl	8000dec <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f7a:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001f7c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8001f80:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	430a      	orrs	r2, r1
 8001f8a:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	69db      	ldr	r3, [r3, #28]
 8001f92:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f96:	2001      	movs	r0, #1
 8001f98:	f7fe ff28 	bl	8000dec <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001fa4:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8001faa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001fae:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8001fb4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001fb8:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8001fca:	2304      	movs	r3, #4
 8001fcc:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8001fce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8001fd4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001fd8:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001fda:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001fde:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001fe0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fe4:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8001fe6:	2380      	movs	r3, #128	; 0x80
 8001fe8:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8001fea:	2300      	movs	r3, #0
 8001fec:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ffa:	3318      	adds	r3, #24
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002002:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002006:	4b3e      	ldr	r3, [pc, #248]	; (8002100 <ETH_MACDMAConfig+0x390>)
 8002008:	4013      	ands	r3, r2
 800200a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800200e:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8002010:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002012:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8002014:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8002016:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8002018:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 800201a:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 800201c:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 800201e:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8002020:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8002022:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8002024:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8002026:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8002028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 800202a:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 800202c:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 800202e:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002030:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002034:	4313      	orrs	r3, r2
 8002036:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002042:	3318      	adds	r3, #24
 8002044:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002048:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002052:	3318      	adds	r3, #24
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800205a:	2001      	movs	r0, #1
 800205c:	f7fe fec6 	bl	8000dec <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002068:	3318      	adds	r3, #24
 800206a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800206e:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002070:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8002072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002074:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002076:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8002078:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 800207a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800207c:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 800207e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8002080:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 8002082:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002084:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8002086:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8002088:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 800208a:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002094:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002098:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80020a8:	2001      	movs	r0, #1
 80020aa:	f7fe fe9f 	bl	8000dec <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020b6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020ba:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	699b      	ldr	r3, [r3, #24]
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d10f      	bne.n	80020e4 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020cc:	331c      	adds	r3, #28
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80020d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80020dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020e0:	331c      	adds	r3, #28
 80020e2:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	695b      	ldr	r3, [r3, #20]
 80020e8:	461a      	mov	r2, r3
 80020ea:	2100      	movs	r1, #0
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	f000 f809 	bl	8002104 <ETH_MACAddressConfig>
}
 80020f2:	bf00      	nop
 80020f4:	37c0      	adds	r7, #192	; 0xc0
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	ff20810f 	.word	0xff20810f
 8002100:	f8de3f23 	.word	0xf8de3f23

08002104 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002104:	b480      	push	{r7}
 8002106:	b087      	sub	sp, #28
 8002108:	af00      	add	r7, sp, #0
 800210a:	60f8      	str	r0, [r7, #12]
 800210c:	60b9      	str	r1, [r7, #8]
 800210e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	3305      	adds	r3, #5
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	021b      	lsls	r3, r3, #8
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	3204      	adds	r2, #4
 800211c:	7812      	ldrb	r2, [r2, #0]
 800211e:	4313      	orrs	r3, r2
 8002120:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002122:	68ba      	ldr	r2, [r7, #8]
 8002124:	4b11      	ldr	r3, [pc, #68]	; (800216c <ETH_MACAddressConfig+0x68>)
 8002126:	4413      	add	r3, r2
 8002128:	461a      	mov	r2, r3
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	3303      	adds	r3, #3
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	061a      	lsls	r2, r3, #24
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	3302      	adds	r3, #2
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	041b      	lsls	r3, r3, #16
 800213e:	431a      	orrs	r2, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	3301      	adds	r3, #1
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	021b      	lsls	r3, r3, #8
 8002148:	4313      	orrs	r3, r2
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	7812      	ldrb	r2, [r2, #0]
 800214e:	4313      	orrs	r3, r2
 8002150:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002152:	68ba      	ldr	r2, [r7, #8]
 8002154:	4b06      	ldr	r3, [pc, #24]	; (8002170 <ETH_MACAddressConfig+0x6c>)
 8002156:	4413      	add	r3, r2
 8002158:	461a      	mov	r2, r3
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	6013      	str	r3, [r2, #0]
}
 800215e:	bf00      	nop
 8002160:	371c      	adds	r7, #28
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	40028040 	.word	0x40028040
 8002170:	40028044 	.word	0x40028044

08002174 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8002174:	b580      	push	{r7, lr}
 8002176:	b084      	sub	sp, #16
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800217c:	2300      	movs	r3, #0
 800217e:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f042 0208 	orr.w	r2, r2, #8
 800218e:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002198:	2001      	movs	r0, #1
 800219a:	f000 f8e9 	bl	8002370 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	68fa      	ldr	r2, [r7, #12]
 80021a4:	601a      	str	r2, [r3, #0]
}
 80021a6:	bf00      	nop
 80021a8:	3710      	adds	r7, #16
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}

080021ae <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 80021ae:	b580      	push	{r7, lr}
 80021b0:	b084      	sub	sp, #16
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80021b6:	2300      	movs	r3, #0
 80021b8:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f022 0208 	bic.w	r2, r2, #8
 80021c8:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80021d2:	2001      	movs	r0, #1
 80021d4:	f000 f8cc 	bl	8002370 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	68fa      	ldr	r2, [r7, #12]
 80021de:	601a      	str	r2, [r3, #0]
}
 80021e0:	bf00      	nop
 80021e2:	3710      	adds	r7, #16
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}

080021e8 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b084      	sub	sp, #16
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80021f0:	2300      	movs	r3, #0
 80021f2:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f042 0204 	orr.w	r2, r2, #4
 8002202:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800220c:	2001      	movs	r0, #1
 800220e:	f000 f8af 	bl	8002370 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	68fa      	ldr	r2, [r7, #12]
 8002218:	601a      	str	r2, [r3, #0]
}
 800221a:	bf00      	nop
 800221c:	3710      	adds	r7, #16
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}

08002222 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002222:	b580      	push	{r7, lr}
 8002224:	b084      	sub	sp, #16
 8002226:	af00      	add	r7, sp, #0
 8002228:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800222a:	2300      	movs	r3, #0
 800222c:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f022 0204 	bic.w	r2, r2, #4
 800223c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002246:	2001      	movs	r0, #1
 8002248:	f000 f892 	bl	8002370 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	68fa      	ldr	r2, [r7, #12]
 8002252:	601a      	str	r2, [r3, #0]
}
 8002254:	bf00      	nop
 8002256:	3710      	adds	r7, #16
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}

0800225c <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800226c:	3318      	adds	r3, #24
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002278:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800227c:	3318      	adds	r3, #24
 800227e:	601a      	str	r2, [r3, #0]
}
 8002280:	bf00      	nop
 8002282:	370c      	adds	r7, #12
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr

0800228c <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800229c:	3318      	adds	r3, #24
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80022a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022ac:	3318      	adds	r3, #24
 80022ae:	601a      	str	r2, [r3, #0]
}
 80022b0:	bf00      	nop
 80022b2:	370c      	adds	r7, #12
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr

080022bc <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022cc:	3318      	adds	r3, #24
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f042 0202 	orr.w	r2, r2, #2
 80022d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022dc:	3318      	adds	r3, #24
 80022de:	601a      	str	r2, [r3, #0]
}
 80022e0:	bf00      	nop
 80022e2:	370c      	adds	r7, #12
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr

080022ec <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022fc:	3318      	adds	r3, #24
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f022 0202 	bic.w	r2, r2, #2
 8002308:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800230c:	3318      	adds	r3, #24
 800230e:	601a      	str	r2, [r3, #0]
}
 8002310:	bf00      	nop
 8002312:	370c      	adds	r7, #12
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr

0800231c <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b084      	sub	sp, #16
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002324:	2300      	movs	r3, #0
 8002326:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002330:	3318      	adds	r3, #24
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800233c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002340:	3318      	adds	r3, #24
 8002342:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800234c:	3318      	adds	r3, #24
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002352:	2001      	movs	r0, #1
 8002354:	f000 f80c 	bl	8002370 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	68fa      	ldr	r2, [r7, #12]
 800235e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002362:	3318      	adds	r3, #24
 8002364:	601a      	str	r2, [r3, #0]
}
 8002366:	bf00      	nop
 8002368:	3710      	adds	r7, #16
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
	...

08002370 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8002370:	b480      	push	{r7}
 8002372:	b085      	sub	sp, #20
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002378:	4b0b      	ldr	r3, [pc, #44]	; (80023a8 <ETH_Delay+0x38>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a0b      	ldr	r2, [pc, #44]	; (80023ac <ETH_Delay+0x3c>)
 800237e:	fba2 2303 	umull	r2, r3, r2, r3
 8002382:	0a5b      	lsrs	r3, r3, #9
 8002384:	687a      	ldr	r2, [r7, #4]
 8002386:	fb02 f303 	mul.w	r3, r2, r3
 800238a:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 800238c:	bf00      	nop
  } 
  while (Delay --);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	1e5a      	subs	r2, r3, #1
 8002392:	60fa      	str	r2, [r7, #12]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d1f9      	bne.n	800238c <ETH_Delay+0x1c>
}
 8002398:	bf00      	nop
 800239a:	bf00      	nop
 800239c:	3714      	adds	r7, #20
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
 80023a6:	bf00      	nop
 80023a8:	20000000 	.word	0x20000000
 80023ac:	10624dd3 	.word	0x10624dd3

080023b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b089      	sub	sp, #36	; 0x24
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023ba:	2300      	movs	r3, #0
 80023bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023be:	2300      	movs	r3, #0
 80023c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80023c2:	2300      	movs	r3, #0
 80023c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023c6:	2300      	movs	r3, #0
 80023c8:	61fb      	str	r3, [r7, #28]
 80023ca:	e16b      	b.n	80026a4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80023cc:	2201      	movs	r2, #1
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	fa02 f303 	lsl.w	r3, r2, r3
 80023d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	697a      	ldr	r2, [r7, #20]
 80023dc:	4013      	ands	r3, r2
 80023de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023e0:	693a      	ldr	r2, [r7, #16]
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	f040 815a 	bne.w	800269e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	f003 0303 	and.w	r3, r3, #3
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d005      	beq.n	8002402 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023fe:	2b02      	cmp	r3, #2
 8002400:	d130      	bne.n	8002464 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	005b      	lsls	r3, r3, #1
 800240c:	2203      	movs	r2, #3
 800240e:	fa02 f303 	lsl.w	r3, r2, r3
 8002412:	43db      	mvns	r3, r3
 8002414:	69ba      	ldr	r2, [r7, #24]
 8002416:	4013      	ands	r3, r2
 8002418:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	68da      	ldr	r2, [r3, #12]
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	005b      	lsls	r3, r3, #1
 8002422:	fa02 f303 	lsl.w	r3, r2, r3
 8002426:	69ba      	ldr	r2, [r7, #24]
 8002428:	4313      	orrs	r3, r2
 800242a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	69ba      	ldr	r2, [r7, #24]
 8002430:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002438:	2201      	movs	r2, #1
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	fa02 f303 	lsl.w	r3, r2, r3
 8002440:	43db      	mvns	r3, r3
 8002442:	69ba      	ldr	r2, [r7, #24]
 8002444:	4013      	ands	r3, r2
 8002446:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	091b      	lsrs	r3, r3, #4
 800244e:	f003 0201 	and.w	r2, r3, #1
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	fa02 f303 	lsl.w	r3, r2, r3
 8002458:	69ba      	ldr	r2, [r7, #24]
 800245a:	4313      	orrs	r3, r2
 800245c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	69ba      	ldr	r2, [r7, #24]
 8002462:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f003 0303 	and.w	r3, r3, #3
 800246c:	2b03      	cmp	r3, #3
 800246e:	d017      	beq.n	80024a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	005b      	lsls	r3, r3, #1
 800247a:	2203      	movs	r2, #3
 800247c:	fa02 f303 	lsl.w	r3, r2, r3
 8002480:	43db      	mvns	r3, r3
 8002482:	69ba      	ldr	r2, [r7, #24]
 8002484:	4013      	ands	r3, r2
 8002486:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	689a      	ldr	r2, [r3, #8]
 800248c:	69fb      	ldr	r3, [r7, #28]
 800248e:	005b      	lsls	r3, r3, #1
 8002490:	fa02 f303 	lsl.w	r3, r2, r3
 8002494:	69ba      	ldr	r2, [r7, #24]
 8002496:	4313      	orrs	r3, r2
 8002498:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	69ba      	ldr	r2, [r7, #24]
 800249e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	f003 0303 	and.w	r3, r3, #3
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	d123      	bne.n	80024f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	08da      	lsrs	r2, r3, #3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	3208      	adds	r2, #8
 80024b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	f003 0307 	and.w	r3, r3, #7
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	220f      	movs	r2, #15
 80024c4:	fa02 f303 	lsl.w	r3, r2, r3
 80024c8:	43db      	mvns	r3, r3
 80024ca:	69ba      	ldr	r2, [r7, #24]
 80024cc:	4013      	ands	r3, r2
 80024ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	691a      	ldr	r2, [r3, #16]
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	f003 0307 	and.w	r3, r3, #7
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	fa02 f303 	lsl.w	r3, r2, r3
 80024e0:	69ba      	ldr	r2, [r7, #24]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	08da      	lsrs	r2, r3, #3
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	3208      	adds	r2, #8
 80024ee:	69b9      	ldr	r1, [r7, #24]
 80024f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	005b      	lsls	r3, r3, #1
 80024fe:	2203      	movs	r2, #3
 8002500:	fa02 f303 	lsl.w	r3, r2, r3
 8002504:	43db      	mvns	r3, r3
 8002506:	69ba      	ldr	r2, [r7, #24]
 8002508:	4013      	ands	r3, r2
 800250a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f003 0203 	and.w	r2, r3, #3
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	005b      	lsls	r3, r3, #1
 8002518:	fa02 f303 	lsl.w	r3, r2, r3
 800251c:	69ba      	ldr	r2, [r7, #24]
 800251e:	4313      	orrs	r3, r2
 8002520:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	69ba      	ldr	r2, [r7, #24]
 8002526:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002530:	2b00      	cmp	r3, #0
 8002532:	f000 80b4 	beq.w	800269e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002536:	2300      	movs	r3, #0
 8002538:	60fb      	str	r3, [r7, #12]
 800253a:	4b60      	ldr	r3, [pc, #384]	; (80026bc <HAL_GPIO_Init+0x30c>)
 800253c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800253e:	4a5f      	ldr	r2, [pc, #380]	; (80026bc <HAL_GPIO_Init+0x30c>)
 8002540:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002544:	6453      	str	r3, [r2, #68]	; 0x44
 8002546:	4b5d      	ldr	r3, [pc, #372]	; (80026bc <HAL_GPIO_Init+0x30c>)
 8002548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800254a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800254e:	60fb      	str	r3, [r7, #12]
 8002550:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002552:	4a5b      	ldr	r2, [pc, #364]	; (80026c0 <HAL_GPIO_Init+0x310>)
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	089b      	lsrs	r3, r3, #2
 8002558:	3302      	adds	r3, #2
 800255a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800255e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	f003 0303 	and.w	r3, r3, #3
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	220f      	movs	r2, #15
 800256a:	fa02 f303 	lsl.w	r3, r2, r3
 800256e:	43db      	mvns	r3, r3
 8002570:	69ba      	ldr	r2, [r7, #24]
 8002572:	4013      	ands	r3, r2
 8002574:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	4a52      	ldr	r2, [pc, #328]	; (80026c4 <HAL_GPIO_Init+0x314>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d02b      	beq.n	80025d6 <HAL_GPIO_Init+0x226>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	4a51      	ldr	r2, [pc, #324]	; (80026c8 <HAL_GPIO_Init+0x318>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d025      	beq.n	80025d2 <HAL_GPIO_Init+0x222>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4a50      	ldr	r2, [pc, #320]	; (80026cc <HAL_GPIO_Init+0x31c>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d01f      	beq.n	80025ce <HAL_GPIO_Init+0x21e>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	4a4f      	ldr	r2, [pc, #316]	; (80026d0 <HAL_GPIO_Init+0x320>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d019      	beq.n	80025ca <HAL_GPIO_Init+0x21a>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4a4e      	ldr	r2, [pc, #312]	; (80026d4 <HAL_GPIO_Init+0x324>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d013      	beq.n	80025c6 <HAL_GPIO_Init+0x216>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4a4d      	ldr	r2, [pc, #308]	; (80026d8 <HAL_GPIO_Init+0x328>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d00d      	beq.n	80025c2 <HAL_GPIO_Init+0x212>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	4a4c      	ldr	r2, [pc, #304]	; (80026dc <HAL_GPIO_Init+0x32c>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d007      	beq.n	80025be <HAL_GPIO_Init+0x20e>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	4a4b      	ldr	r2, [pc, #300]	; (80026e0 <HAL_GPIO_Init+0x330>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d101      	bne.n	80025ba <HAL_GPIO_Init+0x20a>
 80025b6:	2307      	movs	r3, #7
 80025b8:	e00e      	b.n	80025d8 <HAL_GPIO_Init+0x228>
 80025ba:	2308      	movs	r3, #8
 80025bc:	e00c      	b.n	80025d8 <HAL_GPIO_Init+0x228>
 80025be:	2306      	movs	r3, #6
 80025c0:	e00a      	b.n	80025d8 <HAL_GPIO_Init+0x228>
 80025c2:	2305      	movs	r3, #5
 80025c4:	e008      	b.n	80025d8 <HAL_GPIO_Init+0x228>
 80025c6:	2304      	movs	r3, #4
 80025c8:	e006      	b.n	80025d8 <HAL_GPIO_Init+0x228>
 80025ca:	2303      	movs	r3, #3
 80025cc:	e004      	b.n	80025d8 <HAL_GPIO_Init+0x228>
 80025ce:	2302      	movs	r3, #2
 80025d0:	e002      	b.n	80025d8 <HAL_GPIO_Init+0x228>
 80025d2:	2301      	movs	r3, #1
 80025d4:	e000      	b.n	80025d8 <HAL_GPIO_Init+0x228>
 80025d6:	2300      	movs	r3, #0
 80025d8:	69fa      	ldr	r2, [r7, #28]
 80025da:	f002 0203 	and.w	r2, r2, #3
 80025de:	0092      	lsls	r2, r2, #2
 80025e0:	4093      	lsls	r3, r2
 80025e2:	69ba      	ldr	r2, [r7, #24]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025e8:	4935      	ldr	r1, [pc, #212]	; (80026c0 <HAL_GPIO_Init+0x310>)
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	089b      	lsrs	r3, r3, #2
 80025ee:	3302      	adds	r3, #2
 80025f0:	69ba      	ldr	r2, [r7, #24]
 80025f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025f6:	4b3b      	ldr	r3, [pc, #236]	; (80026e4 <HAL_GPIO_Init+0x334>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	43db      	mvns	r3, r3
 8002600:	69ba      	ldr	r2, [r7, #24]
 8002602:	4013      	ands	r3, r2
 8002604:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d003      	beq.n	800261a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002612:	69ba      	ldr	r2, [r7, #24]
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	4313      	orrs	r3, r2
 8002618:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800261a:	4a32      	ldr	r2, [pc, #200]	; (80026e4 <HAL_GPIO_Init+0x334>)
 800261c:	69bb      	ldr	r3, [r7, #24]
 800261e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002620:	4b30      	ldr	r3, [pc, #192]	; (80026e4 <HAL_GPIO_Init+0x334>)
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	43db      	mvns	r3, r3
 800262a:	69ba      	ldr	r2, [r7, #24]
 800262c:	4013      	ands	r3, r2
 800262e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002638:	2b00      	cmp	r3, #0
 800263a:	d003      	beq.n	8002644 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800263c:	69ba      	ldr	r2, [r7, #24]
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	4313      	orrs	r3, r2
 8002642:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002644:	4a27      	ldr	r2, [pc, #156]	; (80026e4 <HAL_GPIO_Init+0x334>)
 8002646:	69bb      	ldr	r3, [r7, #24]
 8002648:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800264a:	4b26      	ldr	r3, [pc, #152]	; (80026e4 <HAL_GPIO_Init+0x334>)
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	43db      	mvns	r3, r3
 8002654:	69ba      	ldr	r2, [r7, #24]
 8002656:	4013      	ands	r3, r2
 8002658:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d003      	beq.n	800266e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002666:	69ba      	ldr	r2, [r7, #24]
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	4313      	orrs	r3, r2
 800266c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800266e:	4a1d      	ldr	r2, [pc, #116]	; (80026e4 <HAL_GPIO_Init+0x334>)
 8002670:	69bb      	ldr	r3, [r7, #24]
 8002672:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002674:	4b1b      	ldr	r3, [pc, #108]	; (80026e4 <HAL_GPIO_Init+0x334>)
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	43db      	mvns	r3, r3
 800267e:	69ba      	ldr	r2, [r7, #24]
 8002680:	4013      	ands	r3, r2
 8002682:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800268c:	2b00      	cmp	r3, #0
 800268e:	d003      	beq.n	8002698 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002690:	69ba      	ldr	r2, [r7, #24]
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	4313      	orrs	r3, r2
 8002696:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002698:	4a12      	ldr	r2, [pc, #72]	; (80026e4 <HAL_GPIO_Init+0x334>)
 800269a:	69bb      	ldr	r3, [r7, #24]
 800269c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	3301      	adds	r3, #1
 80026a2:	61fb      	str	r3, [r7, #28]
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	2b0f      	cmp	r3, #15
 80026a8:	f67f ae90 	bls.w	80023cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026ac:	bf00      	nop
 80026ae:	bf00      	nop
 80026b0:	3724      	adds	r7, #36	; 0x24
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr
 80026ba:	bf00      	nop
 80026bc:	40023800 	.word	0x40023800
 80026c0:	40013800 	.word	0x40013800
 80026c4:	40020000 	.word	0x40020000
 80026c8:	40020400 	.word	0x40020400
 80026cc:	40020800 	.word	0x40020800
 80026d0:	40020c00 	.word	0x40020c00
 80026d4:	40021000 	.word	0x40021000
 80026d8:	40021400 	.word	0x40021400
 80026dc:	40021800 	.word	0x40021800
 80026e0:	40021c00 	.word	0x40021c00
 80026e4:	40013c00 	.word	0x40013c00

080026e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
 80026f0:	460b      	mov	r3, r1
 80026f2:	807b      	strh	r3, [r7, #2]
 80026f4:	4613      	mov	r3, r2
 80026f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026f8:	787b      	ldrb	r3, [r7, #1]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d003      	beq.n	8002706 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026fe:	887a      	ldrh	r2, [r7, #2]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002704:	e003      	b.n	800270e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002706:	887b      	ldrh	r3, [r7, #2]
 8002708:	041a      	lsls	r2, r3, #16
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	619a      	str	r2, [r3, #24]
}
 800270e:	bf00      	nop
 8002710:	370c      	adds	r7, #12
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
	...

0800271c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b086      	sub	sp, #24
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d101      	bne.n	800272e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e264      	b.n	8002bf8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0301 	and.w	r3, r3, #1
 8002736:	2b00      	cmp	r3, #0
 8002738:	d075      	beq.n	8002826 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800273a:	4ba3      	ldr	r3, [pc, #652]	; (80029c8 <HAL_RCC_OscConfig+0x2ac>)
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	f003 030c 	and.w	r3, r3, #12
 8002742:	2b04      	cmp	r3, #4
 8002744:	d00c      	beq.n	8002760 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002746:	4ba0      	ldr	r3, [pc, #640]	; (80029c8 <HAL_RCC_OscConfig+0x2ac>)
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800274e:	2b08      	cmp	r3, #8
 8002750:	d112      	bne.n	8002778 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002752:	4b9d      	ldr	r3, [pc, #628]	; (80029c8 <HAL_RCC_OscConfig+0x2ac>)
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800275a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800275e:	d10b      	bne.n	8002778 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002760:	4b99      	ldr	r3, [pc, #612]	; (80029c8 <HAL_RCC_OscConfig+0x2ac>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002768:	2b00      	cmp	r3, #0
 800276a:	d05b      	beq.n	8002824 <HAL_RCC_OscConfig+0x108>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d157      	bne.n	8002824 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e23f      	b.n	8002bf8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002780:	d106      	bne.n	8002790 <HAL_RCC_OscConfig+0x74>
 8002782:	4b91      	ldr	r3, [pc, #580]	; (80029c8 <HAL_RCC_OscConfig+0x2ac>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a90      	ldr	r2, [pc, #576]	; (80029c8 <HAL_RCC_OscConfig+0x2ac>)
 8002788:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800278c:	6013      	str	r3, [r2, #0]
 800278e:	e01d      	b.n	80027cc <HAL_RCC_OscConfig+0xb0>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002798:	d10c      	bne.n	80027b4 <HAL_RCC_OscConfig+0x98>
 800279a:	4b8b      	ldr	r3, [pc, #556]	; (80029c8 <HAL_RCC_OscConfig+0x2ac>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a8a      	ldr	r2, [pc, #552]	; (80029c8 <HAL_RCC_OscConfig+0x2ac>)
 80027a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027a4:	6013      	str	r3, [r2, #0]
 80027a6:	4b88      	ldr	r3, [pc, #544]	; (80029c8 <HAL_RCC_OscConfig+0x2ac>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a87      	ldr	r2, [pc, #540]	; (80029c8 <HAL_RCC_OscConfig+0x2ac>)
 80027ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027b0:	6013      	str	r3, [r2, #0]
 80027b2:	e00b      	b.n	80027cc <HAL_RCC_OscConfig+0xb0>
 80027b4:	4b84      	ldr	r3, [pc, #528]	; (80029c8 <HAL_RCC_OscConfig+0x2ac>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a83      	ldr	r2, [pc, #524]	; (80029c8 <HAL_RCC_OscConfig+0x2ac>)
 80027ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027be:	6013      	str	r3, [r2, #0]
 80027c0:	4b81      	ldr	r3, [pc, #516]	; (80029c8 <HAL_RCC_OscConfig+0x2ac>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a80      	ldr	r2, [pc, #512]	; (80029c8 <HAL_RCC_OscConfig+0x2ac>)
 80027c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d013      	beq.n	80027fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027d4:	f7fe fafe 	bl	8000dd4 <HAL_GetTick>
 80027d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027da:	e008      	b.n	80027ee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027dc:	f7fe fafa 	bl	8000dd4 <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	2b64      	cmp	r3, #100	; 0x64
 80027e8:	d901      	bls.n	80027ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e204      	b.n	8002bf8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ee:	4b76      	ldr	r3, [pc, #472]	; (80029c8 <HAL_RCC_OscConfig+0x2ac>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d0f0      	beq.n	80027dc <HAL_RCC_OscConfig+0xc0>
 80027fa:	e014      	b.n	8002826 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027fc:	f7fe faea 	bl	8000dd4 <HAL_GetTick>
 8002800:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002802:	e008      	b.n	8002816 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002804:	f7fe fae6 	bl	8000dd4 <HAL_GetTick>
 8002808:	4602      	mov	r2, r0
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	2b64      	cmp	r3, #100	; 0x64
 8002810:	d901      	bls.n	8002816 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002812:	2303      	movs	r3, #3
 8002814:	e1f0      	b.n	8002bf8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002816:	4b6c      	ldr	r3, [pc, #432]	; (80029c8 <HAL_RCC_OscConfig+0x2ac>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d1f0      	bne.n	8002804 <HAL_RCC_OscConfig+0xe8>
 8002822:	e000      	b.n	8002826 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002824:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0302 	and.w	r3, r3, #2
 800282e:	2b00      	cmp	r3, #0
 8002830:	d063      	beq.n	80028fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002832:	4b65      	ldr	r3, [pc, #404]	; (80029c8 <HAL_RCC_OscConfig+0x2ac>)
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	f003 030c 	and.w	r3, r3, #12
 800283a:	2b00      	cmp	r3, #0
 800283c:	d00b      	beq.n	8002856 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800283e:	4b62      	ldr	r3, [pc, #392]	; (80029c8 <HAL_RCC_OscConfig+0x2ac>)
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002846:	2b08      	cmp	r3, #8
 8002848:	d11c      	bne.n	8002884 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800284a:	4b5f      	ldr	r3, [pc, #380]	; (80029c8 <HAL_RCC_OscConfig+0x2ac>)
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002852:	2b00      	cmp	r3, #0
 8002854:	d116      	bne.n	8002884 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002856:	4b5c      	ldr	r3, [pc, #368]	; (80029c8 <HAL_RCC_OscConfig+0x2ac>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0302 	and.w	r3, r3, #2
 800285e:	2b00      	cmp	r3, #0
 8002860:	d005      	beq.n	800286e <HAL_RCC_OscConfig+0x152>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	68db      	ldr	r3, [r3, #12]
 8002866:	2b01      	cmp	r3, #1
 8002868:	d001      	beq.n	800286e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e1c4      	b.n	8002bf8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800286e:	4b56      	ldr	r3, [pc, #344]	; (80029c8 <HAL_RCC_OscConfig+0x2ac>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	691b      	ldr	r3, [r3, #16]
 800287a:	00db      	lsls	r3, r3, #3
 800287c:	4952      	ldr	r1, [pc, #328]	; (80029c8 <HAL_RCC_OscConfig+0x2ac>)
 800287e:	4313      	orrs	r3, r2
 8002880:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002882:	e03a      	b.n	80028fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d020      	beq.n	80028ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800288c:	4b4f      	ldr	r3, [pc, #316]	; (80029cc <HAL_RCC_OscConfig+0x2b0>)
 800288e:	2201      	movs	r2, #1
 8002890:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002892:	f7fe fa9f 	bl	8000dd4 <HAL_GetTick>
 8002896:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002898:	e008      	b.n	80028ac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800289a:	f7fe fa9b 	bl	8000dd4 <HAL_GetTick>
 800289e:	4602      	mov	r2, r0
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	1ad3      	subs	r3, r2, r3
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	d901      	bls.n	80028ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80028a8:	2303      	movs	r3, #3
 80028aa:	e1a5      	b.n	8002bf8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028ac:	4b46      	ldr	r3, [pc, #280]	; (80029c8 <HAL_RCC_OscConfig+0x2ac>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 0302 	and.w	r3, r3, #2
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d0f0      	beq.n	800289a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028b8:	4b43      	ldr	r3, [pc, #268]	; (80029c8 <HAL_RCC_OscConfig+0x2ac>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	691b      	ldr	r3, [r3, #16]
 80028c4:	00db      	lsls	r3, r3, #3
 80028c6:	4940      	ldr	r1, [pc, #256]	; (80029c8 <HAL_RCC_OscConfig+0x2ac>)
 80028c8:	4313      	orrs	r3, r2
 80028ca:	600b      	str	r3, [r1, #0]
 80028cc:	e015      	b.n	80028fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028ce:	4b3f      	ldr	r3, [pc, #252]	; (80029cc <HAL_RCC_OscConfig+0x2b0>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d4:	f7fe fa7e 	bl	8000dd4 <HAL_GetTick>
 80028d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028da:	e008      	b.n	80028ee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028dc:	f7fe fa7a 	bl	8000dd4 <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	d901      	bls.n	80028ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	e184      	b.n	8002bf8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028ee:	4b36      	ldr	r3, [pc, #216]	; (80029c8 <HAL_RCC_OscConfig+0x2ac>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0302 	and.w	r3, r3, #2
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d1f0      	bne.n	80028dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0308 	and.w	r3, r3, #8
 8002902:	2b00      	cmp	r3, #0
 8002904:	d030      	beq.n	8002968 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	695b      	ldr	r3, [r3, #20]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d016      	beq.n	800293c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800290e:	4b30      	ldr	r3, [pc, #192]	; (80029d0 <HAL_RCC_OscConfig+0x2b4>)
 8002910:	2201      	movs	r2, #1
 8002912:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002914:	f7fe fa5e 	bl	8000dd4 <HAL_GetTick>
 8002918:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800291a:	e008      	b.n	800292e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800291c:	f7fe fa5a 	bl	8000dd4 <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	2b02      	cmp	r3, #2
 8002928:	d901      	bls.n	800292e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	e164      	b.n	8002bf8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800292e:	4b26      	ldr	r3, [pc, #152]	; (80029c8 <HAL_RCC_OscConfig+0x2ac>)
 8002930:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002932:	f003 0302 	and.w	r3, r3, #2
 8002936:	2b00      	cmp	r3, #0
 8002938:	d0f0      	beq.n	800291c <HAL_RCC_OscConfig+0x200>
 800293a:	e015      	b.n	8002968 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800293c:	4b24      	ldr	r3, [pc, #144]	; (80029d0 <HAL_RCC_OscConfig+0x2b4>)
 800293e:	2200      	movs	r2, #0
 8002940:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002942:	f7fe fa47 	bl	8000dd4 <HAL_GetTick>
 8002946:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002948:	e008      	b.n	800295c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800294a:	f7fe fa43 	bl	8000dd4 <HAL_GetTick>
 800294e:	4602      	mov	r2, r0
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	1ad3      	subs	r3, r2, r3
 8002954:	2b02      	cmp	r3, #2
 8002956:	d901      	bls.n	800295c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002958:	2303      	movs	r3, #3
 800295a:	e14d      	b.n	8002bf8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800295c:	4b1a      	ldr	r3, [pc, #104]	; (80029c8 <HAL_RCC_OscConfig+0x2ac>)
 800295e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002960:	f003 0302 	and.w	r3, r3, #2
 8002964:	2b00      	cmp	r3, #0
 8002966:	d1f0      	bne.n	800294a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 0304 	and.w	r3, r3, #4
 8002970:	2b00      	cmp	r3, #0
 8002972:	f000 80a0 	beq.w	8002ab6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002976:	2300      	movs	r3, #0
 8002978:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800297a:	4b13      	ldr	r3, [pc, #76]	; (80029c8 <HAL_RCC_OscConfig+0x2ac>)
 800297c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d10f      	bne.n	80029a6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002986:	2300      	movs	r3, #0
 8002988:	60bb      	str	r3, [r7, #8]
 800298a:	4b0f      	ldr	r3, [pc, #60]	; (80029c8 <HAL_RCC_OscConfig+0x2ac>)
 800298c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298e:	4a0e      	ldr	r2, [pc, #56]	; (80029c8 <HAL_RCC_OscConfig+0x2ac>)
 8002990:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002994:	6413      	str	r3, [r2, #64]	; 0x40
 8002996:	4b0c      	ldr	r3, [pc, #48]	; (80029c8 <HAL_RCC_OscConfig+0x2ac>)
 8002998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800299e:	60bb      	str	r3, [r7, #8]
 80029a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029a2:	2301      	movs	r3, #1
 80029a4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029a6:	4b0b      	ldr	r3, [pc, #44]	; (80029d4 <HAL_RCC_OscConfig+0x2b8>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d121      	bne.n	80029f6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029b2:	4b08      	ldr	r3, [pc, #32]	; (80029d4 <HAL_RCC_OscConfig+0x2b8>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a07      	ldr	r2, [pc, #28]	; (80029d4 <HAL_RCC_OscConfig+0x2b8>)
 80029b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029be:	f7fe fa09 	bl	8000dd4 <HAL_GetTick>
 80029c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029c4:	e011      	b.n	80029ea <HAL_RCC_OscConfig+0x2ce>
 80029c6:	bf00      	nop
 80029c8:	40023800 	.word	0x40023800
 80029cc:	42470000 	.word	0x42470000
 80029d0:	42470e80 	.word	0x42470e80
 80029d4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029d8:	f7fe f9fc 	bl	8000dd4 <HAL_GetTick>
 80029dc:	4602      	mov	r2, r0
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d901      	bls.n	80029ea <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80029e6:	2303      	movs	r3, #3
 80029e8:	e106      	b.n	8002bf8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029ea:	4b85      	ldr	r3, [pc, #532]	; (8002c00 <HAL_RCC_OscConfig+0x4e4>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d0f0      	beq.n	80029d8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d106      	bne.n	8002a0c <HAL_RCC_OscConfig+0x2f0>
 80029fe:	4b81      	ldr	r3, [pc, #516]	; (8002c04 <HAL_RCC_OscConfig+0x4e8>)
 8002a00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a02:	4a80      	ldr	r2, [pc, #512]	; (8002c04 <HAL_RCC_OscConfig+0x4e8>)
 8002a04:	f043 0301 	orr.w	r3, r3, #1
 8002a08:	6713      	str	r3, [r2, #112]	; 0x70
 8002a0a:	e01c      	b.n	8002a46 <HAL_RCC_OscConfig+0x32a>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	2b05      	cmp	r3, #5
 8002a12:	d10c      	bne.n	8002a2e <HAL_RCC_OscConfig+0x312>
 8002a14:	4b7b      	ldr	r3, [pc, #492]	; (8002c04 <HAL_RCC_OscConfig+0x4e8>)
 8002a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a18:	4a7a      	ldr	r2, [pc, #488]	; (8002c04 <HAL_RCC_OscConfig+0x4e8>)
 8002a1a:	f043 0304 	orr.w	r3, r3, #4
 8002a1e:	6713      	str	r3, [r2, #112]	; 0x70
 8002a20:	4b78      	ldr	r3, [pc, #480]	; (8002c04 <HAL_RCC_OscConfig+0x4e8>)
 8002a22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a24:	4a77      	ldr	r2, [pc, #476]	; (8002c04 <HAL_RCC_OscConfig+0x4e8>)
 8002a26:	f043 0301 	orr.w	r3, r3, #1
 8002a2a:	6713      	str	r3, [r2, #112]	; 0x70
 8002a2c:	e00b      	b.n	8002a46 <HAL_RCC_OscConfig+0x32a>
 8002a2e:	4b75      	ldr	r3, [pc, #468]	; (8002c04 <HAL_RCC_OscConfig+0x4e8>)
 8002a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a32:	4a74      	ldr	r2, [pc, #464]	; (8002c04 <HAL_RCC_OscConfig+0x4e8>)
 8002a34:	f023 0301 	bic.w	r3, r3, #1
 8002a38:	6713      	str	r3, [r2, #112]	; 0x70
 8002a3a:	4b72      	ldr	r3, [pc, #456]	; (8002c04 <HAL_RCC_OscConfig+0x4e8>)
 8002a3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a3e:	4a71      	ldr	r2, [pc, #452]	; (8002c04 <HAL_RCC_OscConfig+0x4e8>)
 8002a40:	f023 0304 	bic.w	r3, r3, #4
 8002a44:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d015      	beq.n	8002a7a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a4e:	f7fe f9c1 	bl	8000dd4 <HAL_GetTick>
 8002a52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a54:	e00a      	b.n	8002a6c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a56:	f7fe f9bd 	bl	8000dd4 <HAL_GetTick>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	1ad3      	subs	r3, r2, r3
 8002a60:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d901      	bls.n	8002a6c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002a68:	2303      	movs	r3, #3
 8002a6a:	e0c5      	b.n	8002bf8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a6c:	4b65      	ldr	r3, [pc, #404]	; (8002c04 <HAL_RCC_OscConfig+0x4e8>)
 8002a6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a70:	f003 0302 	and.w	r3, r3, #2
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d0ee      	beq.n	8002a56 <HAL_RCC_OscConfig+0x33a>
 8002a78:	e014      	b.n	8002aa4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a7a:	f7fe f9ab 	bl	8000dd4 <HAL_GetTick>
 8002a7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a80:	e00a      	b.n	8002a98 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a82:	f7fe f9a7 	bl	8000dd4 <HAL_GetTick>
 8002a86:	4602      	mov	r2, r0
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	1ad3      	subs	r3, r2, r3
 8002a8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d901      	bls.n	8002a98 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002a94:	2303      	movs	r3, #3
 8002a96:	e0af      	b.n	8002bf8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a98:	4b5a      	ldr	r3, [pc, #360]	; (8002c04 <HAL_RCC_OscConfig+0x4e8>)
 8002a9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a9c:	f003 0302 	and.w	r3, r3, #2
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d1ee      	bne.n	8002a82 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002aa4:	7dfb      	ldrb	r3, [r7, #23]
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d105      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002aaa:	4b56      	ldr	r3, [pc, #344]	; (8002c04 <HAL_RCC_OscConfig+0x4e8>)
 8002aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aae:	4a55      	ldr	r2, [pc, #340]	; (8002c04 <HAL_RCC_OscConfig+0x4e8>)
 8002ab0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ab4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	699b      	ldr	r3, [r3, #24]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	f000 809b 	beq.w	8002bf6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ac0:	4b50      	ldr	r3, [pc, #320]	; (8002c04 <HAL_RCC_OscConfig+0x4e8>)
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	f003 030c 	and.w	r3, r3, #12
 8002ac8:	2b08      	cmp	r3, #8
 8002aca:	d05c      	beq.n	8002b86 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	699b      	ldr	r3, [r3, #24]
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d141      	bne.n	8002b58 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ad4:	4b4c      	ldr	r3, [pc, #304]	; (8002c08 <HAL_RCC_OscConfig+0x4ec>)
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ada:	f7fe f97b 	bl	8000dd4 <HAL_GetTick>
 8002ade:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ae0:	e008      	b.n	8002af4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ae2:	f7fe f977 	bl	8000dd4 <HAL_GetTick>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	1ad3      	subs	r3, r2, r3
 8002aec:	2b02      	cmp	r3, #2
 8002aee:	d901      	bls.n	8002af4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002af0:	2303      	movs	r3, #3
 8002af2:	e081      	b.n	8002bf8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002af4:	4b43      	ldr	r3, [pc, #268]	; (8002c04 <HAL_RCC_OscConfig+0x4e8>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d1f0      	bne.n	8002ae2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	69da      	ldr	r2, [r3, #28]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6a1b      	ldr	r3, [r3, #32]
 8002b08:	431a      	orrs	r2, r3
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0e:	019b      	lsls	r3, r3, #6
 8002b10:	431a      	orrs	r2, r3
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b16:	085b      	lsrs	r3, r3, #1
 8002b18:	3b01      	subs	r3, #1
 8002b1a:	041b      	lsls	r3, r3, #16
 8002b1c:	431a      	orrs	r2, r3
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b22:	061b      	lsls	r3, r3, #24
 8002b24:	4937      	ldr	r1, [pc, #220]	; (8002c04 <HAL_RCC_OscConfig+0x4e8>)
 8002b26:	4313      	orrs	r3, r2
 8002b28:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b2a:	4b37      	ldr	r3, [pc, #220]	; (8002c08 <HAL_RCC_OscConfig+0x4ec>)
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b30:	f7fe f950 	bl	8000dd4 <HAL_GetTick>
 8002b34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b36:	e008      	b.n	8002b4a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b38:	f7fe f94c 	bl	8000dd4 <HAL_GetTick>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	2b02      	cmp	r3, #2
 8002b44:	d901      	bls.n	8002b4a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e056      	b.n	8002bf8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b4a:	4b2e      	ldr	r3, [pc, #184]	; (8002c04 <HAL_RCC_OscConfig+0x4e8>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d0f0      	beq.n	8002b38 <HAL_RCC_OscConfig+0x41c>
 8002b56:	e04e      	b.n	8002bf6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b58:	4b2b      	ldr	r3, [pc, #172]	; (8002c08 <HAL_RCC_OscConfig+0x4ec>)
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b5e:	f7fe f939 	bl	8000dd4 <HAL_GetTick>
 8002b62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b64:	e008      	b.n	8002b78 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b66:	f7fe f935 	bl	8000dd4 <HAL_GetTick>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	1ad3      	subs	r3, r2, r3
 8002b70:	2b02      	cmp	r3, #2
 8002b72:	d901      	bls.n	8002b78 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002b74:	2303      	movs	r3, #3
 8002b76:	e03f      	b.n	8002bf8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b78:	4b22      	ldr	r3, [pc, #136]	; (8002c04 <HAL_RCC_OscConfig+0x4e8>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d1f0      	bne.n	8002b66 <HAL_RCC_OscConfig+0x44a>
 8002b84:	e037      	b.n	8002bf6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	699b      	ldr	r3, [r3, #24]
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d101      	bne.n	8002b92 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e032      	b.n	8002bf8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b92:	4b1c      	ldr	r3, [pc, #112]	; (8002c04 <HAL_RCC_OscConfig+0x4e8>)
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	699b      	ldr	r3, [r3, #24]
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d028      	beq.n	8002bf2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d121      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d11a      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bbc:	68fa      	ldr	r2, [r7, #12]
 8002bbe:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002bc8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d111      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bd8:	085b      	lsrs	r3, r3, #1
 8002bda:	3b01      	subs	r3, #1
 8002bdc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d107      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bec:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d001      	beq.n	8002bf6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e000      	b.n	8002bf8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002bf6:	2300      	movs	r3, #0
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3718      	adds	r7, #24
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	40007000 	.word	0x40007000
 8002c04:	40023800 	.word	0x40023800
 8002c08:	42470060 	.word	0x42470060

08002c0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b084      	sub	sp, #16
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d101      	bne.n	8002c20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e0cc      	b.n	8002dba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c20:	4b68      	ldr	r3, [pc, #416]	; (8002dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 0307 	and.w	r3, r3, #7
 8002c28:	683a      	ldr	r2, [r7, #0]
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d90c      	bls.n	8002c48 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c2e:	4b65      	ldr	r3, [pc, #404]	; (8002dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c30:	683a      	ldr	r2, [r7, #0]
 8002c32:	b2d2      	uxtb	r2, r2
 8002c34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c36:	4b63      	ldr	r3, [pc, #396]	; (8002dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 0307 	and.w	r3, r3, #7
 8002c3e:	683a      	ldr	r2, [r7, #0]
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d001      	beq.n	8002c48 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e0b8      	b.n	8002dba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 0302 	and.w	r3, r3, #2
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d020      	beq.n	8002c96 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 0304 	and.w	r3, r3, #4
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d005      	beq.n	8002c6c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c60:	4b59      	ldr	r3, [pc, #356]	; (8002dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	4a58      	ldr	r2, [pc, #352]	; (8002dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c66:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c6a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0308 	and.w	r3, r3, #8
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d005      	beq.n	8002c84 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c78:	4b53      	ldr	r3, [pc, #332]	; (8002dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	4a52      	ldr	r2, [pc, #328]	; (8002dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c7e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c82:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c84:	4b50      	ldr	r3, [pc, #320]	; (8002dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	494d      	ldr	r1, [pc, #308]	; (8002dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c92:	4313      	orrs	r3, r2
 8002c94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0301 	and.w	r3, r3, #1
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d044      	beq.n	8002d2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d107      	bne.n	8002cba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002caa:	4b47      	ldr	r3, [pc, #284]	; (8002dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d119      	bne.n	8002cea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e07f      	b.n	8002dba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	2b02      	cmp	r3, #2
 8002cc0:	d003      	beq.n	8002cca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cc6:	2b03      	cmp	r3, #3
 8002cc8:	d107      	bne.n	8002cda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cca:	4b3f      	ldr	r3, [pc, #252]	; (8002dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d109      	bne.n	8002cea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e06f      	b.n	8002dba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cda:	4b3b      	ldr	r3, [pc, #236]	; (8002dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0302 	and.w	r3, r3, #2
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d101      	bne.n	8002cea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e067      	b.n	8002dba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cea:	4b37      	ldr	r3, [pc, #220]	; (8002dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	f023 0203 	bic.w	r2, r3, #3
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	4934      	ldr	r1, [pc, #208]	; (8002dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cfc:	f7fe f86a 	bl	8000dd4 <HAL_GetTick>
 8002d00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d02:	e00a      	b.n	8002d1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d04:	f7fe f866 	bl	8000dd4 <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d901      	bls.n	8002d1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	e04f      	b.n	8002dba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d1a:	4b2b      	ldr	r3, [pc, #172]	; (8002dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	f003 020c 	and.w	r2, r3, #12
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d1eb      	bne.n	8002d04 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d2c:	4b25      	ldr	r3, [pc, #148]	; (8002dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0307 	and.w	r3, r3, #7
 8002d34:	683a      	ldr	r2, [r7, #0]
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d20c      	bcs.n	8002d54 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d3a:	4b22      	ldr	r3, [pc, #136]	; (8002dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002d3c:	683a      	ldr	r2, [r7, #0]
 8002d3e:	b2d2      	uxtb	r2, r2
 8002d40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d42:	4b20      	ldr	r3, [pc, #128]	; (8002dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0307 	and.w	r3, r3, #7
 8002d4a:	683a      	ldr	r2, [r7, #0]
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d001      	beq.n	8002d54 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e032      	b.n	8002dba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 0304 	and.w	r3, r3, #4
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d008      	beq.n	8002d72 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d60:	4b19      	ldr	r3, [pc, #100]	; (8002dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	4916      	ldr	r1, [pc, #88]	; (8002dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0308 	and.w	r3, r3, #8
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d009      	beq.n	8002d92 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d7e:	4b12      	ldr	r3, [pc, #72]	; (8002dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	691b      	ldr	r3, [r3, #16]
 8002d8a:	00db      	lsls	r3, r3, #3
 8002d8c:	490e      	ldr	r1, [pc, #56]	; (8002dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d92:	f000 f821 	bl	8002dd8 <HAL_RCC_GetSysClockFreq>
 8002d96:	4602      	mov	r2, r0
 8002d98:	4b0b      	ldr	r3, [pc, #44]	; (8002dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	091b      	lsrs	r3, r3, #4
 8002d9e:	f003 030f 	and.w	r3, r3, #15
 8002da2:	490a      	ldr	r1, [pc, #40]	; (8002dcc <HAL_RCC_ClockConfig+0x1c0>)
 8002da4:	5ccb      	ldrb	r3, [r1, r3]
 8002da6:	fa22 f303 	lsr.w	r3, r2, r3
 8002daa:	4a09      	ldr	r2, [pc, #36]	; (8002dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8002dac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002dae:	4b09      	ldr	r3, [pc, #36]	; (8002dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4618      	mov	r0, r3
 8002db4:	f7fd ffca 	bl	8000d4c <HAL_InitTick>

  return HAL_OK;
 8002db8:	2300      	movs	r3, #0
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3710      	adds	r7, #16
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	40023c00 	.word	0x40023c00
 8002dc8:	40023800 	.word	0x40023800
 8002dcc:	08010f8c 	.word	0x08010f8c
 8002dd0:	20000000 	.word	0x20000000
 8002dd4:	20000004 	.word	0x20000004

08002dd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002dd8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002ddc:	b084      	sub	sp, #16
 8002dde:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002de0:	2300      	movs	r3, #0
 8002de2:	607b      	str	r3, [r7, #4]
 8002de4:	2300      	movs	r3, #0
 8002de6:	60fb      	str	r3, [r7, #12]
 8002de8:	2300      	movs	r3, #0
 8002dea:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002dec:	2300      	movs	r3, #0
 8002dee:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002df0:	4b67      	ldr	r3, [pc, #412]	; (8002f90 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	f003 030c 	and.w	r3, r3, #12
 8002df8:	2b08      	cmp	r3, #8
 8002dfa:	d00d      	beq.n	8002e18 <HAL_RCC_GetSysClockFreq+0x40>
 8002dfc:	2b08      	cmp	r3, #8
 8002dfe:	f200 80bd 	bhi.w	8002f7c <HAL_RCC_GetSysClockFreq+0x1a4>
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d002      	beq.n	8002e0c <HAL_RCC_GetSysClockFreq+0x34>
 8002e06:	2b04      	cmp	r3, #4
 8002e08:	d003      	beq.n	8002e12 <HAL_RCC_GetSysClockFreq+0x3a>
 8002e0a:	e0b7      	b.n	8002f7c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e0c:	4b61      	ldr	r3, [pc, #388]	; (8002f94 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002e0e:	60bb      	str	r3, [r7, #8]
       break;
 8002e10:	e0b7      	b.n	8002f82 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e12:	4b61      	ldr	r3, [pc, #388]	; (8002f98 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002e14:	60bb      	str	r3, [r7, #8]
      break;
 8002e16:	e0b4      	b.n	8002f82 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e18:	4b5d      	ldr	r3, [pc, #372]	; (8002f90 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e20:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e22:	4b5b      	ldr	r3, [pc, #364]	; (8002f90 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d04d      	beq.n	8002eca <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e2e:	4b58      	ldr	r3, [pc, #352]	; (8002f90 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	099b      	lsrs	r3, r3, #6
 8002e34:	461a      	mov	r2, r3
 8002e36:	f04f 0300 	mov.w	r3, #0
 8002e3a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002e3e:	f04f 0100 	mov.w	r1, #0
 8002e42:	ea02 0800 	and.w	r8, r2, r0
 8002e46:	ea03 0901 	and.w	r9, r3, r1
 8002e4a:	4640      	mov	r0, r8
 8002e4c:	4649      	mov	r1, r9
 8002e4e:	f04f 0200 	mov.w	r2, #0
 8002e52:	f04f 0300 	mov.w	r3, #0
 8002e56:	014b      	lsls	r3, r1, #5
 8002e58:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002e5c:	0142      	lsls	r2, r0, #5
 8002e5e:	4610      	mov	r0, r2
 8002e60:	4619      	mov	r1, r3
 8002e62:	ebb0 0008 	subs.w	r0, r0, r8
 8002e66:	eb61 0109 	sbc.w	r1, r1, r9
 8002e6a:	f04f 0200 	mov.w	r2, #0
 8002e6e:	f04f 0300 	mov.w	r3, #0
 8002e72:	018b      	lsls	r3, r1, #6
 8002e74:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002e78:	0182      	lsls	r2, r0, #6
 8002e7a:	1a12      	subs	r2, r2, r0
 8002e7c:	eb63 0301 	sbc.w	r3, r3, r1
 8002e80:	f04f 0000 	mov.w	r0, #0
 8002e84:	f04f 0100 	mov.w	r1, #0
 8002e88:	00d9      	lsls	r1, r3, #3
 8002e8a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002e8e:	00d0      	lsls	r0, r2, #3
 8002e90:	4602      	mov	r2, r0
 8002e92:	460b      	mov	r3, r1
 8002e94:	eb12 0208 	adds.w	r2, r2, r8
 8002e98:	eb43 0309 	adc.w	r3, r3, r9
 8002e9c:	f04f 0000 	mov.w	r0, #0
 8002ea0:	f04f 0100 	mov.w	r1, #0
 8002ea4:	0259      	lsls	r1, r3, #9
 8002ea6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002eaa:	0250      	lsls	r0, r2, #9
 8002eac:	4602      	mov	r2, r0
 8002eae:	460b      	mov	r3, r1
 8002eb0:	4610      	mov	r0, r2
 8002eb2:	4619      	mov	r1, r3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	f04f 0300 	mov.w	r3, #0
 8002ebc:	f7fd f9e8 	bl	8000290 <__aeabi_uldivmod>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	460b      	mov	r3, r1
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	60fb      	str	r3, [r7, #12]
 8002ec8:	e04a      	b.n	8002f60 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002eca:	4b31      	ldr	r3, [pc, #196]	; (8002f90 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	099b      	lsrs	r3, r3, #6
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	f04f 0300 	mov.w	r3, #0
 8002ed6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002eda:	f04f 0100 	mov.w	r1, #0
 8002ede:	ea02 0400 	and.w	r4, r2, r0
 8002ee2:	ea03 0501 	and.w	r5, r3, r1
 8002ee6:	4620      	mov	r0, r4
 8002ee8:	4629      	mov	r1, r5
 8002eea:	f04f 0200 	mov.w	r2, #0
 8002eee:	f04f 0300 	mov.w	r3, #0
 8002ef2:	014b      	lsls	r3, r1, #5
 8002ef4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002ef8:	0142      	lsls	r2, r0, #5
 8002efa:	4610      	mov	r0, r2
 8002efc:	4619      	mov	r1, r3
 8002efe:	1b00      	subs	r0, r0, r4
 8002f00:	eb61 0105 	sbc.w	r1, r1, r5
 8002f04:	f04f 0200 	mov.w	r2, #0
 8002f08:	f04f 0300 	mov.w	r3, #0
 8002f0c:	018b      	lsls	r3, r1, #6
 8002f0e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002f12:	0182      	lsls	r2, r0, #6
 8002f14:	1a12      	subs	r2, r2, r0
 8002f16:	eb63 0301 	sbc.w	r3, r3, r1
 8002f1a:	f04f 0000 	mov.w	r0, #0
 8002f1e:	f04f 0100 	mov.w	r1, #0
 8002f22:	00d9      	lsls	r1, r3, #3
 8002f24:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002f28:	00d0      	lsls	r0, r2, #3
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	460b      	mov	r3, r1
 8002f2e:	1912      	adds	r2, r2, r4
 8002f30:	eb45 0303 	adc.w	r3, r5, r3
 8002f34:	f04f 0000 	mov.w	r0, #0
 8002f38:	f04f 0100 	mov.w	r1, #0
 8002f3c:	0299      	lsls	r1, r3, #10
 8002f3e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002f42:	0290      	lsls	r0, r2, #10
 8002f44:	4602      	mov	r2, r0
 8002f46:	460b      	mov	r3, r1
 8002f48:	4610      	mov	r0, r2
 8002f4a:	4619      	mov	r1, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	461a      	mov	r2, r3
 8002f50:	f04f 0300 	mov.w	r3, #0
 8002f54:	f7fd f99c 	bl	8000290 <__aeabi_uldivmod>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	460b      	mov	r3, r1
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002f60:	4b0b      	ldr	r3, [pc, #44]	; (8002f90 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	0c1b      	lsrs	r3, r3, #16
 8002f66:	f003 0303 	and.w	r3, r3, #3
 8002f6a:	3301      	adds	r3, #1
 8002f6c:	005b      	lsls	r3, r3, #1
 8002f6e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002f70:	68fa      	ldr	r2, [r7, #12]
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f78:	60bb      	str	r3, [r7, #8]
      break;
 8002f7a:	e002      	b.n	8002f82 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f7c:	4b05      	ldr	r3, [pc, #20]	; (8002f94 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002f7e:	60bb      	str	r3, [r7, #8]
      break;
 8002f80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f82:	68bb      	ldr	r3, [r7, #8]
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	3710      	adds	r7, #16
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002f8e:	bf00      	nop
 8002f90:	40023800 	.word	0x40023800
 8002f94:	00f42400 	.word	0x00f42400
 8002f98:	007a1200 	.word	0x007a1200

08002f9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fa0:	4b03      	ldr	r3, [pc, #12]	; (8002fb0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr
 8002fae:	bf00      	nop
 8002fb0:	20000000 	.word	0x20000000

08002fb4 <LWIP_Init>:

/**
  * LwIP initialization function
  */
void LWIP_Init(void)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b084      	sub	sp, #16
 8002fb8:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 172;
 8002fba:	4b8d      	ldr	r3, [pc, #564]	; (80031f0 <LWIP_Init+0x23c>)
 8002fbc:	22ac      	movs	r2, #172	; 0xac
 8002fbe:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 25;
 8002fc0:	4b8b      	ldr	r3, [pc, #556]	; (80031f0 <LWIP_Init+0x23c>)
 8002fc2:	2219      	movs	r2, #25
 8002fc4:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 144;
 8002fc6:	4b8a      	ldr	r3, [pc, #552]	; (80031f0 <LWIP_Init+0x23c>)
 8002fc8:	2290      	movs	r2, #144	; 0x90
 8002fca:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 126;
 8002fcc:	4b88      	ldr	r3, [pc, #544]	; (80031f0 <LWIP_Init+0x23c>)
 8002fce:	227e      	movs	r2, #126	; 0x7e
 8002fd0:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8002fd2:	4b88      	ldr	r3, [pc, #544]	; (80031f4 <LWIP_Init+0x240>)
 8002fd4:	22ff      	movs	r2, #255	; 0xff
 8002fd6:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8002fd8:	4b86      	ldr	r3, [pc, #536]	; (80031f4 <LWIP_Init+0x240>)
 8002fda:	22ff      	movs	r2, #255	; 0xff
 8002fdc:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 252;
 8002fde:	4b85      	ldr	r3, [pc, #532]	; (80031f4 <LWIP_Init+0x240>)
 8002fe0:	22fc      	movs	r2, #252	; 0xfc
 8002fe2:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8002fe4:	4b83      	ldr	r3, [pc, #524]	; (80031f4 <LWIP_Init+0x240>)
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 172;
 8002fea:	4b83      	ldr	r3, [pc, #524]	; (80031f8 <LWIP_Init+0x244>)
 8002fec:	22ac      	movs	r2, #172	; 0xac
 8002fee:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 25;
 8002ff0:	4b81      	ldr	r3, [pc, #516]	; (80031f8 <LWIP_Init+0x244>)
 8002ff2:	2219      	movs	r2, #25
 8002ff4:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 146;
 8002ff6:	4b80      	ldr	r3, [pc, #512]	; (80031f8 <LWIP_Init+0x244>)
 8002ff8:	2292      	movs	r2, #146	; 0x92
 8002ffa:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8002ffc:	4b7e      	ldr	r3, [pc, #504]	; (80031f8 <LWIP_Init+0x244>)
 8002ffe:	2201      	movs	r2, #1
 8003000:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8003002:	f000 fca7 	bl	8003954 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8003006:	4b7a      	ldr	r3, [pc, #488]	; (80031f0 <LWIP_Init+0x23c>)
 8003008:	781b      	ldrb	r3, [r3, #0]
 800300a:	061a      	lsls	r2, r3, #24
 800300c:	4b78      	ldr	r3, [pc, #480]	; (80031f0 <LWIP_Init+0x23c>)
 800300e:	785b      	ldrb	r3, [r3, #1]
 8003010:	041b      	lsls	r3, r3, #16
 8003012:	431a      	orrs	r2, r3
 8003014:	4b76      	ldr	r3, [pc, #472]	; (80031f0 <LWIP_Init+0x23c>)
 8003016:	789b      	ldrb	r3, [r3, #2]
 8003018:	021b      	lsls	r3, r3, #8
 800301a:	4313      	orrs	r3, r2
 800301c:	4a74      	ldr	r2, [pc, #464]	; (80031f0 <LWIP_Init+0x23c>)
 800301e:	78d2      	ldrb	r2, [r2, #3]
 8003020:	4313      	orrs	r3, r2
 8003022:	061a      	lsls	r2, r3, #24
 8003024:	4b72      	ldr	r3, [pc, #456]	; (80031f0 <LWIP_Init+0x23c>)
 8003026:	781b      	ldrb	r3, [r3, #0]
 8003028:	0619      	lsls	r1, r3, #24
 800302a:	4b71      	ldr	r3, [pc, #452]	; (80031f0 <LWIP_Init+0x23c>)
 800302c:	785b      	ldrb	r3, [r3, #1]
 800302e:	041b      	lsls	r3, r3, #16
 8003030:	4319      	orrs	r1, r3
 8003032:	4b6f      	ldr	r3, [pc, #444]	; (80031f0 <LWIP_Init+0x23c>)
 8003034:	789b      	ldrb	r3, [r3, #2]
 8003036:	021b      	lsls	r3, r3, #8
 8003038:	430b      	orrs	r3, r1
 800303a:	496d      	ldr	r1, [pc, #436]	; (80031f0 <LWIP_Init+0x23c>)
 800303c:	78c9      	ldrb	r1, [r1, #3]
 800303e:	430b      	orrs	r3, r1
 8003040:	021b      	lsls	r3, r3, #8
 8003042:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003046:	431a      	orrs	r2, r3
 8003048:	4b69      	ldr	r3, [pc, #420]	; (80031f0 <LWIP_Init+0x23c>)
 800304a:	781b      	ldrb	r3, [r3, #0]
 800304c:	0619      	lsls	r1, r3, #24
 800304e:	4b68      	ldr	r3, [pc, #416]	; (80031f0 <LWIP_Init+0x23c>)
 8003050:	785b      	ldrb	r3, [r3, #1]
 8003052:	041b      	lsls	r3, r3, #16
 8003054:	4319      	orrs	r1, r3
 8003056:	4b66      	ldr	r3, [pc, #408]	; (80031f0 <LWIP_Init+0x23c>)
 8003058:	789b      	ldrb	r3, [r3, #2]
 800305a:	021b      	lsls	r3, r3, #8
 800305c:	430b      	orrs	r3, r1
 800305e:	4964      	ldr	r1, [pc, #400]	; (80031f0 <LWIP_Init+0x23c>)
 8003060:	78c9      	ldrb	r1, [r1, #3]
 8003062:	430b      	orrs	r3, r1
 8003064:	0a1b      	lsrs	r3, r3, #8
 8003066:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800306a:	431a      	orrs	r2, r3
 800306c:	4b60      	ldr	r3, [pc, #384]	; (80031f0 <LWIP_Init+0x23c>)
 800306e:	781b      	ldrb	r3, [r3, #0]
 8003070:	0619      	lsls	r1, r3, #24
 8003072:	4b5f      	ldr	r3, [pc, #380]	; (80031f0 <LWIP_Init+0x23c>)
 8003074:	785b      	ldrb	r3, [r3, #1]
 8003076:	041b      	lsls	r3, r3, #16
 8003078:	4319      	orrs	r1, r3
 800307a:	4b5d      	ldr	r3, [pc, #372]	; (80031f0 <LWIP_Init+0x23c>)
 800307c:	789b      	ldrb	r3, [r3, #2]
 800307e:	021b      	lsls	r3, r3, #8
 8003080:	430b      	orrs	r3, r1
 8003082:	495b      	ldr	r1, [pc, #364]	; (80031f0 <LWIP_Init+0x23c>)
 8003084:	78c9      	ldrb	r1, [r1, #3]
 8003086:	430b      	orrs	r3, r1
 8003088:	0e1b      	lsrs	r3, r3, #24
 800308a:	4313      	orrs	r3, r2
 800308c:	4a5b      	ldr	r2, [pc, #364]	; (80031fc <LWIP_Init+0x248>)
 800308e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8003090:	4b58      	ldr	r3, [pc, #352]	; (80031f4 <LWIP_Init+0x240>)
 8003092:	781b      	ldrb	r3, [r3, #0]
 8003094:	061a      	lsls	r2, r3, #24
 8003096:	4b57      	ldr	r3, [pc, #348]	; (80031f4 <LWIP_Init+0x240>)
 8003098:	785b      	ldrb	r3, [r3, #1]
 800309a:	041b      	lsls	r3, r3, #16
 800309c:	431a      	orrs	r2, r3
 800309e:	4b55      	ldr	r3, [pc, #340]	; (80031f4 <LWIP_Init+0x240>)
 80030a0:	789b      	ldrb	r3, [r3, #2]
 80030a2:	021b      	lsls	r3, r3, #8
 80030a4:	4313      	orrs	r3, r2
 80030a6:	4a53      	ldr	r2, [pc, #332]	; (80031f4 <LWIP_Init+0x240>)
 80030a8:	78d2      	ldrb	r2, [r2, #3]
 80030aa:	4313      	orrs	r3, r2
 80030ac:	061a      	lsls	r2, r3, #24
 80030ae:	4b51      	ldr	r3, [pc, #324]	; (80031f4 <LWIP_Init+0x240>)
 80030b0:	781b      	ldrb	r3, [r3, #0]
 80030b2:	0619      	lsls	r1, r3, #24
 80030b4:	4b4f      	ldr	r3, [pc, #316]	; (80031f4 <LWIP_Init+0x240>)
 80030b6:	785b      	ldrb	r3, [r3, #1]
 80030b8:	041b      	lsls	r3, r3, #16
 80030ba:	4319      	orrs	r1, r3
 80030bc:	4b4d      	ldr	r3, [pc, #308]	; (80031f4 <LWIP_Init+0x240>)
 80030be:	789b      	ldrb	r3, [r3, #2]
 80030c0:	021b      	lsls	r3, r3, #8
 80030c2:	430b      	orrs	r3, r1
 80030c4:	494b      	ldr	r1, [pc, #300]	; (80031f4 <LWIP_Init+0x240>)
 80030c6:	78c9      	ldrb	r1, [r1, #3]
 80030c8:	430b      	orrs	r3, r1
 80030ca:	021b      	lsls	r3, r3, #8
 80030cc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80030d0:	431a      	orrs	r2, r3
 80030d2:	4b48      	ldr	r3, [pc, #288]	; (80031f4 <LWIP_Init+0x240>)
 80030d4:	781b      	ldrb	r3, [r3, #0]
 80030d6:	0619      	lsls	r1, r3, #24
 80030d8:	4b46      	ldr	r3, [pc, #280]	; (80031f4 <LWIP_Init+0x240>)
 80030da:	785b      	ldrb	r3, [r3, #1]
 80030dc:	041b      	lsls	r3, r3, #16
 80030de:	4319      	orrs	r1, r3
 80030e0:	4b44      	ldr	r3, [pc, #272]	; (80031f4 <LWIP_Init+0x240>)
 80030e2:	789b      	ldrb	r3, [r3, #2]
 80030e4:	021b      	lsls	r3, r3, #8
 80030e6:	430b      	orrs	r3, r1
 80030e8:	4942      	ldr	r1, [pc, #264]	; (80031f4 <LWIP_Init+0x240>)
 80030ea:	78c9      	ldrb	r1, [r1, #3]
 80030ec:	430b      	orrs	r3, r1
 80030ee:	0a1b      	lsrs	r3, r3, #8
 80030f0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80030f4:	431a      	orrs	r2, r3
 80030f6:	4b3f      	ldr	r3, [pc, #252]	; (80031f4 <LWIP_Init+0x240>)
 80030f8:	781b      	ldrb	r3, [r3, #0]
 80030fa:	0619      	lsls	r1, r3, #24
 80030fc:	4b3d      	ldr	r3, [pc, #244]	; (80031f4 <LWIP_Init+0x240>)
 80030fe:	785b      	ldrb	r3, [r3, #1]
 8003100:	041b      	lsls	r3, r3, #16
 8003102:	4319      	orrs	r1, r3
 8003104:	4b3b      	ldr	r3, [pc, #236]	; (80031f4 <LWIP_Init+0x240>)
 8003106:	789b      	ldrb	r3, [r3, #2]
 8003108:	021b      	lsls	r3, r3, #8
 800310a:	430b      	orrs	r3, r1
 800310c:	4939      	ldr	r1, [pc, #228]	; (80031f4 <LWIP_Init+0x240>)
 800310e:	78c9      	ldrb	r1, [r1, #3]
 8003110:	430b      	orrs	r3, r1
 8003112:	0e1b      	lsrs	r3, r3, #24
 8003114:	4313      	orrs	r3, r2
 8003116:	4a3a      	ldr	r2, [pc, #232]	; (8003200 <LWIP_Init+0x24c>)
 8003118:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800311a:	4b37      	ldr	r3, [pc, #220]	; (80031f8 <LWIP_Init+0x244>)
 800311c:	781b      	ldrb	r3, [r3, #0]
 800311e:	061a      	lsls	r2, r3, #24
 8003120:	4b35      	ldr	r3, [pc, #212]	; (80031f8 <LWIP_Init+0x244>)
 8003122:	785b      	ldrb	r3, [r3, #1]
 8003124:	041b      	lsls	r3, r3, #16
 8003126:	431a      	orrs	r2, r3
 8003128:	4b33      	ldr	r3, [pc, #204]	; (80031f8 <LWIP_Init+0x244>)
 800312a:	789b      	ldrb	r3, [r3, #2]
 800312c:	021b      	lsls	r3, r3, #8
 800312e:	4313      	orrs	r3, r2
 8003130:	4a31      	ldr	r2, [pc, #196]	; (80031f8 <LWIP_Init+0x244>)
 8003132:	78d2      	ldrb	r2, [r2, #3]
 8003134:	4313      	orrs	r3, r2
 8003136:	061a      	lsls	r2, r3, #24
 8003138:	4b2f      	ldr	r3, [pc, #188]	; (80031f8 <LWIP_Init+0x244>)
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	0619      	lsls	r1, r3, #24
 800313e:	4b2e      	ldr	r3, [pc, #184]	; (80031f8 <LWIP_Init+0x244>)
 8003140:	785b      	ldrb	r3, [r3, #1]
 8003142:	041b      	lsls	r3, r3, #16
 8003144:	4319      	orrs	r1, r3
 8003146:	4b2c      	ldr	r3, [pc, #176]	; (80031f8 <LWIP_Init+0x244>)
 8003148:	789b      	ldrb	r3, [r3, #2]
 800314a:	021b      	lsls	r3, r3, #8
 800314c:	430b      	orrs	r3, r1
 800314e:	492a      	ldr	r1, [pc, #168]	; (80031f8 <LWIP_Init+0x244>)
 8003150:	78c9      	ldrb	r1, [r1, #3]
 8003152:	430b      	orrs	r3, r1
 8003154:	021b      	lsls	r3, r3, #8
 8003156:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800315a:	431a      	orrs	r2, r3
 800315c:	4b26      	ldr	r3, [pc, #152]	; (80031f8 <LWIP_Init+0x244>)
 800315e:	781b      	ldrb	r3, [r3, #0]
 8003160:	0619      	lsls	r1, r3, #24
 8003162:	4b25      	ldr	r3, [pc, #148]	; (80031f8 <LWIP_Init+0x244>)
 8003164:	785b      	ldrb	r3, [r3, #1]
 8003166:	041b      	lsls	r3, r3, #16
 8003168:	4319      	orrs	r1, r3
 800316a:	4b23      	ldr	r3, [pc, #140]	; (80031f8 <LWIP_Init+0x244>)
 800316c:	789b      	ldrb	r3, [r3, #2]
 800316e:	021b      	lsls	r3, r3, #8
 8003170:	430b      	orrs	r3, r1
 8003172:	4921      	ldr	r1, [pc, #132]	; (80031f8 <LWIP_Init+0x244>)
 8003174:	78c9      	ldrb	r1, [r1, #3]
 8003176:	430b      	orrs	r3, r1
 8003178:	0a1b      	lsrs	r3, r3, #8
 800317a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800317e:	431a      	orrs	r2, r3
 8003180:	4b1d      	ldr	r3, [pc, #116]	; (80031f8 <LWIP_Init+0x244>)
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	0619      	lsls	r1, r3, #24
 8003186:	4b1c      	ldr	r3, [pc, #112]	; (80031f8 <LWIP_Init+0x244>)
 8003188:	785b      	ldrb	r3, [r3, #1]
 800318a:	041b      	lsls	r3, r3, #16
 800318c:	4319      	orrs	r1, r3
 800318e:	4b1a      	ldr	r3, [pc, #104]	; (80031f8 <LWIP_Init+0x244>)
 8003190:	789b      	ldrb	r3, [r3, #2]
 8003192:	021b      	lsls	r3, r3, #8
 8003194:	430b      	orrs	r3, r1
 8003196:	4918      	ldr	r1, [pc, #96]	; (80031f8 <LWIP_Init+0x244>)
 8003198:	78c9      	ldrb	r1, [r1, #3]
 800319a:	430b      	orrs	r3, r1
 800319c:	0e1b      	lsrs	r3, r3, #24
 800319e:	4313      	orrs	r3, r2
 80031a0:	4a18      	ldr	r2, [pc, #96]	; (8003204 <LWIP_Init+0x250>)
 80031a2:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 80031a4:	4b18      	ldr	r3, [pc, #96]	; (8003208 <LWIP_Init+0x254>)
 80031a6:	9302      	str	r3, [sp, #8]
 80031a8:	4b18      	ldr	r3, [pc, #96]	; (800320c <LWIP_Init+0x258>)
 80031aa:	9301      	str	r3, [sp, #4]
 80031ac:	2300      	movs	r3, #0
 80031ae:	9300      	str	r3, [sp, #0]
 80031b0:	4b14      	ldr	r3, [pc, #80]	; (8003204 <LWIP_Init+0x250>)
 80031b2:	4a13      	ldr	r2, [pc, #76]	; (8003200 <LWIP_Init+0x24c>)
 80031b4:	4911      	ldr	r1, [pc, #68]	; (80031fc <LWIP_Init+0x248>)
 80031b6:	4816      	ldr	r0, [pc, #88]	; (8003210 <LWIP_Init+0x25c>)
 80031b8:	f001 f872 	bl	80042a0 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80031bc:	4814      	ldr	r0, [pc, #80]	; (8003210 <LWIP_Init+0x25c>)
 80031be:	f001 fa21 	bl	8004604 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80031c2:	4b13      	ldr	r3, [pc, #76]	; (8003210 <LWIP_Init+0x25c>)
 80031c4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80031c8:	089b      	lsrs	r3, r3, #2
 80031ca:	f003 0301 	and.w	r3, r3, #1
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d003      	beq.n	80031dc <LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80031d4:	480e      	ldr	r0, [pc, #56]	; (8003210 <LWIP_Init+0x25c>)
 80031d6:	f001 fa25 	bl	8004624 <netif_set_up>
 80031da:	e002      	b.n	80031e2 <LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 80031dc:	480c      	ldr	r0, [pc, #48]	; (8003210 <LWIP_Init+0x25c>)
 80031de:	f001 fa8d 	bl	80046fc <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 80031e2:	490c      	ldr	r1, [pc, #48]	; (8003214 <LWIP_Init+0x260>)
 80031e4:	480a      	ldr	r0, [pc, #40]	; (8003210 <LWIP_Init+0x25c>)
 80031e6:	f001 fabb 	bl	8004760 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80031ea:	bf00      	nop
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	20000254 	.word	0x20000254
 80031f4:	20000250 	.word	0x20000250
 80031f8:	20000214 	.word	0x20000214
 80031fc:	2000024c 	.word	0x2000024c
 8003200:	20000258 	.word	0x20000258
 8003204:	2000025c 	.word	0x2000025c
 8003208:	0800cff9 	.word	0x0800cff9
 800320c:	08003781 	.word	0x08003781
 8003210:	20000218 	.word	0x20000218
 8003214:	080037ed 	.word	0x080037ed

08003218 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b08e      	sub	sp, #56	; 0x38
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003220:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003224:	2200      	movs	r2, #0
 8003226:	601a      	str	r2, [r3, #0]
 8003228:	605a      	str	r2, [r3, #4]
 800322a:	609a      	str	r2, [r3, #8]
 800322c:	60da      	str	r2, [r3, #12]
 800322e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a4a      	ldr	r2, [pc, #296]	; (8003360 <HAL_ETH_MspInit+0x148>)
 8003236:	4293      	cmp	r3, r2
 8003238:	f040 808d 	bne.w	8003356 <HAL_ETH_MspInit+0x13e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800323c:	2300      	movs	r3, #0
 800323e:	623b      	str	r3, [r7, #32]
 8003240:	4b48      	ldr	r3, [pc, #288]	; (8003364 <HAL_ETH_MspInit+0x14c>)
 8003242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003244:	4a47      	ldr	r2, [pc, #284]	; (8003364 <HAL_ETH_MspInit+0x14c>)
 8003246:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800324a:	6313      	str	r3, [r2, #48]	; 0x30
 800324c:	4b45      	ldr	r3, [pc, #276]	; (8003364 <HAL_ETH_MspInit+0x14c>)
 800324e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003250:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003254:	623b      	str	r3, [r7, #32]
 8003256:	6a3b      	ldr	r3, [r7, #32]
 8003258:	2300      	movs	r3, #0
 800325a:	61fb      	str	r3, [r7, #28]
 800325c:	4b41      	ldr	r3, [pc, #260]	; (8003364 <HAL_ETH_MspInit+0x14c>)
 800325e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003260:	4a40      	ldr	r2, [pc, #256]	; (8003364 <HAL_ETH_MspInit+0x14c>)
 8003262:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003266:	6313      	str	r3, [r2, #48]	; 0x30
 8003268:	4b3e      	ldr	r3, [pc, #248]	; (8003364 <HAL_ETH_MspInit+0x14c>)
 800326a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003270:	61fb      	str	r3, [r7, #28]
 8003272:	69fb      	ldr	r3, [r7, #28]
 8003274:	2300      	movs	r3, #0
 8003276:	61bb      	str	r3, [r7, #24]
 8003278:	4b3a      	ldr	r3, [pc, #232]	; (8003364 <HAL_ETH_MspInit+0x14c>)
 800327a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800327c:	4a39      	ldr	r2, [pc, #228]	; (8003364 <HAL_ETH_MspInit+0x14c>)
 800327e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003282:	6313      	str	r3, [r2, #48]	; 0x30
 8003284:	4b37      	ldr	r3, [pc, #220]	; (8003364 <HAL_ETH_MspInit+0x14c>)
 8003286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003288:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800328c:	61bb      	str	r3, [r7, #24]
 800328e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003290:	2300      	movs	r3, #0
 8003292:	617b      	str	r3, [r7, #20]
 8003294:	4b33      	ldr	r3, [pc, #204]	; (8003364 <HAL_ETH_MspInit+0x14c>)
 8003296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003298:	4a32      	ldr	r2, [pc, #200]	; (8003364 <HAL_ETH_MspInit+0x14c>)
 800329a:	f043 0304 	orr.w	r3, r3, #4
 800329e:	6313      	str	r3, [r2, #48]	; 0x30
 80032a0:	4b30      	ldr	r3, [pc, #192]	; (8003364 <HAL_ETH_MspInit+0x14c>)
 80032a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a4:	f003 0304 	and.w	r3, r3, #4
 80032a8:	617b      	str	r3, [r7, #20]
 80032aa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032ac:	2300      	movs	r3, #0
 80032ae:	613b      	str	r3, [r7, #16]
 80032b0:	4b2c      	ldr	r3, [pc, #176]	; (8003364 <HAL_ETH_MspInit+0x14c>)
 80032b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b4:	4a2b      	ldr	r2, [pc, #172]	; (8003364 <HAL_ETH_MspInit+0x14c>)
 80032b6:	f043 0301 	orr.w	r3, r3, #1
 80032ba:	6313      	str	r3, [r2, #48]	; 0x30
 80032bc:	4b29      	ldr	r3, [pc, #164]	; (8003364 <HAL_ETH_MspInit+0x14c>)
 80032be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c0:	f003 0301 	and.w	r3, r3, #1
 80032c4:	613b      	str	r3, [r7, #16]
 80032c6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032c8:	2300      	movs	r3, #0
 80032ca:	60fb      	str	r3, [r7, #12]
 80032cc:	4b25      	ldr	r3, [pc, #148]	; (8003364 <HAL_ETH_MspInit+0x14c>)
 80032ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d0:	4a24      	ldr	r2, [pc, #144]	; (8003364 <HAL_ETH_MspInit+0x14c>)
 80032d2:	f043 0302 	orr.w	r3, r3, #2
 80032d6:	6313      	str	r3, [r2, #48]	; 0x30
 80032d8:	4b22      	ldr	r3, [pc, #136]	; (8003364 <HAL_ETH_MspInit+0x14c>)
 80032da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032dc:	f003 0302 	and.w	r3, r3, #2
 80032e0:	60fb      	str	r3, [r7, #12]
 80032e2:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80032e4:	2332      	movs	r3, #50	; 0x32
 80032e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032e8:	2302      	movs	r3, #2
 80032ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ec:	2300      	movs	r3, #0
 80032ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032f0:	2303      	movs	r3, #3
 80032f2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80032f4:	230b      	movs	r3, #11
 80032f6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032fc:	4619      	mov	r1, r3
 80032fe:	481a      	ldr	r0, [pc, #104]	; (8003368 <HAL_ETH_MspInit+0x150>)
 8003300:	f7ff f856 	bl	80023b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8003304:	2386      	movs	r3, #134	; 0x86
 8003306:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003308:	2302      	movs	r3, #2
 800330a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800330c:	2300      	movs	r3, #0
 800330e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003310:	2303      	movs	r3, #3
 8003312:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003314:	230b      	movs	r3, #11
 8003316:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003318:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800331c:	4619      	mov	r1, r3
 800331e:	4813      	ldr	r0, [pc, #76]	; (800336c <HAL_ETH_MspInit+0x154>)
 8003320:	f7ff f846 	bl	80023b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8003324:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003328:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800332a:	2302      	movs	r3, #2
 800332c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800332e:	2300      	movs	r3, #0
 8003330:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003332:	2303      	movs	r3, #3
 8003334:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003336:	230b      	movs	r3, #11
 8003338:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800333a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800333e:	4619      	mov	r1, r3
 8003340:	480b      	ldr	r0, [pc, #44]	; (8003370 <HAL_ETH_MspInit+0x158>)
 8003342:	f7ff f835 	bl	80023b0 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 8003346:	2200      	movs	r2, #0
 8003348:	2100      	movs	r1, #0
 800334a:	203d      	movs	r0, #61	; 0x3d
 800334c:	f7fd fe4d 	bl	8000fea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8003350:	203d      	movs	r0, #61	; 0x3d
 8003352:	f7fd fe66 	bl	8001022 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8003356:	bf00      	nop
 8003358:	3738      	adds	r7, #56	; 0x38
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}
 800335e:	bf00      	nop
 8003360:	40028000 	.word	0x40028000
 8003364:	40023800 	.word	0x40023800
 8003368:	40020800 	.word	0x40020800
 800336c:	40020000 	.word	0x40020000
 8003370:	40020400 	.word	0x40020400

08003374 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b084      	sub	sp, #16
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800337c:	4b41      	ldr	r3, [pc, #260]	; (8003484 <low_level_init+0x110>)
 800337e:	4a42      	ldr	r2, [pc, #264]	; (8003488 <low_level_init+0x114>)
 8003380:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8003382:	4b40      	ldr	r3, [pc, #256]	; (8003484 <low_level_init+0x110>)
 8003384:	2201      	movs	r2, #1
 8003386:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8003388:	4b3e      	ldr	r3, [pc, #248]	; (8003484 <low_level_init+0x110>)
 800338a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800338e:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8003390:	4b3c      	ldr	r3, [pc, #240]	; (8003484 <low_level_init+0x110>)
 8003392:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003396:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8720A_PHY_ADDRESS;
 8003398:	4b3a      	ldr	r3, [pc, #232]	; (8003484 <low_level_init+0x110>)
 800339a:	2200      	movs	r2, #0
 800339c:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 800339e:	2300      	movs	r3, #0
 80033a0:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 80033a2:	2380      	movs	r3, #128	; 0x80
 80033a4:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 80033a6:	23e1      	movs	r3, #225	; 0xe1
 80033a8:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 80033aa:	2300      	movs	r3, #0
 80033ac:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 80033ae:	2300      	movs	r3, #0
 80033b0:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 80033b2:	2300      	movs	r3, #0
 80033b4:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 80033b6:	4a33      	ldr	r2, [pc, #204]	; (8003484 <low_level_init+0x110>)
 80033b8:	f107 0308 	add.w	r3, r7, #8
 80033bc:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 80033be:	4b31      	ldr	r3, [pc, #196]	; (8003484 <low_level_init+0x110>)
 80033c0:	2200      	movs	r2, #0
 80033c2:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 80033c4:	4b2f      	ldr	r3, [pc, #188]	; (8003484 <low_level_init+0x110>)
 80033c6:	2200      	movs	r2, #0
 80033c8:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80033ca:	4b2e      	ldr	r3, [pc, #184]	; (8003484 <low_level_init+0x110>)
 80033cc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80033d0:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80033d2:	482c      	ldr	r0, [pc, #176]	; (8003484 <low_level_init+0x110>)
 80033d4:	f7fd fe40 	bl	8001058 <HAL_ETH_Init>
 80033d8:	4603      	mov	r3, r0
 80033da:	73fb      	strb	r3, [r7, #15]

  if (hal_eth_init_status == HAL_OK)
 80033dc:	7bfb      	ldrb	r3, [r7, #15]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d108      	bne.n	80033f4 <low_level_init+0x80>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80033e8:	f043 0304 	orr.w	r3, r3, #4
 80033ec:	b2da      	uxtb	r2, r3
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 80033f4:	2304      	movs	r3, #4
 80033f6:	4a25      	ldr	r2, [pc, #148]	; (800348c <low_level_init+0x118>)
 80033f8:	4925      	ldr	r1, [pc, #148]	; (8003490 <low_level_init+0x11c>)
 80033fa:	4822      	ldr	r0, [pc, #136]	; (8003484 <low_level_init+0x110>)
 80033fc:	f7fd ffc8 	bl	8001390 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8003400:	2304      	movs	r3, #4
 8003402:	4a24      	ldr	r2, [pc, #144]	; (8003494 <low_level_init+0x120>)
 8003404:	4924      	ldr	r1, [pc, #144]	; (8003498 <low_level_init+0x124>)
 8003406:	481f      	ldr	r0, [pc, #124]	; (8003484 <low_level_init+0x110>)
 8003408:	f7fe f82b 	bl	8001462 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2206      	movs	r2, #6
 8003410:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8003414:	4b1b      	ldr	r3, [pc, #108]	; (8003484 <low_level_init+0x110>)
 8003416:	695b      	ldr	r3, [r3, #20]
 8003418:	781a      	ldrb	r2, [r3, #0]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8003420:	4b18      	ldr	r3, [pc, #96]	; (8003484 <low_level_init+0x110>)
 8003422:	695b      	ldr	r3, [r3, #20]
 8003424:	785a      	ldrb	r2, [r3, #1]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800342c:	4b15      	ldr	r3, [pc, #84]	; (8003484 <low_level_init+0x110>)
 800342e:	695b      	ldr	r3, [r3, #20]
 8003430:	789a      	ldrb	r2, [r3, #2]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8003438:	4b12      	ldr	r3, [pc, #72]	; (8003484 <low_level_init+0x110>)
 800343a:	695b      	ldr	r3, [r3, #20]
 800343c:	78da      	ldrb	r2, [r3, #3]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8003444:	4b0f      	ldr	r3, [pc, #60]	; (8003484 <low_level_init+0x110>)
 8003446:	695b      	ldr	r3, [r3, #20]
 8003448:	791a      	ldrb	r2, [r3, #4]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8003450:	4b0c      	ldr	r3, [pc, #48]	; (8003484 <low_level_init+0x110>)
 8003452:	695b      	ldr	r3, [r3, #20]
 8003454:	795a      	ldrb	r2, [r3, #5]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8003462:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800346a:	f043 030a 	orr.w	r3, r3, #10
 800346e:	b2da      	uxtb	r2, r3
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8003476:	4803      	ldr	r0, [pc, #12]	; (8003484 <low_level_init+0x110>)
 8003478:	f7fe fb21 	bl	8001abe <HAL_ETH_Start>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800347c:	bf00      	nop
 800347e:	3710      	adds	r7, #16
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}
 8003484:	20001b30 	.word	0x20001b30
 8003488:	40028000 	.word	0x40028000
 800348c:	20001b78 	.word	0x20001b78
 8003490:	20000260 	.word	0x20000260
 8003494:	200002e0 	.word	0x200002e0
 8003498:	20001ab0 	.word	0x20001ab0

0800349c <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b08a      	sub	sp, #40	; 0x28
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 80034a6:	4b4b      	ldr	r3, [pc, #300]	; (80035d4 <low_level_output+0x138>)
 80034a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 80034ae:	2300      	movs	r3, #0
 80034b0:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 80034b2:	2300      	movs	r3, #0
 80034b4:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 80034b6:	2300      	movs	r3, #0
 80034b8:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 80034ba:	2300      	movs	r3, #0
 80034bc:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 80034be:	4b45      	ldr	r3, [pc, #276]	; (80035d4 <low_level_output+0x138>)
 80034c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034c2:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 80034c4:	2300      	movs	r3, #0
 80034c6:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	623b      	str	r3, [r7, #32]
 80034cc:	e05a      	b.n	8003584 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80034ce:	69bb      	ldr	r3, [r7, #24]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	da03      	bge.n	80034de <low_level_output+0x42>
      {
        errval = ERR_USE;
 80034d6:	23f8      	movs	r3, #248	; 0xf8
 80034d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 80034dc:	e05c      	b.n	8003598 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 80034de:	6a3b      	ldr	r3, [r7, #32]
 80034e0:	895b      	ldrh	r3, [r3, #10]
 80034e2:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 80034e4:	2300      	movs	r3, #0
 80034e6:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80034e8:	e02f      	b.n	800354a <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 80034ea:	69fa      	ldr	r2, [r7, #28]
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	18d0      	adds	r0, r2, r3
 80034f0:	6a3b      	ldr	r3, [r7, #32]
 80034f2:	685a      	ldr	r2, [r3, #4]
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	18d1      	adds	r1, r2, r3
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 80034fe:	3304      	adds	r3, #4
 8003500:	461a      	mov	r2, r3
 8003502:	f009 fe81 	bl	800d208 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8003506:	69bb      	ldr	r3, [r7, #24]
 8003508:	68db      	ldr	r3, [r3, #12]
 800350a:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800350c:	69bb      	ldr	r3, [r7, #24]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	2b00      	cmp	r3, #0
 8003512:	da03      	bge.n	800351c <low_level_output+0x80>
        {
          errval = ERR_USE;
 8003514:	23f8      	movs	r3, #248	; 0xf8
 8003516:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 800351a:	e03d      	b.n	8003598 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 800351c:	69bb      	ldr	r3, [r7, #24]
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8003522:	693a      	ldr	r2, [r7, #16]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	4413      	add	r3, r2
 8003528:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800352c:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800352e:	68ba      	ldr	r2, [r7, #8]
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	1ad3      	subs	r3, r2, r3
 8003534:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8003538:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800353a:	697a      	ldr	r2, [r7, #20]
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8003544:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8003546:	2300      	movs	r3, #0
 8003548:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800354a:	68fa      	ldr	r2, [r7, #12]
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	4413      	add	r3, r2
 8003550:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003554:	4293      	cmp	r3, r2
 8003556:	d8c8      	bhi.n	80034ea <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8003558:	69fa      	ldr	r2, [r7, #28]
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	18d0      	adds	r0, r2, r3
 800355e:	6a3b      	ldr	r3, [r7, #32]
 8003560:	685a      	ldr	r2, [r3, #4]
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	4413      	add	r3, r2
 8003566:	68fa      	ldr	r2, [r7, #12]
 8003568:	4619      	mov	r1, r3
 800356a:	f009 fe4d 	bl	800d208 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800356e:	693a      	ldr	r2, [r7, #16]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	4413      	add	r3, r2
 8003574:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8003576:	697a      	ldr	r2, [r7, #20]
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	4413      	add	r3, r2
 800357c:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 800357e:	6a3b      	ldr	r3, [r7, #32]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	623b      	str	r3, [r7, #32]
 8003584:	6a3b      	ldr	r3, [r7, #32]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d1a1      	bne.n	80034ce <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 800358a:	6979      	ldr	r1, [r7, #20]
 800358c:	4811      	ldr	r0, [pc, #68]	; (80035d4 <low_level_output+0x138>)
 800358e:	f7fd ffd5 	bl	800153c <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8003592:	2300      	movs	r3, #0
 8003594:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8003598:	4b0e      	ldr	r3, [pc, #56]	; (80035d4 <low_level_output+0x138>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035a0:	3314      	adds	r3, #20
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 0320 	and.w	r3, r3, #32
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d00d      	beq.n	80035c8 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 80035ac:	4b09      	ldr	r3, [pc, #36]	; (80035d4 <low_level_output+0x138>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035b4:	3314      	adds	r3, #20
 80035b6:	2220      	movs	r2, #32
 80035b8:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 80035ba:	4b06      	ldr	r3, [pc, #24]	; (80035d4 <low_level_output+0x138>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035c2:	3304      	adds	r3, #4
 80035c4:	2200      	movs	r2, #0
 80035c6:	601a      	str	r2, [r3, #0]
  }
  return errval;
 80035c8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	3728      	adds	r7, #40	; 0x28
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}
 80035d4:	20001b30 	.word	0x20001b30

080035d8 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b08c      	sub	sp, #48	; 0x30
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80035e0:	2300      	movs	r3, #0
 80035e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 80035e4:	2300      	movs	r3, #0
 80035e6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 80035e8:	2300      	movs	r3, #0
 80035ea:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 80035ec:	2300      	movs	r3, #0
 80035ee:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 80035f0:	2300      	movs	r3, #0
 80035f2:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 80035f4:	2300      	movs	r3, #0
 80035f6:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 80035f8:	2300      	movs	r3, #0
 80035fa:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 80035fc:	484f      	ldr	r0, [pc, #316]	; (800373c <low_level_input+0x164>)
 80035fe:	f7fe f887 	bl	8001710 <HAL_ETH_GetReceivedFrame>
 8003602:	4603      	mov	r3, r0
 8003604:	2b00      	cmp	r3, #0
 8003606:	d001      	beq.n	800360c <low_level_input+0x34>

    return NULL;
 8003608:	2300      	movs	r3, #0
 800360a:	e092      	b.n	8003732 <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 800360c:	4b4b      	ldr	r3, [pc, #300]	; (800373c <low_level_input+0x164>)
 800360e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003610:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8003612:	4b4a      	ldr	r3, [pc, #296]	; (800373c <low_level_input+0x164>)
 8003614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003616:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8003618:	89fb      	ldrh	r3, [r7, #14]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d007      	beq.n	800362e <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800361e:	89fb      	ldrh	r3, [r7, #14]
 8003620:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8003624:	4619      	mov	r1, r3
 8003626:	2000      	movs	r0, #0
 8003628:	f001 f90a 	bl	8004840 <pbuf_alloc>
 800362c:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 800362e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003630:	2b00      	cmp	r3, #0
 8003632:	d04b      	beq.n	80036cc <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8003634:	4b41      	ldr	r3, [pc, #260]	; (800373c <low_level_input+0x164>)
 8003636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003638:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 800363a:	2300      	movs	r3, #0
 800363c:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800363e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003640:	62bb      	str	r3, [r7, #40]	; 0x28
 8003642:	e040      	b.n	80036c6 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8003644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003646:	895b      	ldrh	r3, [r3, #10]
 8003648:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 800364a:	2300      	movs	r3, #0
 800364c:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800364e:	e021      	b.n	8003694 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8003650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003652:	685a      	ldr	r2, [r3, #4]
 8003654:	69bb      	ldr	r3, [r7, #24]
 8003656:	18d0      	adds	r0, r2, r3
 8003658:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800365a:	69fb      	ldr	r3, [r7, #28]
 800365c:	18d1      	adds	r1, r2, r3
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8003664:	3304      	adds	r3, #4
 8003666:	461a      	mov	r2, r3
 8003668:	f009 fdce 	bl	800d208 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800366c:	6a3b      	ldr	r3, [r7, #32]
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8003672:	6a3b      	ldr	r3, [r7, #32]
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8003678:	69fa      	ldr	r2, [r7, #28]
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	4413      	add	r3, r2
 800367e:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8003682:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8003684:	69ba      	ldr	r2, [r7, #24]
 8003686:	69fb      	ldr	r3, [r7, #28]
 8003688:	1ad3      	subs	r3, r2, r3
 800368a:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800368e:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8003690:	2300      	movs	r3, #0
 8003692:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8003694:	697a      	ldr	r2, [r7, #20]
 8003696:	69fb      	ldr	r3, [r7, #28]
 8003698:	4413      	add	r3, r2
 800369a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800369e:	4293      	cmp	r3, r2
 80036a0:	d8d6      	bhi.n	8003650 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 80036a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036a4:	685a      	ldr	r2, [r3, #4]
 80036a6:	69bb      	ldr	r3, [r7, #24]
 80036a8:	18d0      	adds	r0, r2, r3
 80036aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036ac:	69fb      	ldr	r3, [r7, #28]
 80036ae:	4413      	add	r3, r2
 80036b0:	697a      	ldr	r2, [r7, #20]
 80036b2:	4619      	mov	r1, r3
 80036b4:	f009 fda8 	bl	800d208 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80036b8:	69fa      	ldr	r2, [r7, #28]
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	4413      	add	r3, r2
 80036be:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80036c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80036c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d1bb      	bne.n	8003644 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80036cc:	4b1b      	ldr	r3, [pc, #108]	; (800373c <low_level_input+0x164>)
 80036ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d0:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80036d2:	2300      	movs	r3, #0
 80036d4:	613b      	str	r3, [r7, #16]
 80036d6:	e00b      	b.n	80036f0 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 80036d8:	6a3b      	ldr	r3, [r7, #32]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80036e0:	6a3b      	ldr	r3, [r7, #32]
 80036e2:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80036e4:	6a3b      	ldr	r3, [r7, #32]
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	3301      	adds	r3, #1
 80036ee:	613b      	str	r3, [r7, #16]
 80036f0:	4b12      	ldr	r3, [pc, #72]	; (800373c <low_level_input+0x164>)
 80036f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036f4:	693a      	ldr	r2, [r7, #16]
 80036f6:	429a      	cmp	r2, r3
 80036f8:	d3ee      	bcc.n	80036d8 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 80036fa:	4b10      	ldr	r3, [pc, #64]	; (800373c <low_level_input+0x164>)
 80036fc:	2200      	movs	r2, #0
 80036fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8003700:	4b0e      	ldr	r3, [pc, #56]	; (800373c <low_level_input+0x164>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003708:	3314      	adds	r3, #20
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003710:	2b00      	cmp	r3, #0
 8003712:	d00d      	beq.n	8003730 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8003714:	4b09      	ldr	r3, [pc, #36]	; (800373c <low_level_input+0x164>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800371c:	3314      	adds	r3, #20
 800371e:	2280      	movs	r2, #128	; 0x80
 8003720:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8003722:	4b06      	ldr	r3, [pc, #24]	; (800373c <low_level_input+0x164>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800372a:	3308      	adds	r3, #8
 800372c:	2200      	movs	r2, #0
 800372e:	601a      	str	r2, [r3, #0]
  }
  return p;
 8003730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003732:	4618      	mov	r0, r3
 8003734:	3730      	adds	r7, #48	; 0x30
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
 800373a:	bf00      	nop
 800373c:	20001b30 	.word	0x20001b30

08003740 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b084      	sub	sp, #16
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	f7ff ff45 	bl	80035d8 <low_level_input>
 800374e:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d010      	beq.n	8003778 <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	691b      	ldr	r3, [r3, #16]
 800375a:	6879      	ldr	r1, [r7, #4]
 800375c:	68f8      	ldr	r0, [r7, #12]
 800375e:	4798      	blx	r3
 8003760:	4603      	mov	r3, r0
 8003762:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 8003764:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d006      	beq.n	800377a <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 800376c:	68f8      	ldr	r0, [r7, #12]
 800376e:	f001 fb49 	bl	8004e04 <pbuf_free>
    p = NULL;
 8003772:	2300      	movs	r3, #0
 8003774:	60fb      	str	r3, [r7, #12]
 8003776:	e000      	b.n	800377a <ethernetif_input+0x3a>
  if (p == NULL) return;
 8003778:	bf00      	nop
  }
}
 800377a:	3710      	adds	r7, #16
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}

08003780 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b082      	sub	sp, #8
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d106      	bne.n	800379c <ethernetif_init+0x1c>
 800378e:	4b0e      	ldr	r3, [pc, #56]	; (80037c8 <ethernetif_init+0x48>)
 8003790:	f240 2203 	movw	r2, #515	; 0x203
 8003794:	490d      	ldr	r1, [pc, #52]	; (80037cc <ethernetif_init+0x4c>)
 8003796:	480e      	ldr	r0, [pc, #56]	; (80037d0 <ethernetif_init+0x50>)
 8003798:	f009 fd66 	bl	800d268 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2273      	movs	r2, #115	; 0x73
 80037a0:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2274      	movs	r2, #116	; 0x74
 80037a8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	4a09      	ldr	r2, [pc, #36]	; (80037d4 <ethernetif_init+0x54>)
 80037b0:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	4a08      	ldr	r2, [pc, #32]	; (80037d8 <ethernetif_init+0x58>)
 80037b6:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	f7ff fddb 	bl	8003374 <low_level_init>

  return ERR_OK;
 80037be:	2300      	movs	r3, #0
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3708      	adds	r7, #8
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}
 80037c8:	0800e66c 	.word	0x0800e66c
 80037cc:	0800e688 	.word	0x0800e688
 80037d0:	0800e698 	.word	0x0800e698
 80037d4:	0800b4bd 	.word	0x0800b4bd
 80037d8:	0800349d 	.word	0x0800349d

080037dc <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80037e0:	f7fd faf8 	bl	8000dd4 <HAL_GetTick>
 80037e4:	4603      	mov	r3, r0
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	bd80      	pop	{r7, pc}
	...

080037ec <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b084      	sub	sp, #16
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 80037f4:	2300      	movs	r3, #0
 80037f6:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 80037f8:	2300      	movs	r3, #0
 80037fa:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003802:	089b      	lsrs	r3, r3, #2
 8003804:	f003 0301 	and.w	r3, r3, #1
 8003808:	b2db      	uxtb	r3, r3
 800380a:	2b00      	cmp	r3, #0
 800380c:	d05d      	beq.n	80038ca <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800380e:	4b34      	ldr	r3, [pc, #208]	; (80038e0 <ethernetif_update_config+0xf4>)
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d03f      	beq.n	8003896 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8003816:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800381a:	2100      	movs	r1, #0
 800381c:	4830      	ldr	r0, [pc, #192]	; (80038e0 <ethernetif_update_config+0xf4>)
 800381e:	f7fe f8e8 	bl	80019f2 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 8003822:	f7fd fad7 	bl	8000dd4 <HAL_GetTick>
 8003826:	4603      	mov	r3, r0
 8003828:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800382a:	f107 0308 	add.w	r3, r7, #8
 800382e:	461a      	mov	r2, r3
 8003830:	2101      	movs	r1, #1
 8003832:	482b      	ldr	r0, [pc, #172]	; (80038e0 <ethernetif_update_config+0xf4>)
 8003834:	f7fe f875 	bl	8001922 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8003838:	f7fd facc 	bl	8000dd4 <HAL_GetTick>
 800383c:	4602      	mov	r2, r0
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003846:	d828      	bhi.n	800389a <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	f003 0320 	and.w	r3, r3, #32
 800384e:	2b00      	cmp	r3, #0
 8003850:	d0eb      	beq.n	800382a <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8003852:	f107 0308 	add.w	r3, r7, #8
 8003856:	461a      	mov	r2, r3
 8003858:	211f      	movs	r1, #31
 800385a:	4821      	ldr	r0, [pc, #132]	; (80038e0 <ethernetif_update_config+0xf4>)
 800385c:	f7fe f861 	bl	8001922 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	f003 0310 	and.w	r3, r3, #16
 8003866:	2b00      	cmp	r3, #0
 8003868:	d004      	beq.n	8003874 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800386a:	4b1d      	ldr	r3, [pc, #116]	; (80038e0 <ethernetif_update_config+0xf4>)
 800386c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003870:	60da      	str	r2, [r3, #12]
 8003872:	e002      	b.n	800387a <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8003874:	4b1a      	ldr	r3, [pc, #104]	; (80038e0 <ethernetif_update_config+0xf4>)
 8003876:	2200      	movs	r2, #0
 8003878:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	f003 0304 	and.w	r3, r3, #4
 8003880:	2b00      	cmp	r3, #0
 8003882:	d003      	beq.n	800388c <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8003884:	4b16      	ldr	r3, [pc, #88]	; (80038e0 <ethernetif_update_config+0xf4>)
 8003886:	2200      	movs	r2, #0
 8003888:	609a      	str	r2, [r3, #8]
 800388a:	e016      	b.n	80038ba <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 800388c:	4b14      	ldr	r3, [pc, #80]	; (80038e0 <ethernetif_update_config+0xf4>)
 800388e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003892:	609a      	str	r2, [r3, #8]
 8003894:	e011      	b.n	80038ba <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8003896:	bf00      	nop
 8003898:	e000      	b.n	800389c <ethernetif_update_config+0xb0>
          goto error;
 800389a:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800389c:	4b10      	ldr	r3, [pc, #64]	; (80038e0 <ethernetif_update_config+0xf4>)
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	08db      	lsrs	r3, r3, #3
 80038a2:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 80038a4:	4b0e      	ldr	r3, [pc, #56]	; (80038e0 <ethernetif_update_config+0xf4>)
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	085b      	lsrs	r3, r3, #1
 80038aa:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 80038ac:	4313      	orrs	r3, r2
 80038ae:	b29b      	uxth	r3, r3
 80038b0:	461a      	mov	r2, r3
 80038b2:	2100      	movs	r1, #0
 80038b4:	480a      	ldr	r0, [pc, #40]	; (80038e0 <ethernetif_update_config+0xf4>)
 80038b6:	f7fe f89c 	bl	80019f2 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 80038ba:	2100      	movs	r1, #0
 80038bc:	4808      	ldr	r0, [pc, #32]	; (80038e0 <ethernetif_update_config+0xf4>)
 80038be:	f7fe f95d 	bl	8001b7c <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 80038c2:	4807      	ldr	r0, [pc, #28]	; (80038e0 <ethernetif_update_config+0xf4>)
 80038c4:	f7fe f8fb 	bl	8001abe <HAL_ETH_Start>
 80038c8:	e002      	b.n	80038d0 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 80038ca:	4805      	ldr	r0, [pc, #20]	; (80038e0 <ethernetif_update_config+0xf4>)
 80038cc:	f7fe f926 	bl	8001b1c <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	f000 f807 	bl	80038e4 <ethernetif_notify_conn_changed>
}
 80038d6:	bf00      	nop
 80038d8:	3710      	adds	r7, #16
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	20001b30 	.word	0x20001b30

080038e4 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b083      	sub	sp, #12
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 80038ec:	bf00      	nop
 80038ee:	370c      	adds	r7, #12
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr

080038f8 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b083      	sub	sp, #12
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	4603      	mov	r3, r0
 8003900:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8003902:	88fb      	ldrh	r3, [r7, #6]
 8003904:	021b      	lsls	r3, r3, #8
 8003906:	b21a      	sxth	r2, r3
 8003908:	88fb      	ldrh	r3, [r7, #6]
 800390a:	0a1b      	lsrs	r3, r3, #8
 800390c:	b29b      	uxth	r3, r3
 800390e:	b21b      	sxth	r3, r3
 8003910:	4313      	orrs	r3, r2
 8003912:	b21b      	sxth	r3, r3
 8003914:	b29b      	uxth	r3, r3
}
 8003916:	4618      	mov	r0, r3
 8003918:	370c      	adds	r7, #12
 800391a:	46bd      	mov	sp, r7
 800391c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003920:	4770      	bx	lr

08003922 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8003922:	b480      	push	{r7}
 8003924:	b083      	sub	sp, #12
 8003926:	af00      	add	r7, sp, #0
 8003928:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	061a      	lsls	r2, r3, #24
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	021b      	lsls	r3, r3, #8
 8003932:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003936:	431a      	orrs	r2, r3
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	0a1b      	lsrs	r3, r3, #8
 800393c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003940:	431a      	orrs	r2, r3
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	0e1b      	lsrs	r3, r3, #24
 8003946:	4313      	orrs	r3, r2
}
 8003948:	4618      	mov	r0, r3
 800394a:	370c      	adds	r7, #12
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr

08003954 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b082      	sub	sp, #8
 8003958:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800395a:	2300      	movs	r3, #0
 800395c:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800395e:	f000 f8d5 	bl	8003b0c <mem_init>
  memp_init();
 8003962:	f000 fbdb 	bl	800411c <memp_init>
  pbuf_init();
  netif_init();
 8003966:	f000 fc93 	bl	8004290 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800396a:	f006 fbe7 	bl	800a13c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800396e:	f001 fd79 	bl	8005464 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8003972:	f006 fb61 	bl	800a038 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8003976:	bf00      	nop
 8003978:	3708      	adds	r7, #8
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
	...

08003980 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8003980:	b480      	push	{r7}
 8003982:	b083      	sub	sp, #12
 8003984:	af00      	add	r7, sp, #0
 8003986:	4603      	mov	r3, r0
 8003988:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800398a:	4b05      	ldr	r3, [pc, #20]	; (80039a0 <ptr_to_mem+0x20>)
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	88fb      	ldrh	r3, [r7, #6]
 8003990:	4413      	add	r3, r2
}
 8003992:	4618      	mov	r0, r3
 8003994:	370c      	adds	r7, #12
 8003996:	46bd      	mov	sp, r7
 8003998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399c:	4770      	bx	lr
 800399e:	bf00      	nop
 80039a0:	20000098 	.word	0x20000098

080039a4 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b083      	sub	sp, #12
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 80039ac:	4b05      	ldr	r3, [pc, #20]	; (80039c4 <mem_to_ptr+0x20>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	687a      	ldr	r2, [r7, #4]
 80039b2:	1ad3      	subs	r3, r2, r3
 80039b4:	b29b      	uxth	r3, r3
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	370c      	adds	r7, #12
 80039ba:	46bd      	mov	sp, r7
 80039bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c0:	4770      	bx	lr
 80039c2:	bf00      	nop
 80039c4:	20000098 	.word	0x20000098

080039c8 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80039c8:	b590      	push	{r4, r7, lr}
 80039ca:	b085      	sub	sp, #20
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80039d0:	4b45      	ldr	r3, [pc, #276]	; (8003ae8 <plug_holes+0x120>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	687a      	ldr	r2, [r7, #4]
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d206      	bcs.n	80039e8 <plug_holes+0x20>
 80039da:	4b44      	ldr	r3, [pc, #272]	; (8003aec <plug_holes+0x124>)
 80039dc:	f240 12df 	movw	r2, #479	; 0x1df
 80039e0:	4943      	ldr	r1, [pc, #268]	; (8003af0 <plug_holes+0x128>)
 80039e2:	4844      	ldr	r0, [pc, #272]	; (8003af4 <plug_holes+0x12c>)
 80039e4:	f009 fc40 	bl	800d268 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80039e8:	4b43      	ldr	r3, [pc, #268]	; (8003af8 <plug_holes+0x130>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	687a      	ldr	r2, [r7, #4]
 80039ee:	429a      	cmp	r2, r3
 80039f0:	d306      	bcc.n	8003a00 <plug_holes+0x38>
 80039f2:	4b3e      	ldr	r3, [pc, #248]	; (8003aec <plug_holes+0x124>)
 80039f4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80039f8:	4940      	ldr	r1, [pc, #256]	; (8003afc <plug_holes+0x134>)
 80039fa:	483e      	ldr	r0, [pc, #248]	; (8003af4 <plug_holes+0x12c>)
 80039fc:	f009 fc34 	bl	800d268 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	791b      	ldrb	r3, [r3, #4]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d006      	beq.n	8003a16 <plug_holes+0x4e>
 8003a08:	4b38      	ldr	r3, [pc, #224]	; (8003aec <plug_holes+0x124>)
 8003a0a:	f240 12e1 	movw	r2, #481	; 0x1e1
 8003a0e:	493c      	ldr	r1, [pc, #240]	; (8003b00 <plug_holes+0x138>)
 8003a10:	4838      	ldr	r0, [pc, #224]	; (8003af4 <plug_holes+0x12c>)
 8003a12:	f009 fc29 	bl	800d268 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	881b      	ldrh	r3, [r3, #0]
 8003a1a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003a1e:	d906      	bls.n	8003a2e <plug_holes+0x66>
 8003a20:	4b32      	ldr	r3, [pc, #200]	; (8003aec <plug_holes+0x124>)
 8003a22:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8003a26:	4937      	ldr	r1, [pc, #220]	; (8003b04 <plug_holes+0x13c>)
 8003a28:	4832      	ldr	r0, [pc, #200]	; (8003af4 <plug_holes+0x12c>)
 8003a2a:	f009 fc1d 	bl	800d268 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	881b      	ldrh	r3, [r3, #0]
 8003a32:	4618      	mov	r0, r3
 8003a34:	f7ff ffa4 	bl	8003980 <ptr_to_mem>
 8003a38:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d024      	beq.n	8003a8c <plug_holes+0xc4>
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	791b      	ldrb	r3, [r3, #4]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d120      	bne.n	8003a8c <plug_holes+0xc4>
 8003a4a:	4b2b      	ldr	r3, [pc, #172]	; (8003af8 <plug_holes+0x130>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	68fa      	ldr	r2, [r7, #12]
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d01b      	beq.n	8003a8c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8003a54:	4b2c      	ldr	r3, [pc, #176]	; (8003b08 <plug_holes+0x140>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	68fa      	ldr	r2, [r7, #12]
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d102      	bne.n	8003a64 <plug_holes+0x9c>
      lfree = mem;
 8003a5e:	4a2a      	ldr	r2, [pc, #168]	; (8003b08 <plug_holes+0x140>)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	881a      	ldrh	r2, [r3, #0]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	881b      	ldrh	r3, [r3, #0]
 8003a70:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003a74:	d00a      	beq.n	8003a8c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	881b      	ldrh	r3, [r3, #0]
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f7ff ff80 	bl	8003980 <ptr_to_mem>
 8003a80:	4604      	mov	r4, r0
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f7ff ff8e 	bl	80039a4 <mem_to_ptr>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	885b      	ldrh	r3, [r3, #2]
 8003a90:	4618      	mov	r0, r3
 8003a92:	f7ff ff75 	bl	8003980 <ptr_to_mem>
 8003a96:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8003a98:	68ba      	ldr	r2, [r7, #8]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d01f      	beq.n	8003ae0 <plug_holes+0x118>
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	791b      	ldrb	r3, [r3, #4]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d11b      	bne.n	8003ae0 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8003aa8:	4b17      	ldr	r3, [pc, #92]	; (8003b08 <plug_holes+0x140>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	687a      	ldr	r2, [r7, #4]
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d102      	bne.n	8003ab8 <plug_holes+0xf0>
      lfree = pmem;
 8003ab2:	4a15      	ldr	r2, [pc, #84]	; (8003b08 <plug_holes+0x140>)
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	881a      	ldrh	r2, [r3, #0]
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	881b      	ldrh	r3, [r3, #0]
 8003ac4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003ac8:	d00a      	beq.n	8003ae0 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	881b      	ldrh	r3, [r3, #0]
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f7ff ff56 	bl	8003980 <ptr_to_mem>
 8003ad4:	4604      	mov	r4, r0
 8003ad6:	68b8      	ldr	r0, [r7, #8]
 8003ad8:	f7ff ff64 	bl	80039a4 <mem_to_ptr>
 8003adc:	4603      	mov	r3, r0
 8003ade:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8003ae0:	bf00      	nop
 8003ae2:	3714      	adds	r7, #20
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd90      	pop	{r4, r7, pc}
 8003ae8:	20000098 	.word	0x20000098
 8003aec:	0800e6c0 	.word	0x0800e6c0
 8003af0:	0800e6f0 	.word	0x0800e6f0
 8003af4:	0800e708 	.word	0x0800e708
 8003af8:	2000009c 	.word	0x2000009c
 8003afc:	0800e730 	.word	0x0800e730
 8003b00:	0800e74c 	.word	0x0800e74c
 8003b04:	0800e768 	.word	0x0800e768
 8003b08:	200000a0 	.word	0x200000a0

08003b0c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b082      	sub	sp, #8
 8003b10:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8003b12:	4b18      	ldr	r3, [pc, #96]	; (8003b74 <mem_init+0x68>)
 8003b14:	3303      	adds	r3, #3
 8003b16:	f023 0303 	bic.w	r3, r3, #3
 8003b1a:	461a      	mov	r2, r3
 8003b1c:	4b16      	ldr	r3, [pc, #88]	; (8003b78 <mem_init+0x6c>)
 8003b1e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8003b20:	4b15      	ldr	r3, [pc, #84]	; (8003b78 <mem_init+0x6c>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8003b2c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2200      	movs	r2, #0
 8003b32:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2200      	movs	r2, #0
 8003b38:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8003b3a:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8003b3e:	f7ff ff1f 	bl	8003980 <ptr_to_mem>
 8003b42:	4603      	mov	r3, r0
 8003b44:	4a0d      	ldr	r2, [pc, #52]	; (8003b7c <mem_init+0x70>)
 8003b46:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8003b48:	4b0c      	ldr	r3, [pc, #48]	; (8003b7c <mem_init+0x70>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8003b50:	4b0a      	ldr	r3, [pc, #40]	; (8003b7c <mem_init+0x70>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8003b58:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8003b5a:	4b08      	ldr	r3, [pc, #32]	; (8003b7c <mem_init+0x70>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8003b62:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8003b64:	4b04      	ldr	r3, [pc, #16]	; (8003b78 <mem_init+0x6c>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a05      	ldr	r2, [pc, #20]	; (8003b80 <mem_init+0x74>)
 8003b6a:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8003b6c:	bf00      	nop
 8003b6e:	3708      	adds	r7, #8
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	20003360 	.word	0x20003360
 8003b78:	20000098 	.word	0x20000098
 8003b7c:	2000009c 	.word	0x2000009c
 8003b80:	200000a0 	.word	0x200000a0

08003b84 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b086      	sub	sp, #24
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f7ff ff09 	bl	80039a4 <mem_to_ptr>
 8003b92:	4603      	mov	r3, r0
 8003b94:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	881b      	ldrh	r3, [r3, #0]
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f7ff fef0 	bl	8003980 <ptr_to_mem>
 8003ba0:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	885b      	ldrh	r3, [r3, #2]
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f7ff feea 	bl	8003980 <ptr_to_mem>
 8003bac:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	881b      	ldrh	r3, [r3, #0]
 8003bb2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003bb6:	d818      	bhi.n	8003bea <mem_link_valid+0x66>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	885b      	ldrh	r3, [r3, #2]
 8003bbc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003bc0:	d813      	bhi.n	8003bea <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8003bc6:	8afa      	ldrh	r2, [r7, #22]
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d004      	beq.n	8003bd6 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	881b      	ldrh	r3, [r3, #0]
 8003bd0:	8afa      	ldrh	r2, [r7, #22]
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d109      	bne.n	8003bea <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8003bd6:	4b08      	ldr	r3, [pc, #32]	; (8003bf8 <mem_link_valid+0x74>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8003bda:	693a      	ldr	r2, [r7, #16]
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d006      	beq.n	8003bee <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	885b      	ldrh	r3, [r3, #2]
 8003be4:	8afa      	ldrh	r2, [r7, #22]
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d001      	beq.n	8003bee <mem_link_valid+0x6a>
    return 0;
 8003bea:	2300      	movs	r3, #0
 8003bec:	e000      	b.n	8003bf0 <mem_link_valid+0x6c>
  }
  return 1;
 8003bee:	2301      	movs	r3, #1
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	3718      	adds	r7, #24
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	2000009c 	.word	0x2000009c

08003bfc <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b084      	sub	sp, #16
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d04c      	beq.n	8003ca4 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	f003 0303 	and.w	r3, r3, #3
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d007      	beq.n	8003c24 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8003c14:	4b25      	ldr	r3, [pc, #148]	; (8003cac <mem_free+0xb0>)
 8003c16:	f240 2273 	movw	r2, #627	; 0x273
 8003c1a:	4925      	ldr	r1, [pc, #148]	; (8003cb0 <mem_free+0xb4>)
 8003c1c:	4825      	ldr	r0, [pc, #148]	; (8003cb4 <mem_free+0xb8>)
 8003c1e:	f009 fb23 	bl	800d268 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8003c22:	e040      	b.n	8003ca6 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	3b08      	subs	r3, #8
 8003c28:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8003c2a:	4b23      	ldr	r3, [pc, #140]	; (8003cb8 <mem_free+0xbc>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	68fa      	ldr	r2, [r7, #12]
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d306      	bcc.n	8003c42 <mem_free+0x46>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	f103 020c 	add.w	r2, r3, #12
 8003c3a:	4b20      	ldr	r3, [pc, #128]	; (8003cbc <mem_free+0xc0>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d907      	bls.n	8003c52 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8003c42:	4b1a      	ldr	r3, [pc, #104]	; (8003cac <mem_free+0xb0>)
 8003c44:	f240 227f 	movw	r2, #639	; 0x27f
 8003c48:	491d      	ldr	r1, [pc, #116]	; (8003cc0 <mem_free+0xc4>)
 8003c4a:	481a      	ldr	r0, [pc, #104]	; (8003cb4 <mem_free+0xb8>)
 8003c4c:	f009 fb0c 	bl	800d268 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8003c50:	e029      	b.n	8003ca6 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	791b      	ldrb	r3, [r3, #4]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d107      	bne.n	8003c6a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8003c5a:	4b14      	ldr	r3, [pc, #80]	; (8003cac <mem_free+0xb0>)
 8003c5c:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8003c60:	4918      	ldr	r1, [pc, #96]	; (8003cc4 <mem_free+0xc8>)
 8003c62:	4814      	ldr	r0, [pc, #80]	; (8003cb4 <mem_free+0xb8>)
 8003c64:	f009 fb00 	bl	800d268 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8003c68:	e01d      	b.n	8003ca6 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8003c6a:	68f8      	ldr	r0, [r7, #12]
 8003c6c:	f7ff ff8a 	bl	8003b84 <mem_link_valid>
 8003c70:	4603      	mov	r3, r0
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d107      	bne.n	8003c86 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8003c76:	4b0d      	ldr	r3, [pc, #52]	; (8003cac <mem_free+0xb0>)
 8003c78:	f240 2295 	movw	r2, #661	; 0x295
 8003c7c:	4912      	ldr	r1, [pc, #72]	; (8003cc8 <mem_free+0xcc>)
 8003c7e:	480d      	ldr	r0, [pc, #52]	; (8003cb4 <mem_free+0xb8>)
 8003c80:	f009 faf2 	bl	800d268 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8003c84:	e00f      	b.n	8003ca6 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8003c8c:	4b0f      	ldr	r3, [pc, #60]	; (8003ccc <mem_free+0xd0>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	68fa      	ldr	r2, [r7, #12]
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d202      	bcs.n	8003c9c <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8003c96:	4a0d      	ldr	r2, [pc, #52]	; (8003ccc <mem_free+0xd0>)
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8003c9c:	68f8      	ldr	r0, [r7, #12]
 8003c9e:	f7ff fe93 	bl	80039c8 <plug_holes>
 8003ca2:	e000      	b.n	8003ca6 <mem_free+0xaa>
    return;
 8003ca4:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8003ca6:	3710      	adds	r7, #16
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}
 8003cac:	0800e6c0 	.word	0x0800e6c0
 8003cb0:	0800e794 	.word	0x0800e794
 8003cb4:	0800e708 	.word	0x0800e708
 8003cb8:	20000098 	.word	0x20000098
 8003cbc:	2000009c 	.word	0x2000009c
 8003cc0:	0800e7b8 	.word	0x0800e7b8
 8003cc4:	0800e7d4 	.word	0x0800e7d4
 8003cc8:	0800e7fc 	.word	0x0800e7fc
 8003ccc:	200000a0 	.word	0x200000a0

08003cd0 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b088      	sub	sp, #32
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	460b      	mov	r3, r1
 8003cda:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8003cdc:	887b      	ldrh	r3, [r7, #2]
 8003cde:	3303      	adds	r3, #3
 8003ce0:	b29b      	uxth	r3, r3
 8003ce2:	f023 0303 	bic.w	r3, r3, #3
 8003ce6:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8003ce8:	8bfb      	ldrh	r3, [r7, #30]
 8003cea:	2b0b      	cmp	r3, #11
 8003cec:	d801      	bhi.n	8003cf2 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8003cee:	230c      	movs	r3, #12
 8003cf0:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8003cf2:	8bfb      	ldrh	r3, [r7, #30]
 8003cf4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003cf8:	d803      	bhi.n	8003d02 <mem_trim+0x32>
 8003cfa:	8bfa      	ldrh	r2, [r7, #30]
 8003cfc:	887b      	ldrh	r3, [r7, #2]
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	d201      	bcs.n	8003d06 <mem_trim+0x36>
    return NULL;
 8003d02:	2300      	movs	r3, #0
 8003d04:	e0cc      	b.n	8003ea0 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8003d06:	4b68      	ldr	r3, [pc, #416]	; (8003ea8 <mem_trim+0x1d8>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d304      	bcc.n	8003d1a <mem_trim+0x4a>
 8003d10:	4b66      	ldr	r3, [pc, #408]	; (8003eac <mem_trim+0x1dc>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	687a      	ldr	r2, [r7, #4]
 8003d16:	429a      	cmp	r2, r3
 8003d18:	d306      	bcc.n	8003d28 <mem_trim+0x58>
 8003d1a:	4b65      	ldr	r3, [pc, #404]	; (8003eb0 <mem_trim+0x1e0>)
 8003d1c:	f240 22d1 	movw	r2, #721	; 0x2d1
 8003d20:	4964      	ldr	r1, [pc, #400]	; (8003eb4 <mem_trim+0x1e4>)
 8003d22:	4865      	ldr	r0, [pc, #404]	; (8003eb8 <mem_trim+0x1e8>)
 8003d24:	f009 faa0 	bl	800d268 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8003d28:	4b5f      	ldr	r3, [pc, #380]	; (8003ea8 <mem_trim+0x1d8>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	687a      	ldr	r2, [r7, #4]
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d304      	bcc.n	8003d3c <mem_trim+0x6c>
 8003d32:	4b5e      	ldr	r3, [pc, #376]	; (8003eac <mem_trim+0x1dc>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	687a      	ldr	r2, [r7, #4]
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d301      	bcc.n	8003d40 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	e0af      	b.n	8003ea0 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	3b08      	subs	r3, #8
 8003d44:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8003d46:	69b8      	ldr	r0, [r7, #24]
 8003d48:	f7ff fe2c 	bl	80039a4 <mem_to_ptr>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8003d50:	69bb      	ldr	r3, [r7, #24]
 8003d52:	881a      	ldrh	r2, [r3, #0]
 8003d54:	8afb      	ldrh	r3, [r7, #22]
 8003d56:	1ad3      	subs	r3, r2, r3
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	3b08      	subs	r3, #8
 8003d5c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8003d5e:	8bfa      	ldrh	r2, [r7, #30]
 8003d60:	8abb      	ldrh	r3, [r7, #20]
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d906      	bls.n	8003d74 <mem_trim+0xa4>
 8003d66:	4b52      	ldr	r3, [pc, #328]	; (8003eb0 <mem_trim+0x1e0>)
 8003d68:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8003d6c:	4953      	ldr	r1, [pc, #332]	; (8003ebc <mem_trim+0x1ec>)
 8003d6e:	4852      	ldr	r0, [pc, #328]	; (8003eb8 <mem_trim+0x1e8>)
 8003d70:	f009 fa7a 	bl	800d268 <iprintf>
  if (newsize > size) {
 8003d74:	8bfa      	ldrh	r2, [r7, #30]
 8003d76:	8abb      	ldrh	r3, [r7, #20]
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	d901      	bls.n	8003d80 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	e08f      	b.n	8003ea0 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8003d80:	8bfa      	ldrh	r2, [r7, #30]
 8003d82:	8abb      	ldrh	r3, [r7, #20]
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d101      	bne.n	8003d8c <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	e089      	b.n	8003ea0 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8003d8c:	69bb      	ldr	r3, [r7, #24]
 8003d8e:	881b      	ldrh	r3, [r3, #0]
 8003d90:	4618      	mov	r0, r3
 8003d92:	f7ff fdf5 	bl	8003980 <ptr_to_mem>
 8003d96:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	791b      	ldrb	r3, [r3, #4]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d13f      	bne.n	8003e20 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8003da0:	69bb      	ldr	r3, [r7, #24]
 8003da2:	881b      	ldrh	r3, [r3, #0]
 8003da4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003da8:	d106      	bne.n	8003db8 <mem_trim+0xe8>
 8003daa:	4b41      	ldr	r3, [pc, #260]	; (8003eb0 <mem_trim+0x1e0>)
 8003dac:	f240 22f5 	movw	r2, #757	; 0x2f5
 8003db0:	4943      	ldr	r1, [pc, #268]	; (8003ec0 <mem_trim+0x1f0>)
 8003db2:	4841      	ldr	r0, [pc, #260]	; (8003eb8 <mem_trim+0x1e8>)
 8003db4:	f009 fa58 	bl	800d268 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	881b      	ldrh	r3, [r3, #0]
 8003dbc:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8003dbe:	8afa      	ldrh	r2, [r7, #22]
 8003dc0:	8bfb      	ldrh	r3, [r7, #30]
 8003dc2:	4413      	add	r3, r2
 8003dc4:	b29b      	uxth	r3, r3
 8003dc6:	3308      	adds	r3, #8
 8003dc8:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8003dca:	4b3e      	ldr	r3, [pc, #248]	; (8003ec4 <mem_trim+0x1f4>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	693a      	ldr	r2, [r7, #16]
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d106      	bne.n	8003de2 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8003dd4:	89fb      	ldrh	r3, [r7, #14]
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f7ff fdd2 	bl	8003980 <ptr_to_mem>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	4a39      	ldr	r2, [pc, #228]	; (8003ec4 <mem_trim+0x1f4>)
 8003de0:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8003de2:	89fb      	ldrh	r3, [r7, #14]
 8003de4:	4618      	mov	r0, r3
 8003de6:	f7ff fdcb 	bl	8003980 <ptr_to_mem>
 8003dea:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	2200      	movs	r2, #0
 8003df0:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	89ba      	ldrh	r2, [r7, #12]
 8003df6:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	8afa      	ldrh	r2, [r7, #22]
 8003dfc:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8003dfe:	69bb      	ldr	r3, [r7, #24]
 8003e00:	89fa      	ldrh	r2, [r7, #14]
 8003e02:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	881b      	ldrh	r3, [r3, #0]
 8003e08:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003e0c:	d047      	beq.n	8003e9e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	881b      	ldrh	r3, [r3, #0]
 8003e12:	4618      	mov	r0, r3
 8003e14:	f7ff fdb4 	bl	8003980 <ptr_to_mem>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	89fb      	ldrh	r3, [r7, #14]
 8003e1c:	8053      	strh	r3, [r2, #2]
 8003e1e:	e03e      	b.n	8003e9e <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8003e20:	8bfb      	ldrh	r3, [r7, #30]
 8003e22:	f103 0214 	add.w	r2, r3, #20
 8003e26:	8abb      	ldrh	r3, [r7, #20]
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d838      	bhi.n	8003e9e <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8003e2c:	8afa      	ldrh	r2, [r7, #22]
 8003e2e:	8bfb      	ldrh	r3, [r7, #30]
 8003e30:	4413      	add	r3, r2
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	3308      	adds	r3, #8
 8003e36:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8003e38:	69bb      	ldr	r3, [r7, #24]
 8003e3a:	881b      	ldrh	r3, [r3, #0]
 8003e3c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003e40:	d106      	bne.n	8003e50 <mem_trim+0x180>
 8003e42:	4b1b      	ldr	r3, [pc, #108]	; (8003eb0 <mem_trim+0x1e0>)
 8003e44:	f240 3216 	movw	r2, #790	; 0x316
 8003e48:	491d      	ldr	r1, [pc, #116]	; (8003ec0 <mem_trim+0x1f0>)
 8003e4a:	481b      	ldr	r0, [pc, #108]	; (8003eb8 <mem_trim+0x1e8>)
 8003e4c:	f009 fa0c 	bl	800d268 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8003e50:	89fb      	ldrh	r3, [r7, #14]
 8003e52:	4618      	mov	r0, r3
 8003e54:	f7ff fd94 	bl	8003980 <ptr_to_mem>
 8003e58:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8003e5a:	4b1a      	ldr	r3, [pc, #104]	; (8003ec4 <mem_trim+0x1f4>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	693a      	ldr	r2, [r7, #16]
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d202      	bcs.n	8003e6a <mem_trim+0x19a>
      lfree = mem2;
 8003e64:	4a17      	ldr	r2, [pc, #92]	; (8003ec4 <mem_trim+0x1f4>)
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8003e70:	69bb      	ldr	r3, [r7, #24]
 8003e72:	881a      	ldrh	r2, [r3, #0]
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	8afa      	ldrh	r2, [r7, #22]
 8003e7c:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8003e7e:	69bb      	ldr	r3, [r7, #24]
 8003e80:	89fa      	ldrh	r2, [r7, #14]
 8003e82:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	881b      	ldrh	r3, [r3, #0]
 8003e88:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003e8c:	d007      	beq.n	8003e9e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	881b      	ldrh	r3, [r3, #0]
 8003e92:	4618      	mov	r0, r3
 8003e94:	f7ff fd74 	bl	8003980 <ptr_to_mem>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	89fb      	ldrh	r3, [r7, #14]
 8003e9c:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8003e9e:	687b      	ldr	r3, [r7, #4]
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	3720      	adds	r7, #32
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}
 8003ea8:	20000098 	.word	0x20000098
 8003eac:	2000009c 	.word	0x2000009c
 8003eb0:	0800e6c0 	.word	0x0800e6c0
 8003eb4:	0800e830 	.word	0x0800e830
 8003eb8:	0800e708 	.word	0x0800e708
 8003ebc:	0800e848 	.word	0x0800e848
 8003ec0:	0800e868 	.word	0x0800e868
 8003ec4:	200000a0 	.word	0x200000a0

08003ec8 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b088      	sub	sp, #32
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	4603      	mov	r3, r0
 8003ed0:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8003ed2:	88fb      	ldrh	r3, [r7, #6]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d101      	bne.n	8003edc <mem_malloc+0x14>
    return NULL;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	e0d9      	b.n	8004090 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8003edc:	88fb      	ldrh	r3, [r7, #6]
 8003ede:	3303      	adds	r3, #3
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	f023 0303 	bic.w	r3, r3, #3
 8003ee6:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8003ee8:	8bbb      	ldrh	r3, [r7, #28]
 8003eea:	2b0b      	cmp	r3, #11
 8003eec:	d801      	bhi.n	8003ef2 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8003eee:	230c      	movs	r3, #12
 8003ef0:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8003ef2:	8bbb      	ldrh	r3, [r7, #28]
 8003ef4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003ef8:	d803      	bhi.n	8003f02 <mem_malloc+0x3a>
 8003efa:	8bba      	ldrh	r2, [r7, #28]
 8003efc:	88fb      	ldrh	r3, [r7, #6]
 8003efe:	429a      	cmp	r2, r3
 8003f00:	d201      	bcs.n	8003f06 <mem_malloc+0x3e>
    return NULL;
 8003f02:	2300      	movs	r3, #0
 8003f04:	e0c4      	b.n	8004090 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8003f06:	4b64      	ldr	r3, [pc, #400]	; (8004098 <mem_malloc+0x1d0>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f7ff fd4a 	bl	80039a4 <mem_to_ptr>
 8003f10:	4603      	mov	r3, r0
 8003f12:	83fb      	strh	r3, [r7, #30]
 8003f14:	e0b4      	b.n	8004080 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8003f16:	8bfb      	ldrh	r3, [r7, #30]
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f7ff fd31 	bl	8003980 <ptr_to_mem>
 8003f1e:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	791b      	ldrb	r3, [r3, #4]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	f040 80a4 	bne.w	8004072 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	881b      	ldrh	r3, [r3, #0]
 8003f2e:	461a      	mov	r2, r3
 8003f30:	8bfb      	ldrh	r3, [r7, #30]
 8003f32:	1ad3      	subs	r3, r2, r3
 8003f34:	f1a3 0208 	sub.w	r2, r3, #8
 8003f38:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	f0c0 8099 	bcc.w	8004072 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	881b      	ldrh	r3, [r3, #0]
 8003f44:	461a      	mov	r2, r3
 8003f46:	8bfb      	ldrh	r3, [r7, #30]
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	f1a3 0208 	sub.w	r2, r3, #8
 8003f4e:	8bbb      	ldrh	r3, [r7, #28]
 8003f50:	3314      	adds	r3, #20
 8003f52:	429a      	cmp	r2, r3
 8003f54:	d333      	bcc.n	8003fbe <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8003f56:	8bfa      	ldrh	r2, [r7, #30]
 8003f58:	8bbb      	ldrh	r3, [r7, #28]
 8003f5a:	4413      	add	r3, r2
 8003f5c:	b29b      	uxth	r3, r3
 8003f5e:	3308      	adds	r3, #8
 8003f60:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8003f62:	8a7b      	ldrh	r3, [r7, #18]
 8003f64:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003f68:	d106      	bne.n	8003f78 <mem_malloc+0xb0>
 8003f6a:	4b4c      	ldr	r3, [pc, #304]	; (800409c <mem_malloc+0x1d4>)
 8003f6c:	f240 3287 	movw	r2, #903	; 0x387
 8003f70:	494b      	ldr	r1, [pc, #300]	; (80040a0 <mem_malloc+0x1d8>)
 8003f72:	484c      	ldr	r0, [pc, #304]	; (80040a4 <mem_malloc+0x1dc>)
 8003f74:	f009 f978 	bl	800d268 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8003f78:	8a7b      	ldrh	r3, [r7, #18]
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f7ff fd00 	bl	8003980 <ptr_to_mem>
 8003f80:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2200      	movs	r2, #0
 8003f86:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	881a      	ldrh	r2, [r3, #0]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	8bfa      	ldrh	r2, [r7, #30]
 8003f94:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	8a7a      	ldrh	r2, [r7, #18]
 8003f9a:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	881b      	ldrh	r3, [r3, #0]
 8003fa6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003faa:	d00b      	beq.n	8003fc4 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	881b      	ldrh	r3, [r3, #0]
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f7ff fce5 	bl	8003980 <ptr_to_mem>
 8003fb6:	4602      	mov	r2, r0
 8003fb8:	8a7b      	ldrh	r3, [r7, #18]
 8003fba:	8053      	strh	r3, [r2, #2]
 8003fbc:	e002      	b.n	8003fc4 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8003fc4:	4b34      	ldr	r3, [pc, #208]	; (8004098 <mem_malloc+0x1d0>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	697a      	ldr	r2, [r7, #20]
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d127      	bne.n	800401e <mem_malloc+0x156>
          struct mem *cur = lfree;
 8003fce:	4b32      	ldr	r3, [pc, #200]	; (8004098 <mem_malloc+0x1d0>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8003fd4:	e005      	b.n	8003fe2 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8003fd6:	69bb      	ldr	r3, [r7, #24]
 8003fd8:	881b      	ldrh	r3, [r3, #0]
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f7ff fcd0 	bl	8003980 <ptr_to_mem>
 8003fe0:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8003fe2:	69bb      	ldr	r3, [r7, #24]
 8003fe4:	791b      	ldrb	r3, [r3, #4]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d004      	beq.n	8003ff4 <mem_malloc+0x12c>
 8003fea:	4b2f      	ldr	r3, [pc, #188]	; (80040a8 <mem_malloc+0x1e0>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	69ba      	ldr	r2, [r7, #24]
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d1f0      	bne.n	8003fd6 <mem_malloc+0x10e>
          }
          lfree = cur;
 8003ff4:	4a28      	ldr	r2, [pc, #160]	; (8004098 <mem_malloc+0x1d0>)
 8003ff6:	69bb      	ldr	r3, [r7, #24]
 8003ff8:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8003ffa:	4b27      	ldr	r3, [pc, #156]	; (8004098 <mem_malloc+0x1d0>)
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	4b2a      	ldr	r3, [pc, #168]	; (80040a8 <mem_malloc+0x1e0>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	429a      	cmp	r2, r3
 8004004:	d00b      	beq.n	800401e <mem_malloc+0x156>
 8004006:	4b24      	ldr	r3, [pc, #144]	; (8004098 <mem_malloc+0x1d0>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	791b      	ldrb	r3, [r3, #4]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d006      	beq.n	800401e <mem_malloc+0x156>
 8004010:	4b22      	ldr	r3, [pc, #136]	; (800409c <mem_malloc+0x1d4>)
 8004012:	f240 32b5 	movw	r2, #949	; 0x3b5
 8004016:	4925      	ldr	r1, [pc, #148]	; (80040ac <mem_malloc+0x1e4>)
 8004018:	4822      	ldr	r0, [pc, #136]	; (80040a4 <mem_malloc+0x1dc>)
 800401a:	f009 f925 	bl	800d268 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800401e:	8bba      	ldrh	r2, [r7, #28]
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	4413      	add	r3, r2
 8004024:	3308      	adds	r3, #8
 8004026:	4a20      	ldr	r2, [pc, #128]	; (80040a8 <mem_malloc+0x1e0>)
 8004028:	6812      	ldr	r2, [r2, #0]
 800402a:	4293      	cmp	r3, r2
 800402c:	d906      	bls.n	800403c <mem_malloc+0x174>
 800402e:	4b1b      	ldr	r3, [pc, #108]	; (800409c <mem_malloc+0x1d4>)
 8004030:	f240 32b9 	movw	r2, #953	; 0x3b9
 8004034:	491e      	ldr	r1, [pc, #120]	; (80040b0 <mem_malloc+0x1e8>)
 8004036:	481b      	ldr	r0, [pc, #108]	; (80040a4 <mem_malloc+0x1dc>)
 8004038:	f009 f916 	bl	800d268 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	f003 0303 	and.w	r3, r3, #3
 8004042:	2b00      	cmp	r3, #0
 8004044:	d006      	beq.n	8004054 <mem_malloc+0x18c>
 8004046:	4b15      	ldr	r3, [pc, #84]	; (800409c <mem_malloc+0x1d4>)
 8004048:	f240 32bb 	movw	r2, #955	; 0x3bb
 800404c:	4919      	ldr	r1, [pc, #100]	; (80040b4 <mem_malloc+0x1ec>)
 800404e:	4815      	ldr	r0, [pc, #84]	; (80040a4 <mem_malloc+0x1dc>)
 8004050:	f009 f90a 	bl	800d268 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	f003 0303 	and.w	r3, r3, #3
 800405a:	2b00      	cmp	r3, #0
 800405c:	d006      	beq.n	800406c <mem_malloc+0x1a4>
 800405e:	4b0f      	ldr	r3, [pc, #60]	; (800409c <mem_malloc+0x1d4>)
 8004060:	f240 32bd 	movw	r2, #957	; 0x3bd
 8004064:	4914      	ldr	r1, [pc, #80]	; (80040b8 <mem_malloc+0x1f0>)
 8004066:	480f      	ldr	r0, [pc, #60]	; (80040a4 <mem_malloc+0x1dc>)
 8004068:	f009 f8fe 	bl	800d268 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	3308      	adds	r3, #8
 8004070:	e00e      	b.n	8004090 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8004072:	8bfb      	ldrh	r3, [r7, #30]
 8004074:	4618      	mov	r0, r3
 8004076:	f7ff fc83 	bl	8003980 <ptr_to_mem>
 800407a:	4603      	mov	r3, r0
 800407c:	881b      	ldrh	r3, [r3, #0]
 800407e:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8004080:	8bfa      	ldrh	r2, [r7, #30]
 8004082:	8bbb      	ldrh	r3, [r7, #28]
 8004084:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8004088:	429a      	cmp	r2, r3
 800408a:	f4ff af44 	bcc.w	8003f16 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800408e:	2300      	movs	r3, #0
}
 8004090:	4618      	mov	r0, r3
 8004092:	3720      	adds	r7, #32
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}
 8004098:	200000a0 	.word	0x200000a0
 800409c:	0800e6c0 	.word	0x0800e6c0
 80040a0:	0800e868 	.word	0x0800e868
 80040a4:	0800e708 	.word	0x0800e708
 80040a8:	2000009c 	.word	0x2000009c
 80040ac:	0800e87c 	.word	0x0800e87c
 80040b0:	0800e898 	.word	0x0800e898
 80040b4:	0800e8c8 	.word	0x0800e8c8
 80040b8:	0800e8f8 	.word	0x0800e8f8

080040bc <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80040bc:	b480      	push	{r7}
 80040be:	b085      	sub	sp, #20
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	2200      	movs	r2, #0
 80040ca:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	3303      	adds	r3, #3
 80040d2:	f023 0303 	bic.w	r3, r3, #3
 80040d6:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80040d8:	2300      	movs	r3, #0
 80040da:	60fb      	str	r3, [r7, #12]
 80040dc:	e011      	b.n	8004102 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	68ba      	ldr	r2, [r7, #8]
 80040ee:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	881b      	ldrh	r3, [r3, #0]
 80040f4:	461a      	mov	r2, r3
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	4413      	add	r3, r2
 80040fa:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	3301      	adds	r3, #1
 8004100:	60fb      	str	r3, [r7, #12]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	885b      	ldrh	r3, [r3, #2]
 8004106:	461a      	mov	r2, r3
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	4293      	cmp	r3, r2
 800410c:	dbe7      	blt.n	80040de <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800410e:	bf00      	nop
 8004110:	bf00      	nop
 8004112:	3714      	adds	r7, #20
 8004114:	46bd      	mov	sp, r7
 8004116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411a:	4770      	bx	lr

0800411c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b082      	sub	sp, #8
 8004120:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8004122:	2300      	movs	r3, #0
 8004124:	80fb      	strh	r3, [r7, #6]
 8004126:	e009      	b.n	800413c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8004128:	88fb      	ldrh	r3, [r7, #6]
 800412a:	4a08      	ldr	r2, [pc, #32]	; (800414c <memp_init+0x30>)
 800412c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004130:	4618      	mov	r0, r3
 8004132:	f7ff ffc3 	bl	80040bc <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8004136:	88fb      	ldrh	r3, [r7, #6]
 8004138:	3301      	adds	r3, #1
 800413a:	80fb      	strh	r3, [r7, #6]
 800413c:	88fb      	ldrh	r3, [r7, #6]
 800413e:	2b08      	cmp	r3, #8
 8004140:	d9f2      	bls.n	8004128 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8004142:	bf00      	nop
 8004144:	bf00      	nop
 8004146:	3708      	adds	r7, #8
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}
 800414c:	08011008 	.word	0x08011008

08004150 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b084      	sub	sp, #16
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d012      	beq.n	800418c <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	68fa      	ldr	r2, [r7, #12]
 800416c:	6812      	ldr	r2, [r2, #0]
 800416e:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	f003 0303 	and.w	r3, r3, #3
 8004176:	2b00      	cmp	r3, #0
 8004178:	d006      	beq.n	8004188 <do_memp_malloc_pool+0x38>
 800417a:	4b07      	ldr	r3, [pc, #28]	; (8004198 <do_memp_malloc_pool+0x48>)
 800417c:	f44f 728c 	mov.w	r2, #280	; 0x118
 8004180:	4906      	ldr	r1, [pc, #24]	; (800419c <do_memp_malloc_pool+0x4c>)
 8004182:	4807      	ldr	r0, [pc, #28]	; (80041a0 <do_memp_malloc_pool+0x50>)
 8004184:	f009 f870 	bl	800d268 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	e000      	b.n	800418e <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800418c:	2300      	movs	r3, #0
}
 800418e:	4618      	mov	r0, r3
 8004190:	3710      	adds	r7, #16
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
 8004196:	bf00      	nop
 8004198:	0800e91c 	.word	0x0800e91c
 800419c:	0800e94c 	.word	0x0800e94c
 80041a0:	0800e970 	.word	0x0800e970

080041a4 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b084      	sub	sp, #16
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	4603      	mov	r3, r0
 80041ac:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80041ae:	79fb      	ldrb	r3, [r7, #7]
 80041b0:	2b08      	cmp	r3, #8
 80041b2:	d908      	bls.n	80041c6 <memp_malloc+0x22>
 80041b4:	4b0a      	ldr	r3, [pc, #40]	; (80041e0 <memp_malloc+0x3c>)
 80041b6:	f240 1257 	movw	r2, #343	; 0x157
 80041ba:	490a      	ldr	r1, [pc, #40]	; (80041e4 <memp_malloc+0x40>)
 80041bc:	480a      	ldr	r0, [pc, #40]	; (80041e8 <memp_malloc+0x44>)
 80041be:	f009 f853 	bl	800d268 <iprintf>
 80041c2:	2300      	movs	r3, #0
 80041c4:	e008      	b.n	80041d8 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80041c6:	79fb      	ldrb	r3, [r7, #7]
 80041c8:	4a08      	ldr	r2, [pc, #32]	; (80041ec <memp_malloc+0x48>)
 80041ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041ce:	4618      	mov	r0, r3
 80041d0:	f7ff ffbe 	bl	8004150 <do_memp_malloc_pool>
 80041d4:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80041d6:	68fb      	ldr	r3, [r7, #12]
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3710      	adds	r7, #16
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}
 80041e0:	0800e91c 	.word	0x0800e91c
 80041e4:	0800e9ac 	.word	0x0800e9ac
 80041e8:	0800e970 	.word	0x0800e970
 80041ec:	08011008 	.word	0x08011008

080041f0 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b084      	sub	sp, #16
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
 80041f8:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	f003 0303 	and.w	r3, r3, #3
 8004200:	2b00      	cmp	r3, #0
 8004202:	d006      	beq.n	8004212 <do_memp_free_pool+0x22>
 8004204:	4b0a      	ldr	r3, [pc, #40]	; (8004230 <do_memp_free_pool+0x40>)
 8004206:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800420a:	490a      	ldr	r1, [pc, #40]	; (8004234 <do_memp_free_pool+0x44>)
 800420c:	480a      	ldr	r0, [pc, #40]	; (8004238 <do_memp_free_pool+0x48>)
 800420e:	f009 f82b 	bl	800d268 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	68fa      	ldr	r2, [r7, #12]
 8004226:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8004228:	bf00      	nop
 800422a:	3710      	adds	r7, #16
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}
 8004230:	0800e91c 	.word	0x0800e91c
 8004234:	0800e9cc 	.word	0x0800e9cc
 8004238:	0800e970 	.word	0x0800e970

0800423c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b082      	sub	sp, #8
 8004240:	af00      	add	r7, sp, #0
 8004242:	4603      	mov	r3, r0
 8004244:	6039      	str	r1, [r7, #0]
 8004246:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8004248:	79fb      	ldrb	r3, [r7, #7]
 800424a:	2b08      	cmp	r3, #8
 800424c:	d907      	bls.n	800425e <memp_free+0x22>
 800424e:	4b0c      	ldr	r3, [pc, #48]	; (8004280 <memp_free+0x44>)
 8004250:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8004254:	490b      	ldr	r1, [pc, #44]	; (8004284 <memp_free+0x48>)
 8004256:	480c      	ldr	r0, [pc, #48]	; (8004288 <memp_free+0x4c>)
 8004258:	f009 f806 	bl	800d268 <iprintf>
 800425c:	e00c      	b.n	8004278 <memp_free+0x3c>

  if (mem == NULL) {
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d008      	beq.n	8004276 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8004264:	79fb      	ldrb	r3, [r7, #7]
 8004266:	4a09      	ldr	r2, [pc, #36]	; (800428c <memp_free+0x50>)
 8004268:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800426c:	6839      	ldr	r1, [r7, #0]
 800426e:	4618      	mov	r0, r3
 8004270:	f7ff ffbe 	bl	80041f0 <do_memp_free_pool>
 8004274:	e000      	b.n	8004278 <memp_free+0x3c>
    return;
 8004276:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8004278:	3708      	adds	r7, #8
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}
 800427e:	bf00      	nop
 8004280:	0800e91c 	.word	0x0800e91c
 8004284:	0800e9ec 	.word	0x0800e9ec
 8004288:	0800e970 	.word	0x0800e970
 800428c:	08011008 	.word	0x08011008

08004290 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8004290:	b480      	push	{r7}
 8004292:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8004294:	bf00      	nop
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr
	...

080042a0 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b086      	sub	sp, #24
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	60f8      	str	r0, [r7, #12]
 80042a8:	60b9      	str	r1, [r7, #8]
 80042aa:	607a      	str	r2, [r7, #4]
 80042ac:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d108      	bne.n	80042c6 <netif_add+0x26>
 80042b4:	4b57      	ldr	r3, [pc, #348]	; (8004414 <netif_add+0x174>)
 80042b6:	f240 1227 	movw	r2, #295	; 0x127
 80042ba:	4957      	ldr	r1, [pc, #348]	; (8004418 <netif_add+0x178>)
 80042bc:	4857      	ldr	r0, [pc, #348]	; (800441c <netif_add+0x17c>)
 80042be:	f008 ffd3 	bl	800d268 <iprintf>
 80042c2:	2300      	movs	r3, #0
 80042c4:	e0a2      	b.n	800440c <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80042c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d108      	bne.n	80042de <netif_add+0x3e>
 80042cc:	4b51      	ldr	r3, [pc, #324]	; (8004414 <netif_add+0x174>)
 80042ce:	f44f 7294 	mov.w	r2, #296	; 0x128
 80042d2:	4953      	ldr	r1, [pc, #332]	; (8004420 <netif_add+0x180>)
 80042d4:	4851      	ldr	r0, [pc, #324]	; (800441c <netif_add+0x17c>)
 80042d6:	f008 ffc7 	bl	800d268 <iprintf>
 80042da:	2300      	movs	r3, #0
 80042dc:	e096      	b.n	800440c <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d101      	bne.n	80042e8 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80042e4:	4b4f      	ldr	r3, [pc, #316]	; (8004424 <netif_add+0x184>)
 80042e6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d101      	bne.n	80042f2 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80042ee:	4b4d      	ldr	r3, [pc, #308]	; (8004424 <netif_add+0x184>)
 80042f0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d101      	bne.n	80042fc <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 80042f8:	4b4a      	ldr	r3, [pc, #296]	; (8004424 <netif_add+0x184>)
 80042fa:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2200      	movs	r2, #0
 8004300:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2200      	movs	r2, #0
 8004306:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2200      	movs	r2, #0
 800430c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	4a45      	ldr	r2, [pc, #276]	; (8004428 <netif_add+0x188>)
 8004312:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2200      	movs	r2, #0
 8004318:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2200      	movs	r2, #0
 800431e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2200      	movs	r2, #0
 8004326:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	6a3a      	ldr	r2, [r7, #32]
 800432c:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800432e:	4b3f      	ldr	r3, [pc, #252]	; (800442c <netif_add+0x18c>)
 8004330:	781a      	ldrb	r2, [r3, #0]
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800433c:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	687a      	ldr	r2, [r7, #4]
 8004342:	68b9      	ldr	r1, [r7, #8]
 8004344:	68f8      	ldr	r0, [r7, #12]
 8004346:	f000 f913 	bl	8004570 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800434a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800434c:	68f8      	ldr	r0, [r7, #12]
 800434e:	4798      	blx	r3
 8004350:	4603      	mov	r3, r0
 8004352:	2b00      	cmp	r3, #0
 8004354:	d001      	beq.n	800435a <netif_add+0xba>
    return NULL;
 8004356:	2300      	movs	r3, #0
 8004358:	e058      	b.n	800440c <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004360:	2bff      	cmp	r3, #255	; 0xff
 8004362:	d103      	bne.n	800436c <netif_add+0xcc>
        netif->num = 0;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2200      	movs	r2, #0
 8004368:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800436c:	2300      	movs	r3, #0
 800436e:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8004370:	4b2f      	ldr	r3, [pc, #188]	; (8004430 <netif_add+0x190>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	617b      	str	r3, [r7, #20]
 8004376:	e02b      	b.n	80043d0 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8004378:	697a      	ldr	r2, [r7, #20]
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	429a      	cmp	r2, r3
 800437e:	d106      	bne.n	800438e <netif_add+0xee>
 8004380:	4b24      	ldr	r3, [pc, #144]	; (8004414 <netif_add+0x174>)
 8004382:	f240 128b 	movw	r2, #395	; 0x18b
 8004386:	492b      	ldr	r1, [pc, #172]	; (8004434 <netif_add+0x194>)
 8004388:	4824      	ldr	r0, [pc, #144]	; (800441c <netif_add+0x17c>)
 800438a:	f008 ff6d 	bl	800d268 <iprintf>
        num_netifs++;
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	3301      	adds	r3, #1
 8004392:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	2bff      	cmp	r3, #255	; 0xff
 8004398:	dd06      	ble.n	80043a8 <netif_add+0x108>
 800439a:	4b1e      	ldr	r3, [pc, #120]	; (8004414 <netif_add+0x174>)
 800439c:	f240 128d 	movw	r2, #397	; 0x18d
 80043a0:	4925      	ldr	r1, [pc, #148]	; (8004438 <netif_add+0x198>)
 80043a2:	481e      	ldr	r0, [pc, #120]	; (800441c <netif_add+0x17c>)
 80043a4:	f008 ff60 	bl	800d268 <iprintf>
        if (netif2->num == netif->num) {
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d108      	bne.n	80043ca <netif_add+0x12a>
          netif->num++;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80043be:	3301      	adds	r3, #1
 80043c0:	b2da      	uxtb	r2, r3
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 80043c8:	e005      	b.n	80043d6 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	617b      	str	r3, [r7, #20]
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d1d0      	bne.n	8004378 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d1be      	bne.n	800435a <netif_add+0xba>
  }
  if (netif->num == 254) {
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80043e2:	2bfe      	cmp	r3, #254	; 0xfe
 80043e4:	d103      	bne.n	80043ee <netif_add+0x14e>
    netif_num = 0;
 80043e6:	4b11      	ldr	r3, [pc, #68]	; (800442c <netif_add+0x18c>)
 80043e8:	2200      	movs	r2, #0
 80043ea:	701a      	strb	r2, [r3, #0]
 80043ec:	e006      	b.n	80043fc <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80043f4:	3301      	adds	r3, #1
 80043f6:	b2da      	uxtb	r2, r3
 80043f8:	4b0c      	ldr	r3, [pc, #48]	; (800442c <netif_add+0x18c>)
 80043fa:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80043fc:	4b0c      	ldr	r3, [pc, #48]	; (8004430 <netif_add+0x190>)
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8004404:	4a0a      	ldr	r2, [pc, #40]	; (8004430 <netif_add+0x190>)
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800440a:	68fb      	ldr	r3, [r7, #12]
}
 800440c:	4618      	mov	r0, r3
 800440e:	3718      	adds	r7, #24
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}
 8004414:	0800ea08 	.word	0x0800ea08
 8004418:	0800ea9c 	.word	0x0800ea9c
 800441c:	0800ea58 	.word	0x0800ea58
 8004420:	0800eab8 	.word	0x0800eab8
 8004424:	0801106c 	.word	0x0801106c
 8004428:	08004783 	.word	0x08004783
 800442c:	200000c8 	.word	0x200000c8
 8004430:	20006868 	.word	0x20006868
 8004434:	0800eadc 	.word	0x0800eadc
 8004438:	0800eaf0 	.word	0x0800eaf0

0800443c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b082      	sub	sp, #8
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
 8004444:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8004446:	6839      	ldr	r1, [r7, #0]
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	f002 faf3 	bl	8006a34 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800444e:	6839      	ldr	r1, [r7, #0]
 8004450:	6878      	ldr	r0, [r7, #4]
 8004452:	f006 fbb7 	bl	800abc4 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8004456:	bf00      	nop
 8004458:	3708      	adds	r7, #8
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}
	...

08004460 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b086      	sub	sp, #24
 8004464:	af00      	add	r7, sp, #0
 8004466:	60f8      	str	r0, [r7, #12]
 8004468:	60b9      	str	r1, [r7, #8]
 800446a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d106      	bne.n	8004480 <netif_do_set_ipaddr+0x20>
 8004472:	4b1d      	ldr	r3, [pc, #116]	; (80044e8 <netif_do_set_ipaddr+0x88>)
 8004474:	f240 12cb 	movw	r2, #459	; 0x1cb
 8004478:	491c      	ldr	r1, [pc, #112]	; (80044ec <netif_do_set_ipaddr+0x8c>)
 800447a:	481d      	ldr	r0, [pc, #116]	; (80044f0 <netif_do_set_ipaddr+0x90>)
 800447c:	f008 fef4 	bl	800d268 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d106      	bne.n	8004494 <netif_do_set_ipaddr+0x34>
 8004486:	4b18      	ldr	r3, [pc, #96]	; (80044e8 <netif_do_set_ipaddr+0x88>)
 8004488:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800448c:	4917      	ldr	r1, [pc, #92]	; (80044ec <netif_do_set_ipaddr+0x8c>)
 800448e:	4818      	ldr	r0, [pc, #96]	; (80044f0 <netif_do_set_ipaddr+0x90>)
 8004490:	f008 feea 	bl	800d268 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	3304      	adds	r3, #4
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	429a      	cmp	r2, r3
 80044a0:	d01c      	beq.n	80044dc <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	3304      	adds	r3, #4
 80044ac:	681a      	ldr	r2, [r3, #0]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 80044b2:	f107 0314 	add.w	r3, r7, #20
 80044b6:	4619      	mov	r1, r3
 80044b8:	6878      	ldr	r0, [r7, #4]
 80044ba:	f7ff ffbf 	bl	800443c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d002      	beq.n	80044ca <netif_do_set_ipaddr+0x6a>
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	e000      	b.n	80044cc <netif_do_set_ipaddr+0x6c>
 80044ca:	2300      	movs	r3, #0
 80044cc:	68fa      	ldr	r2, [r7, #12]
 80044ce:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80044d0:	2101      	movs	r1, #1
 80044d2:	68f8      	ldr	r0, [r7, #12]
 80044d4:	f000 f8d2 	bl	800467c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 80044d8:	2301      	movs	r3, #1
 80044da:	e000      	b.n	80044de <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 80044dc:	2300      	movs	r3, #0
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3718      	adds	r7, #24
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	bf00      	nop
 80044e8:	0800ea08 	.word	0x0800ea08
 80044ec:	0800eb20 	.word	0x0800eb20
 80044f0:	0800ea58 	.word	0x0800ea58

080044f4 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b085      	sub	sp, #20
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	60f8      	str	r0, [r7, #12]
 80044fc:	60b9      	str	r1, [r7, #8]
 80044fe:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	3308      	adds	r3, #8
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	429a      	cmp	r2, r3
 800450c:	d00a      	beq.n	8004524 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d002      	beq.n	800451a <netif_do_set_netmask+0x26>
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	e000      	b.n	800451c <netif_do_set_netmask+0x28>
 800451a:	2300      	movs	r3, #0
 800451c:	68fa      	ldr	r2, [r7, #12]
 800451e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8004520:	2301      	movs	r3, #1
 8004522:	e000      	b.n	8004526 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8004524:	2300      	movs	r3, #0
}
 8004526:	4618      	mov	r0, r3
 8004528:	3714      	adds	r7, #20
 800452a:	46bd      	mov	sp, r7
 800452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004530:	4770      	bx	lr

08004532 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8004532:	b480      	push	{r7}
 8004534:	b085      	sub	sp, #20
 8004536:	af00      	add	r7, sp, #0
 8004538:	60f8      	str	r0, [r7, #12]
 800453a:	60b9      	str	r1, [r7, #8]
 800453c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	330c      	adds	r3, #12
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	429a      	cmp	r2, r3
 800454a:	d00a      	beq.n	8004562 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d002      	beq.n	8004558 <netif_do_set_gw+0x26>
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	e000      	b.n	800455a <netif_do_set_gw+0x28>
 8004558:	2300      	movs	r3, #0
 800455a:	68fa      	ldr	r2, [r7, #12]
 800455c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800455e:	2301      	movs	r3, #1
 8004560:	e000      	b.n	8004564 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8004562:	2300      	movs	r3, #0
}
 8004564:	4618      	mov	r0, r3
 8004566:	3714      	adds	r7, #20
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr

08004570 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b088      	sub	sp, #32
 8004574:	af00      	add	r7, sp, #0
 8004576:	60f8      	str	r0, [r7, #12]
 8004578:	60b9      	str	r1, [r7, #8]
 800457a:	607a      	str	r2, [r7, #4]
 800457c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800457e:	2300      	movs	r3, #0
 8004580:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8004582:	2300      	movs	r3, #0
 8004584:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d101      	bne.n	8004590 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800458c:	4b1c      	ldr	r3, [pc, #112]	; (8004600 <netif_set_addr+0x90>)
 800458e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d101      	bne.n	800459a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8004596:	4b1a      	ldr	r3, [pc, #104]	; (8004600 <netif_set_addr+0x90>)
 8004598:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d101      	bne.n	80045a4 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 80045a0:	4b17      	ldr	r3, [pc, #92]	; (8004600 <netif_set_addr+0x90>)
 80045a2:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d003      	beq.n	80045b2 <netif_set_addr+0x42>
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d101      	bne.n	80045b6 <netif_set_addr+0x46>
 80045b2:	2301      	movs	r3, #1
 80045b4:	e000      	b.n	80045b8 <netif_set_addr+0x48>
 80045b6:	2300      	movs	r3, #0
 80045b8:	617b      	str	r3, [r7, #20]
  if (remove) {
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d006      	beq.n	80045ce <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80045c0:	f107 0310 	add.w	r3, r7, #16
 80045c4:	461a      	mov	r2, r3
 80045c6:	68b9      	ldr	r1, [r7, #8]
 80045c8:	68f8      	ldr	r0, [r7, #12]
 80045ca:	f7ff ff49 	bl	8004460 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 80045ce:	69fa      	ldr	r2, [r7, #28]
 80045d0:	6879      	ldr	r1, [r7, #4]
 80045d2:	68f8      	ldr	r0, [r7, #12]
 80045d4:	f7ff ff8e 	bl	80044f4 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 80045d8:	69ba      	ldr	r2, [r7, #24]
 80045da:	6839      	ldr	r1, [r7, #0]
 80045dc:	68f8      	ldr	r0, [r7, #12]
 80045de:	f7ff ffa8 	bl	8004532 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d106      	bne.n	80045f6 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80045e8:	f107 0310 	add.w	r3, r7, #16
 80045ec:	461a      	mov	r2, r3
 80045ee:	68b9      	ldr	r1, [r7, #8]
 80045f0:	68f8      	ldr	r0, [r7, #12]
 80045f2:	f7ff ff35 	bl	8004460 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 80045f6:	bf00      	nop
 80045f8:	3720      	adds	r7, #32
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}
 80045fe:	bf00      	nop
 8004600:	0801106c 	.word	0x0801106c

08004604 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8004604:	b480      	push	{r7}
 8004606:	b083      	sub	sp, #12
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800460c:	4a04      	ldr	r2, [pc, #16]	; (8004620 <netif_set_default+0x1c>)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8004612:	bf00      	nop
 8004614:	370c      	adds	r7, #12
 8004616:	46bd      	mov	sp, r7
 8004618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461c:	4770      	bx	lr
 800461e:	bf00      	nop
 8004620:	2000686c 	.word	0x2000686c

08004624 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b082      	sub	sp, #8
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d107      	bne.n	8004642 <netif_set_up+0x1e>
 8004632:	4b0f      	ldr	r3, [pc, #60]	; (8004670 <netif_set_up+0x4c>)
 8004634:	f44f 7254 	mov.w	r2, #848	; 0x350
 8004638:	490e      	ldr	r1, [pc, #56]	; (8004674 <netif_set_up+0x50>)
 800463a:	480f      	ldr	r0, [pc, #60]	; (8004678 <netif_set_up+0x54>)
 800463c:	f008 fe14 	bl	800d268 <iprintf>
 8004640:	e013      	b.n	800466a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004648:	f003 0301 	and.w	r3, r3, #1
 800464c:	2b00      	cmp	r3, #0
 800464e:	d10c      	bne.n	800466a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004656:	f043 0301 	orr.w	r3, r3, #1
 800465a:	b2da      	uxtb	r2, r3
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8004662:	2103      	movs	r1, #3
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	f000 f809 	bl	800467c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800466a:	3708      	adds	r7, #8
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}
 8004670:	0800ea08 	.word	0x0800ea08
 8004674:	0800eb90 	.word	0x0800eb90
 8004678:	0800ea58 	.word	0x0800ea58

0800467c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b082      	sub	sp, #8
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
 8004684:	460b      	mov	r3, r1
 8004686:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d106      	bne.n	800469c <netif_issue_reports+0x20>
 800468e:	4b18      	ldr	r3, [pc, #96]	; (80046f0 <netif_issue_reports+0x74>)
 8004690:	f240 326d 	movw	r2, #877	; 0x36d
 8004694:	4917      	ldr	r1, [pc, #92]	; (80046f4 <netif_issue_reports+0x78>)
 8004696:	4818      	ldr	r0, [pc, #96]	; (80046f8 <netif_issue_reports+0x7c>)
 8004698:	f008 fde6 	bl	800d268 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80046a2:	f003 0304 	and.w	r3, r3, #4
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d01e      	beq.n	80046e8 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80046b0:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d017      	beq.n	80046e8 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80046b8:	78fb      	ldrb	r3, [r7, #3]
 80046ba:	f003 0301 	and.w	r3, r3, #1
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d013      	beq.n	80046ea <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	3304      	adds	r3, #4
 80046c6:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d00e      	beq.n	80046ea <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80046d2:	f003 0308 	and.w	r3, r3, #8
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d007      	beq.n	80046ea <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	3304      	adds	r3, #4
 80046de:	4619      	mov	r1, r3
 80046e0:	6878      	ldr	r0, [r7, #4]
 80046e2:	f007 f9d9 	bl	800ba98 <etharp_request>
 80046e6:	e000      	b.n	80046ea <netif_issue_reports+0x6e>
    return;
 80046e8:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 80046ea:	3708      	adds	r7, #8
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}
 80046f0:	0800ea08 	.word	0x0800ea08
 80046f4:	0800ebac 	.word	0x0800ebac
 80046f8:	0800ea58 	.word	0x0800ea58

080046fc <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b082      	sub	sp, #8
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d107      	bne.n	800471a <netif_set_down+0x1e>
 800470a:	4b12      	ldr	r3, [pc, #72]	; (8004754 <netif_set_down+0x58>)
 800470c:	f240 329b 	movw	r2, #923	; 0x39b
 8004710:	4911      	ldr	r1, [pc, #68]	; (8004758 <netif_set_down+0x5c>)
 8004712:	4812      	ldr	r0, [pc, #72]	; (800475c <netif_set_down+0x60>)
 8004714:	f008 fda8 	bl	800d268 <iprintf>
 8004718:	e019      	b.n	800474e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004720:	f003 0301 	and.w	r3, r3, #1
 8004724:	2b00      	cmp	r3, #0
 8004726:	d012      	beq.n	800474e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800472e:	f023 0301 	bic.w	r3, r3, #1
 8004732:	b2da      	uxtb	r2, r3
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004740:	f003 0308 	and.w	r3, r3, #8
 8004744:	2b00      	cmp	r3, #0
 8004746:	d002      	beq.n	800474e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	f006 fd63 	bl	800b214 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800474e:	3708      	adds	r7, #8
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}
 8004754:	0800ea08 	.word	0x0800ea08
 8004758:	0800ebd0 	.word	0x0800ebd0
 800475c:	0800ea58 	.word	0x0800ea58

08004760 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8004760:	b480      	push	{r7}
 8004762:	b083      	sub	sp, #12
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
 8004768:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d002      	beq.n	8004776 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	683a      	ldr	r2, [r7, #0]
 8004774:	61da      	str	r2, [r3, #28]
  }
}
 8004776:	bf00      	nop
 8004778:	370c      	adds	r7, #12
 800477a:	46bd      	mov	sp, r7
 800477c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004780:	4770      	bx	lr

08004782 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8004782:	b480      	push	{r7}
 8004784:	b085      	sub	sp, #20
 8004786:	af00      	add	r7, sp, #0
 8004788:	60f8      	str	r0, [r7, #12]
 800478a:	60b9      	str	r1, [r7, #8]
 800478c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800478e:	f06f 030b 	mvn.w	r3, #11
}
 8004792:	4618      	mov	r0, r3
 8004794:	3714      	adds	r7, #20
 8004796:	46bd      	mov	sp, r7
 8004798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479c:	4770      	bx	lr
	...

080047a0 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b085      	sub	sp, #20
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	4603      	mov	r3, r0
 80047a8:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80047aa:	79fb      	ldrb	r3, [r7, #7]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d013      	beq.n	80047d8 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 80047b0:	4b0d      	ldr	r3, [pc, #52]	; (80047e8 <netif_get_by_index+0x48>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	60fb      	str	r3, [r7, #12]
 80047b6:	e00c      	b.n	80047d2 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80047be:	3301      	adds	r3, #1
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	79fa      	ldrb	r2, [r7, #7]
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d101      	bne.n	80047cc <netif_get_by_index+0x2c>
        return netif; /* found! */
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	e006      	b.n	80047da <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	60fb      	str	r3, [r7, #12]
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d1ef      	bne.n	80047b8 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80047d8:	2300      	movs	r3, #0
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3714      	adds	r7, #20
 80047de:	46bd      	mov	sp, r7
 80047e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e4:	4770      	bx	lr
 80047e6:	bf00      	nop
 80047e8:	20006868 	.word	0x20006868

080047ec <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b085      	sub	sp, #20
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	60f8      	str	r0, [r7, #12]
 80047f4:	60b9      	str	r1, [r7, #8]
 80047f6:	4611      	mov	r1, r2
 80047f8:	461a      	mov	r2, r3
 80047fa:	460b      	mov	r3, r1
 80047fc:	80fb      	strh	r3, [r7, #6]
 80047fe:	4613      	mov	r3, r2
 8004800:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2200      	movs	r2, #0
 8004806:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	68ba      	ldr	r2, [r7, #8]
 800480c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	88fa      	ldrh	r2, [r7, #6]
 8004812:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	88ba      	ldrh	r2, [r7, #4]
 8004818:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800481a:	8b3b      	ldrh	r3, [r7, #24]
 800481c:	b2da      	uxtb	r2, r3
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	7f3a      	ldrb	r2, [r7, #28]
 8004826:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2201      	movs	r2, #1
 800482c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2200      	movs	r2, #0
 8004832:	73da      	strb	r2, [r3, #15]
}
 8004834:	bf00      	nop
 8004836:	3714      	adds	r7, #20
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr

08004840 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b08c      	sub	sp, #48	; 0x30
 8004844:	af02      	add	r7, sp, #8
 8004846:	4603      	mov	r3, r0
 8004848:	71fb      	strb	r3, [r7, #7]
 800484a:	460b      	mov	r3, r1
 800484c:	80bb      	strh	r3, [r7, #4]
 800484e:	4613      	mov	r3, r2
 8004850:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8004852:	79fb      	ldrb	r3, [r7, #7]
 8004854:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8004856:	887b      	ldrh	r3, [r7, #2]
 8004858:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800485c:	d07d      	beq.n	800495a <pbuf_alloc+0x11a>
 800485e:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8004862:	f300 80c6 	bgt.w	80049f2 <pbuf_alloc+0x1b2>
 8004866:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800486a:	d010      	beq.n	800488e <pbuf_alloc+0x4e>
 800486c:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8004870:	f300 80bf 	bgt.w	80049f2 <pbuf_alloc+0x1b2>
 8004874:	2b01      	cmp	r3, #1
 8004876:	d002      	beq.n	800487e <pbuf_alloc+0x3e>
 8004878:	2b41      	cmp	r3, #65	; 0x41
 800487a:	f040 80ba 	bne.w	80049f2 <pbuf_alloc+0x1b2>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800487e:	887a      	ldrh	r2, [r7, #2]
 8004880:	88bb      	ldrh	r3, [r7, #4]
 8004882:	4619      	mov	r1, r3
 8004884:	2000      	movs	r0, #0
 8004886:	f000 f8cf 	bl	8004a28 <pbuf_alloc_reference>
 800488a:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800488c:	e0bb      	b.n	8004a06 <pbuf_alloc+0x1c6>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800488e:	2300      	movs	r3, #0
 8004890:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8004892:	2300      	movs	r3, #0
 8004894:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8004896:	88bb      	ldrh	r3, [r7, #4]
 8004898:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800489a:	2008      	movs	r0, #8
 800489c:	f7ff fc82 	bl	80041a4 <memp_malloc>
 80048a0:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d107      	bne.n	80048b8 <pbuf_alloc+0x78>
          PBUF_POOL_IS_EMPTY();
          /* free chain so far allocated */
          if (p) {
 80048a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d002      	beq.n	80048b4 <pbuf_alloc+0x74>
            pbuf_free(p);
 80048ae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80048b0:	f000 faa8 	bl	8004e04 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 80048b4:	2300      	movs	r3, #0
 80048b6:	e0a7      	b.n	8004a08 <pbuf_alloc+0x1c8>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80048b8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80048ba:	3303      	adds	r3, #3
 80048bc:	b29b      	uxth	r3, r3
 80048be:	f023 0303 	bic.w	r3, r3, #3
 80048c2:	b29b      	uxth	r3, r3
 80048c4:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 80048c8:	b29b      	uxth	r3, r3
 80048ca:	8b7a      	ldrh	r2, [r7, #26]
 80048cc:	4293      	cmp	r3, r2
 80048ce:	bf28      	it	cs
 80048d0:	4613      	movcs	r3, r2
 80048d2:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80048d4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80048d6:	3310      	adds	r3, #16
 80048d8:	693a      	ldr	r2, [r7, #16]
 80048da:	4413      	add	r3, r2
 80048dc:	3303      	adds	r3, #3
 80048de:	f023 0303 	bic.w	r3, r3, #3
 80048e2:	4618      	mov	r0, r3
 80048e4:	89f9      	ldrh	r1, [r7, #14]
 80048e6:	8b7a      	ldrh	r2, [r7, #26]
 80048e8:	2300      	movs	r3, #0
 80048ea:	9301      	str	r3, [sp, #4]
 80048ec:	887b      	ldrh	r3, [r7, #2]
 80048ee:	9300      	str	r3, [sp, #0]
 80048f0:	460b      	mov	r3, r1
 80048f2:	4601      	mov	r1, r0
 80048f4:	6938      	ldr	r0, [r7, #16]
 80048f6:	f7ff ff79 	bl	80047ec <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	f003 0303 	and.w	r3, r3, #3
 8004902:	2b00      	cmp	r3, #0
 8004904:	d006      	beq.n	8004914 <pbuf_alloc+0xd4>
 8004906:	4b42      	ldr	r3, [pc, #264]	; (8004a10 <pbuf_alloc+0x1d0>)
 8004908:	f44f 7280 	mov.w	r2, #256	; 0x100
 800490c:	4941      	ldr	r1, [pc, #260]	; (8004a14 <pbuf_alloc+0x1d4>)
 800490e:	4842      	ldr	r0, [pc, #264]	; (8004a18 <pbuf_alloc+0x1d8>)
 8004910:	f008 fcaa 	bl	800d268 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8004914:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004916:	3303      	adds	r3, #3
 8004918:	f023 0303 	bic.w	r3, r3, #3
 800491c:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8004920:	d106      	bne.n	8004930 <pbuf_alloc+0xf0>
 8004922:	4b3b      	ldr	r3, [pc, #236]	; (8004a10 <pbuf_alloc+0x1d0>)
 8004924:	f44f 7281 	mov.w	r2, #258	; 0x102
 8004928:	493c      	ldr	r1, [pc, #240]	; (8004a1c <pbuf_alloc+0x1dc>)
 800492a:	483b      	ldr	r0, [pc, #236]	; (8004a18 <pbuf_alloc+0x1d8>)
 800492c:	f008 fc9c 	bl	800d268 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8004930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004932:	2b00      	cmp	r3, #0
 8004934:	d102      	bne.n	800493c <pbuf_alloc+0xfc>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	627b      	str	r3, [r7, #36]	; 0x24
 800493a:	e002      	b.n	8004942 <pbuf_alloc+0x102>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800493c:	69fb      	ldr	r3, [r7, #28]
 800493e:	693a      	ldr	r2, [r7, #16]
 8004940:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8004946:	8b7a      	ldrh	r2, [r7, #26]
 8004948:	89fb      	ldrh	r3, [r7, #14]
 800494a:	1ad3      	subs	r3, r2, r3
 800494c:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800494e:	2300      	movs	r3, #0
 8004950:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8004952:	8b7b      	ldrh	r3, [r7, #26]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d1a0      	bne.n	800489a <pbuf_alloc+0x5a>
      break;
 8004958:	e055      	b.n	8004a06 <pbuf_alloc+0x1c6>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800495a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800495c:	3303      	adds	r3, #3
 800495e:	b29b      	uxth	r3, r3
 8004960:	f023 0303 	bic.w	r3, r3, #3
 8004964:	b29a      	uxth	r2, r3
 8004966:	88bb      	ldrh	r3, [r7, #4]
 8004968:	3303      	adds	r3, #3
 800496a:	b29b      	uxth	r3, r3
 800496c:	f023 0303 	bic.w	r3, r3, #3
 8004970:	b29b      	uxth	r3, r3
 8004972:	4413      	add	r3, r2
 8004974:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8004976:	8b3b      	ldrh	r3, [r7, #24]
 8004978:	3310      	adds	r3, #16
 800497a:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800497c:	8b3a      	ldrh	r2, [r7, #24]
 800497e:	88bb      	ldrh	r3, [r7, #4]
 8004980:	3303      	adds	r3, #3
 8004982:	f023 0303 	bic.w	r3, r3, #3
 8004986:	429a      	cmp	r2, r3
 8004988:	d306      	bcc.n	8004998 <pbuf_alloc+0x158>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800498a:	8afa      	ldrh	r2, [r7, #22]
 800498c:	88bb      	ldrh	r3, [r7, #4]
 800498e:	3303      	adds	r3, #3
 8004990:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8004994:	429a      	cmp	r2, r3
 8004996:	d201      	bcs.n	800499c <pbuf_alloc+0x15c>
        return NULL;
 8004998:	2300      	movs	r3, #0
 800499a:	e035      	b.n	8004a08 <pbuf_alloc+0x1c8>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800499c:	8afb      	ldrh	r3, [r7, #22]
 800499e:	4618      	mov	r0, r3
 80049a0:	f7ff fa92 	bl	8003ec8 <mem_malloc>
 80049a4:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 80049a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d101      	bne.n	80049b0 <pbuf_alloc+0x170>
        return NULL;
 80049ac:	2300      	movs	r3, #0
 80049ae:	e02b      	b.n	8004a08 <pbuf_alloc+0x1c8>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80049b0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80049b2:	3310      	adds	r3, #16
 80049b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049b6:	4413      	add	r3, r2
 80049b8:	3303      	adds	r3, #3
 80049ba:	f023 0303 	bic.w	r3, r3, #3
 80049be:	4618      	mov	r0, r3
 80049c0:	88b9      	ldrh	r1, [r7, #4]
 80049c2:	88ba      	ldrh	r2, [r7, #4]
 80049c4:	2300      	movs	r3, #0
 80049c6:	9301      	str	r3, [sp, #4]
 80049c8:	887b      	ldrh	r3, [r7, #2]
 80049ca:	9300      	str	r3, [sp, #0]
 80049cc:	460b      	mov	r3, r1
 80049ce:	4601      	mov	r1, r0
 80049d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80049d2:	f7ff ff0b 	bl	80047ec <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 80049d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	f003 0303 	and.w	r3, r3, #3
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d010      	beq.n	8004a04 <pbuf_alloc+0x1c4>
 80049e2:	4b0b      	ldr	r3, [pc, #44]	; (8004a10 <pbuf_alloc+0x1d0>)
 80049e4:	f44f 7291 	mov.w	r2, #290	; 0x122
 80049e8:	490d      	ldr	r1, [pc, #52]	; (8004a20 <pbuf_alloc+0x1e0>)
 80049ea:	480b      	ldr	r0, [pc, #44]	; (8004a18 <pbuf_alloc+0x1d8>)
 80049ec:	f008 fc3c 	bl	800d268 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 80049f0:	e008      	b.n	8004a04 <pbuf_alloc+0x1c4>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80049f2:	4b07      	ldr	r3, [pc, #28]	; (8004a10 <pbuf_alloc+0x1d0>)
 80049f4:	f240 1227 	movw	r2, #295	; 0x127
 80049f8:	490a      	ldr	r1, [pc, #40]	; (8004a24 <pbuf_alloc+0x1e4>)
 80049fa:	4807      	ldr	r0, [pc, #28]	; (8004a18 <pbuf_alloc+0x1d8>)
 80049fc:	f008 fc34 	bl	800d268 <iprintf>
      return NULL;
 8004a00:	2300      	movs	r3, #0
 8004a02:	e001      	b.n	8004a08 <pbuf_alloc+0x1c8>
      break;
 8004a04:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8004a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	3728      	adds	r7, #40	; 0x28
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}
 8004a10:	0800ec38 	.word	0x0800ec38
 8004a14:	0800ec68 	.word	0x0800ec68
 8004a18:	0800ec98 	.word	0x0800ec98
 8004a1c:	0800ecc0 	.word	0x0800ecc0
 8004a20:	0800ecf4 	.word	0x0800ecf4
 8004a24:	0800ed20 	.word	0x0800ed20

08004a28 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b086      	sub	sp, #24
 8004a2c:	af02      	add	r7, sp, #8
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	460b      	mov	r3, r1
 8004a32:	807b      	strh	r3, [r7, #2]
 8004a34:	4613      	mov	r3, r2
 8004a36:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8004a38:	883b      	ldrh	r3, [r7, #0]
 8004a3a:	2b41      	cmp	r3, #65	; 0x41
 8004a3c:	d009      	beq.n	8004a52 <pbuf_alloc_reference+0x2a>
 8004a3e:	883b      	ldrh	r3, [r7, #0]
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	d006      	beq.n	8004a52 <pbuf_alloc_reference+0x2a>
 8004a44:	4b0f      	ldr	r3, [pc, #60]	; (8004a84 <pbuf_alloc_reference+0x5c>)
 8004a46:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8004a4a:	490f      	ldr	r1, [pc, #60]	; (8004a88 <pbuf_alloc_reference+0x60>)
 8004a4c:	480f      	ldr	r0, [pc, #60]	; (8004a8c <pbuf_alloc_reference+0x64>)
 8004a4e:	f008 fc0b 	bl	800d268 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8004a52:	2007      	movs	r0, #7
 8004a54:	f7ff fba6 	bl	80041a4 <memp_malloc>
 8004a58:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d101      	bne.n	8004a64 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8004a60:	2300      	movs	r3, #0
 8004a62:	e00b      	b.n	8004a7c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8004a64:	8879      	ldrh	r1, [r7, #2]
 8004a66:	887a      	ldrh	r2, [r7, #2]
 8004a68:	2300      	movs	r3, #0
 8004a6a:	9301      	str	r3, [sp, #4]
 8004a6c:	883b      	ldrh	r3, [r7, #0]
 8004a6e:	9300      	str	r3, [sp, #0]
 8004a70:	460b      	mov	r3, r1
 8004a72:	6879      	ldr	r1, [r7, #4]
 8004a74:	68f8      	ldr	r0, [r7, #12]
 8004a76:	f7ff feb9 	bl	80047ec <pbuf_init_alloced_pbuf>
  return p;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3710      	adds	r7, #16
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}
 8004a84:	0800ec38 	.word	0x0800ec38
 8004a88:	0800ed3c 	.word	0x0800ed3c
 8004a8c:	0800ec98 	.word	0x0800ec98

08004a90 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b088      	sub	sp, #32
 8004a94:	af02      	add	r7, sp, #8
 8004a96:	607b      	str	r3, [r7, #4]
 8004a98:	4603      	mov	r3, r0
 8004a9a:	73fb      	strb	r3, [r7, #15]
 8004a9c:	460b      	mov	r3, r1
 8004a9e:	81bb      	strh	r3, [r7, #12]
 8004aa0:	4613      	mov	r3, r2
 8004aa2:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8004aa4:	7bfb      	ldrb	r3, [r7, #15]
 8004aa6:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8004aa8:	8a7b      	ldrh	r3, [r7, #18]
 8004aaa:	3303      	adds	r3, #3
 8004aac:	f023 0203 	bic.w	r2, r3, #3
 8004ab0:	89bb      	ldrh	r3, [r7, #12]
 8004ab2:	441a      	add	r2, r3
 8004ab4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	d901      	bls.n	8004abe <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8004aba:	2300      	movs	r3, #0
 8004abc:	e018      	b.n	8004af0 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8004abe:	6a3b      	ldr	r3, [r7, #32]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d007      	beq.n	8004ad4 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8004ac4:	8a7b      	ldrh	r3, [r7, #18]
 8004ac6:	3303      	adds	r3, #3
 8004ac8:	f023 0303 	bic.w	r3, r3, #3
 8004acc:	6a3a      	ldr	r2, [r7, #32]
 8004ace:	4413      	add	r3, r2
 8004ad0:	617b      	str	r3, [r7, #20]
 8004ad2:	e001      	b.n	8004ad8 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8004ad8:	6878      	ldr	r0, [r7, #4]
 8004ada:	89b9      	ldrh	r1, [r7, #12]
 8004adc:	89ba      	ldrh	r2, [r7, #12]
 8004ade:	2302      	movs	r3, #2
 8004ae0:	9301      	str	r3, [sp, #4]
 8004ae2:	897b      	ldrh	r3, [r7, #10]
 8004ae4:	9300      	str	r3, [sp, #0]
 8004ae6:	460b      	mov	r3, r1
 8004ae8:	6979      	ldr	r1, [r7, #20]
 8004aea:	f7ff fe7f 	bl	80047ec <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8004aee:	687b      	ldr	r3, [r7, #4]
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3718      	adds	r7, #24
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}

08004af8 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b084      	sub	sp, #16
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
 8004b00:	460b      	mov	r3, r1
 8004b02:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d106      	bne.n	8004b18 <pbuf_realloc+0x20>
 8004b0a:	4b3a      	ldr	r3, [pc, #232]	; (8004bf4 <pbuf_realloc+0xfc>)
 8004b0c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8004b10:	4939      	ldr	r1, [pc, #228]	; (8004bf8 <pbuf_realloc+0x100>)
 8004b12:	483a      	ldr	r0, [pc, #232]	; (8004bfc <pbuf_realloc+0x104>)
 8004b14:	f008 fba8 	bl	800d268 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	891b      	ldrh	r3, [r3, #8]
 8004b1c:	887a      	ldrh	r2, [r7, #2]
 8004b1e:	429a      	cmp	r2, r3
 8004b20:	d263      	bcs.n	8004bea <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	891a      	ldrh	r2, [r3, #8]
 8004b26:	887b      	ldrh	r3, [r7, #2]
 8004b28:	1ad3      	subs	r3, r2, r3
 8004b2a:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8004b2c:	887b      	ldrh	r3, [r7, #2]
 8004b2e:	817b      	strh	r3, [r7, #10]
  q = p;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8004b34:	e018      	b.n	8004b68 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	895b      	ldrh	r3, [r3, #10]
 8004b3a:	897a      	ldrh	r2, [r7, #10]
 8004b3c:	1ad3      	subs	r3, r2, r3
 8004b3e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	891a      	ldrh	r2, [r3, #8]
 8004b44:	893b      	ldrh	r3, [r7, #8]
 8004b46:	1ad3      	subs	r3, r2, r3
 8004b48:	b29a      	uxth	r2, r3
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d106      	bne.n	8004b68 <pbuf_realloc+0x70>
 8004b5a:	4b26      	ldr	r3, [pc, #152]	; (8004bf4 <pbuf_realloc+0xfc>)
 8004b5c:	f240 12af 	movw	r2, #431	; 0x1af
 8004b60:	4927      	ldr	r1, [pc, #156]	; (8004c00 <pbuf_realloc+0x108>)
 8004b62:	4826      	ldr	r0, [pc, #152]	; (8004bfc <pbuf_realloc+0x104>)
 8004b64:	f008 fb80 	bl	800d268 <iprintf>
  while (rem_len > q->len) {
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	895b      	ldrh	r3, [r3, #10]
 8004b6c:	897a      	ldrh	r2, [r7, #10]
 8004b6e:	429a      	cmp	r2, r3
 8004b70:	d8e1      	bhi.n	8004b36 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	7b1b      	ldrb	r3, [r3, #12]
 8004b76:	f003 030f 	and.w	r3, r3, #15
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d121      	bne.n	8004bc2 <pbuf_realloc+0xca>
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	895b      	ldrh	r3, [r3, #10]
 8004b82:	897a      	ldrh	r2, [r7, #10]
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d01c      	beq.n	8004bc2 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	7b5b      	ldrb	r3, [r3, #13]
 8004b8c:	f003 0302 	and.w	r3, r3, #2
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d116      	bne.n	8004bc2 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	685a      	ldr	r2, [r3, #4]
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	1ad3      	subs	r3, r2, r3
 8004b9c:	b29a      	uxth	r2, r3
 8004b9e:	897b      	ldrh	r3, [r7, #10]
 8004ba0:	4413      	add	r3, r2
 8004ba2:	b29b      	uxth	r3, r3
 8004ba4:	4619      	mov	r1, r3
 8004ba6:	68f8      	ldr	r0, [r7, #12]
 8004ba8:	f7ff f892 	bl	8003cd0 <mem_trim>
 8004bac:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d106      	bne.n	8004bc2 <pbuf_realloc+0xca>
 8004bb4:	4b0f      	ldr	r3, [pc, #60]	; (8004bf4 <pbuf_realloc+0xfc>)
 8004bb6:	f240 12bd 	movw	r2, #445	; 0x1bd
 8004bba:	4912      	ldr	r1, [pc, #72]	; (8004c04 <pbuf_realloc+0x10c>)
 8004bbc:	480f      	ldr	r0, [pc, #60]	; (8004bfc <pbuf_realloc+0x104>)
 8004bbe:	f008 fb53 	bl	800d268 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	897a      	ldrh	r2, [r7, #10]
 8004bc6:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	895a      	ldrh	r2, [r3, #10]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d004      	beq.n	8004be2 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4618      	mov	r0, r3
 8004bde:	f000 f911 	bl	8004e04 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2200      	movs	r2, #0
 8004be6:	601a      	str	r2, [r3, #0]
 8004be8:	e000      	b.n	8004bec <pbuf_realloc+0xf4>
    return;
 8004bea:	bf00      	nop

}
 8004bec:	3710      	adds	r7, #16
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}
 8004bf2:	bf00      	nop
 8004bf4:	0800ec38 	.word	0x0800ec38
 8004bf8:	0800ed50 	.word	0x0800ed50
 8004bfc:	0800ec98 	.word	0x0800ec98
 8004c00:	0800ed68 	.word	0x0800ed68
 8004c04:	0800ed80 	.word	0x0800ed80

08004c08 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b086      	sub	sp, #24
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	60f8      	str	r0, [r7, #12]
 8004c10:	60b9      	str	r1, [r7, #8]
 8004c12:	4613      	mov	r3, r2
 8004c14:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d106      	bne.n	8004c2a <pbuf_add_header_impl+0x22>
 8004c1c:	4b2b      	ldr	r3, [pc, #172]	; (8004ccc <pbuf_add_header_impl+0xc4>)
 8004c1e:	f240 12df 	movw	r2, #479	; 0x1df
 8004c22:	492b      	ldr	r1, [pc, #172]	; (8004cd0 <pbuf_add_header_impl+0xc8>)
 8004c24:	482b      	ldr	r0, [pc, #172]	; (8004cd4 <pbuf_add_header_impl+0xcc>)
 8004c26:	f008 fb1f 	bl	800d268 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d003      	beq.n	8004c38 <pbuf_add_header_impl+0x30>
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c36:	d301      	bcc.n	8004c3c <pbuf_add_header_impl+0x34>
    return 1;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	e043      	b.n	8004cc4 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d101      	bne.n	8004c46 <pbuf_add_header_impl+0x3e>
    return 0;
 8004c42:	2300      	movs	r3, #0
 8004c44:	e03e      	b.n	8004cc4 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	891a      	ldrh	r2, [r3, #8]
 8004c4e:	8a7b      	ldrh	r3, [r7, #18]
 8004c50:	4413      	add	r3, r2
 8004c52:	b29b      	uxth	r3, r3
 8004c54:	8a7a      	ldrh	r2, [r7, #18]
 8004c56:	429a      	cmp	r2, r3
 8004c58:	d901      	bls.n	8004c5e <pbuf_add_header_impl+0x56>
    return 1;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e032      	b.n	8004cc4 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	7b1b      	ldrb	r3, [r3, #12]
 8004c62:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8004c64:	8a3b      	ldrh	r3, [r7, #16]
 8004c66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d00c      	beq.n	8004c88 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	685a      	ldr	r2, [r3, #4]
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	425b      	negs	r3, r3
 8004c76:	4413      	add	r3, r2
 8004c78:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	3310      	adds	r3, #16
 8004c7e:	697a      	ldr	r2, [r7, #20]
 8004c80:	429a      	cmp	r2, r3
 8004c82:	d20d      	bcs.n	8004ca0 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8004c84:	2301      	movs	r3, #1
 8004c86:	e01d      	b.n	8004cc4 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8004c88:	79fb      	ldrb	r3, [r7, #7]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d006      	beq.n	8004c9c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	685a      	ldr	r2, [r3, #4]
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	425b      	negs	r3, r3
 8004c96:	4413      	add	r3, r2
 8004c98:	617b      	str	r3, [r7, #20]
 8004c9a:	e001      	b.n	8004ca0 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	e011      	b.n	8004cc4 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	697a      	ldr	r2, [r7, #20]
 8004ca4:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	895a      	ldrh	r2, [r3, #10]
 8004caa:	8a7b      	ldrh	r3, [r7, #18]
 8004cac:	4413      	add	r3, r2
 8004cae:	b29a      	uxth	r2, r3
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	891a      	ldrh	r2, [r3, #8]
 8004cb8:	8a7b      	ldrh	r3, [r7, #18]
 8004cba:	4413      	add	r3, r2
 8004cbc:	b29a      	uxth	r2, r3
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	811a      	strh	r2, [r3, #8]


  return 0;
 8004cc2:	2300      	movs	r3, #0
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	3718      	adds	r7, #24
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}
 8004ccc:	0800ec38 	.word	0x0800ec38
 8004cd0:	0800ed9c 	.word	0x0800ed9c
 8004cd4:	0800ec98 	.word	0x0800ec98

08004cd8 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b082      	sub	sp, #8
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
 8004ce0:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	6839      	ldr	r1, [r7, #0]
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	f7ff ff8e 	bl	8004c08 <pbuf_add_header_impl>
 8004cec:	4603      	mov	r3, r0
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3708      	adds	r7, #8
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}
	...

08004cf8 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b084      	sub	sp, #16
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
 8004d00:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d106      	bne.n	8004d16 <pbuf_remove_header+0x1e>
 8004d08:	4b20      	ldr	r3, [pc, #128]	; (8004d8c <pbuf_remove_header+0x94>)
 8004d0a:	f240 224b 	movw	r2, #587	; 0x24b
 8004d0e:	4920      	ldr	r1, [pc, #128]	; (8004d90 <pbuf_remove_header+0x98>)
 8004d10:	4820      	ldr	r0, [pc, #128]	; (8004d94 <pbuf_remove_header+0x9c>)
 8004d12:	f008 faa9 	bl	800d268 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d003      	beq.n	8004d24 <pbuf_remove_header+0x2c>
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d22:	d301      	bcc.n	8004d28 <pbuf_remove_header+0x30>
    return 1;
 8004d24:	2301      	movs	r3, #1
 8004d26:	e02c      	b.n	8004d82 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d101      	bne.n	8004d32 <pbuf_remove_header+0x3a>
    return 0;
 8004d2e:	2300      	movs	r3, #0
 8004d30:	e027      	b.n	8004d82 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	895b      	ldrh	r3, [r3, #10]
 8004d3a:	89fa      	ldrh	r2, [r7, #14]
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	d908      	bls.n	8004d52 <pbuf_remove_header+0x5a>
 8004d40:	4b12      	ldr	r3, [pc, #72]	; (8004d8c <pbuf_remove_header+0x94>)
 8004d42:	f240 2255 	movw	r2, #597	; 0x255
 8004d46:	4914      	ldr	r1, [pc, #80]	; (8004d98 <pbuf_remove_header+0xa0>)
 8004d48:	4812      	ldr	r0, [pc, #72]	; (8004d94 <pbuf_remove_header+0x9c>)
 8004d4a:	f008 fa8d 	bl	800d268 <iprintf>
 8004d4e:	2301      	movs	r3, #1
 8004d50:	e017      	b.n	8004d82 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	685a      	ldr	r2, [r3, #4]
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	441a      	add	r2, r3
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	895a      	ldrh	r2, [r3, #10]
 8004d68:	89fb      	ldrh	r3, [r7, #14]
 8004d6a:	1ad3      	subs	r3, r2, r3
 8004d6c:	b29a      	uxth	r2, r3
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	891a      	ldrh	r2, [r3, #8]
 8004d76:	89fb      	ldrh	r3, [r7, #14]
 8004d78:	1ad3      	subs	r3, r2, r3
 8004d7a:	b29a      	uxth	r2, r3
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8004d80:	2300      	movs	r3, #0
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3710      	adds	r7, #16
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}
 8004d8a:	bf00      	nop
 8004d8c:	0800ec38 	.word	0x0800ec38
 8004d90:	0800ed9c 	.word	0x0800ed9c
 8004d94:	0800ec98 	.word	0x0800ec98
 8004d98:	0800eda8 	.word	0x0800eda8

08004d9c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b082      	sub	sp, #8
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
 8004da4:	460b      	mov	r3, r1
 8004da6:	807b      	strh	r3, [r7, #2]
 8004da8:	4613      	mov	r3, r2
 8004daa:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8004dac:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	da08      	bge.n	8004dc6 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8004db4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004db8:	425b      	negs	r3, r3
 8004dba:	4619      	mov	r1, r3
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	f7ff ff9b 	bl	8004cf8 <pbuf_remove_header>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	e007      	b.n	8004dd6 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8004dc6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004dca:	787a      	ldrb	r2, [r7, #1]
 8004dcc:	4619      	mov	r1, r3
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f7ff ff1a 	bl	8004c08 <pbuf_add_header_impl>
 8004dd4:	4603      	mov	r3, r0
  }
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	3708      	adds	r7, #8
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}

08004dde <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8004dde:	b580      	push	{r7, lr}
 8004de0:	b082      	sub	sp, #8
 8004de2:	af00      	add	r7, sp, #0
 8004de4:	6078      	str	r0, [r7, #4]
 8004de6:	460b      	mov	r3, r1
 8004de8:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8004dea:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004dee:	2201      	movs	r2, #1
 8004df0:	4619      	mov	r1, r3
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f7ff ffd2 	bl	8004d9c <pbuf_header_impl>
 8004df8:	4603      	mov	r3, r0
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	3708      	adds	r7, #8
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}
	...

08004e04 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b086      	sub	sp, #24
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d10b      	bne.n	8004e2a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d106      	bne.n	8004e26 <pbuf_free+0x22>
 8004e18:	4b38      	ldr	r3, [pc, #224]	; (8004efc <pbuf_free+0xf8>)
 8004e1a:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8004e1e:	4938      	ldr	r1, [pc, #224]	; (8004f00 <pbuf_free+0xfc>)
 8004e20:	4838      	ldr	r0, [pc, #224]	; (8004f04 <pbuf_free+0x100>)
 8004e22:	f008 fa21 	bl	800d268 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8004e26:	2300      	movs	r3, #0
 8004e28:	e063      	b.n	8004ef2 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8004e2e:	e05c      	b.n	8004eea <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	7b9b      	ldrb	r3, [r3, #14]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d106      	bne.n	8004e46 <pbuf_free+0x42>
 8004e38:	4b30      	ldr	r3, [pc, #192]	; (8004efc <pbuf_free+0xf8>)
 8004e3a:	f240 22f1 	movw	r2, #753	; 0x2f1
 8004e3e:	4932      	ldr	r1, [pc, #200]	; (8004f08 <pbuf_free+0x104>)
 8004e40:	4830      	ldr	r0, [pc, #192]	; (8004f04 <pbuf_free+0x100>)
 8004e42:	f008 fa11 	bl	800d268 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	7b9b      	ldrb	r3, [r3, #14]
 8004e4a:	3b01      	subs	r3, #1
 8004e4c:	b2da      	uxtb	r2, r3
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	739a      	strb	r2, [r3, #14]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	7b9b      	ldrb	r3, [r3, #14]
 8004e56:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8004e58:	7dbb      	ldrb	r3, [r7, #22]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d143      	bne.n	8004ee6 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	7b1b      	ldrb	r3, [r3, #12]
 8004e68:	f003 030f 	and.w	r3, r3, #15
 8004e6c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	7b5b      	ldrb	r3, [r3, #13]
 8004e72:	f003 0302 	and.w	r3, r3, #2
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d011      	beq.n	8004e9e <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	691b      	ldr	r3, [r3, #16]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d106      	bne.n	8004e94 <pbuf_free+0x90>
 8004e86:	4b1d      	ldr	r3, [pc, #116]	; (8004efc <pbuf_free+0xf8>)
 8004e88:	f240 22ff 	movw	r2, #767	; 0x2ff
 8004e8c:	491f      	ldr	r1, [pc, #124]	; (8004f0c <pbuf_free+0x108>)
 8004e8e:	481d      	ldr	r0, [pc, #116]	; (8004f04 <pbuf_free+0x100>)
 8004e90:	f008 f9ea 	bl	800d268 <iprintf>
        pc->custom_free_function(p);
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	691b      	ldr	r3, [r3, #16]
 8004e98:	6878      	ldr	r0, [r7, #4]
 8004e9a:	4798      	blx	r3
 8004e9c:	e01d      	b.n	8004eda <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8004e9e:	7bfb      	ldrb	r3, [r7, #15]
 8004ea0:	2b02      	cmp	r3, #2
 8004ea2:	d104      	bne.n	8004eae <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8004ea4:	6879      	ldr	r1, [r7, #4]
 8004ea6:	2008      	movs	r0, #8
 8004ea8:	f7ff f9c8 	bl	800423c <memp_free>
 8004eac:	e015      	b.n	8004eda <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8004eae:	7bfb      	ldrb	r3, [r7, #15]
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d104      	bne.n	8004ebe <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8004eb4:	6879      	ldr	r1, [r7, #4]
 8004eb6:	2007      	movs	r0, #7
 8004eb8:	f7ff f9c0 	bl	800423c <memp_free>
 8004ebc:	e00d      	b.n	8004eda <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8004ebe:	7bfb      	ldrb	r3, [r7, #15]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d103      	bne.n	8004ecc <pbuf_free+0xc8>
          mem_free(p);
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	f7fe fe99 	bl	8003bfc <mem_free>
 8004eca:	e006      	b.n	8004eda <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8004ecc:	4b0b      	ldr	r3, [pc, #44]	; (8004efc <pbuf_free+0xf8>)
 8004ece:	f240 320f 	movw	r2, #783	; 0x30f
 8004ed2:	490f      	ldr	r1, [pc, #60]	; (8004f10 <pbuf_free+0x10c>)
 8004ed4:	480b      	ldr	r0, [pc, #44]	; (8004f04 <pbuf_free+0x100>)
 8004ed6:	f008 f9c7 	bl	800d268 <iprintf>
        }
      }
      count++;
 8004eda:	7dfb      	ldrb	r3, [r7, #23]
 8004edc:	3301      	adds	r3, #1
 8004ede:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	607b      	str	r3, [r7, #4]
 8004ee4:	e001      	b.n	8004eea <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d19f      	bne.n	8004e30 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8004ef0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	3718      	adds	r7, #24
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}
 8004efa:	bf00      	nop
 8004efc:	0800ec38 	.word	0x0800ec38
 8004f00:	0800ed9c 	.word	0x0800ed9c
 8004f04:	0800ec98 	.word	0x0800ec98
 8004f08:	0800edc8 	.word	0x0800edc8
 8004f0c:	0800ede0 	.word	0x0800ede0
 8004f10:	0800ee04 	.word	0x0800ee04

08004f14 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b085      	sub	sp, #20
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8004f20:	e005      	b.n	8004f2e <pbuf_clen+0x1a>
    ++len;
 8004f22:	89fb      	ldrh	r3, [r7, #14]
 8004f24:	3301      	adds	r3, #1
 8004f26:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d1f6      	bne.n	8004f22 <pbuf_clen+0xe>
  }
  return len;
 8004f34:	89fb      	ldrh	r3, [r7, #14]
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3714      	adds	r7, #20
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f40:	4770      	bx	lr
	...

08004f44 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b082      	sub	sp, #8
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d010      	beq.n	8004f74 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	7b9b      	ldrb	r3, [r3, #14]
 8004f56:	3301      	adds	r3, #1
 8004f58:	b2da      	uxtb	r2, r3
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	7b9b      	ldrb	r3, [r3, #14]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d106      	bne.n	8004f74 <pbuf_ref+0x30>
 8004f66:	4b05      	ldr	r3, [pc, #20]	; (8004f7c <pbuf_ref+0x38>)
 8004f68:	f240 3242 	movw	r2, #834	; 0x342
 8004f6c:	4904      	ldr	r1, [pc, #16]	; (8004f80 <pbuf_ref+0x3c>)
 8004f6e:	4805      	ldr	r0, [pc, #20]	; (8004f84 <pbuf_ref+0x40>)
 8004f70:	f008 f97a 	bl	800d268 <iprintf>
  }
}
 8004f74:	bf00      	nop
 8004f76:	3708      	adds	r7, #8
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}
 8004f7c:	0800ec38 	.word	0x0800ec38
 8004f80:	0800ee18 	.word	0x0800ee18
 8004f84:	0800ec98 	.word	0x0800ec98

08004f88 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b084      	sub	sp, #16
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d002      	beq.n	8004f9e <pbuf_cat+0x16>
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d107      	bne.n	8004fae <pbuf_cat+0x26>
 8004f9e:	4b20      	ldr	r3, [pc, #128]	; (8005020 <pbuf_cat+0x98>)
 8004fa0:	f240 3259 	movw	r2, #857	; 0x359
 8004fa4:	491f      	ldr	r1, [pc, #124]	; (8005024 <pbuf_cat+0x9c>)
 8004fa6:	4820      	ldr	r0, [pc, #128]	; (8005028 <pbuf_cat+0xa0>)
 8004fa8:	f008 f95e 	bl	800d268 <iprintf>
 8004fac:	e034      	b.n	8005018 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	60fb      	str	r3, [r7, #12]
 8004fb2:	e00a      	b.n	8004fca <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	891a      	ldrh	r2, [r3, #8]
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	891b      	ldrh	r3, [r3, #8]
 8004fbc:	4413      	add	r3, r2
 8004fbe:	b29a      	uxth	r2, r3
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	60fb      	str	r3, [r7, #12]
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d1f0      	bne.n	8004fb4 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	891a      	ldrh	r2, [r3, #8]
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	895b      	ldrh	r3, [r3, #10]
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	d006      	beq.n	8004fec <pbuf_cat+0x64>
 8004fde:	4b10      	ldr	r3, [pc, #64]	; (8005020 <pbuf_cat+0x98>)
 8004fe0:	f240 3262 	movw	r2, #866	; 0x362
 8004fe4:	4911      	ldr	r1, [pc, #68]	; (800502c <pbuf_cat+0xa4>)
 8004fe6:	4810      	ldr	r0, [pc, #64]	; (8005028 <pbuf_cat+0xa0>)
 8004fe8:	f008 f93e 	bl	800d268 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d006      	beq.n	8005002 <pbuf_cat+0x7a>
 8004ff4:	4b0a      	ldr	r3, [pc, #40]	; (8005020 <pbuf_cat+0x98>)
 8004ff6:	f240 3263 	movw	r2, #867	; 0x363
 8004ffa:	490d      	ldr	r1, [pc, #52]	; (8005030 <pbuf_cat+0xa8>)
 8004ffc:	480a      	ldr	r0, [pc, #40]	; (8005028 <pbuf_cat+0xa0>)
 8004ffe:	f008 f933 	bl	800d268 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	891a      	ldrh	r2, [r3, #8]
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	891b      	ldrh	r3, [r3, #8]
 800500a:	4413      	add	r3, r2
 800500c:	b29a      	uxth	r2, r3
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	683a      	ldr	r2, [r7, #0]
 8005016:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8005018:	3710      	adds	r7, #16
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}
 800501e:	bf00      	nop
 8005020:	0800ec38 	.word	0x0800ec38
 8005024:	0800ee2c 	.word	0x0800ee2c
 8005028:	0800ec98 	.word	0x0800ec98
 800502c:	0800ee64 	.word	0x0800ee64
 8005030:	0800ee94 	.word	0x0800ee94

08005034 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b082      	sub	sp, #8
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
 800503c:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800503e:	6839      	ldr	r1, [r7, #0]
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	f7ff ffa1 	bl	8004f88 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8005046:	6838      	ldr	r0, [r7, #0]
 8005048:	f7ff ff7c 	bl	8004f44 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800504c:	bf00      	nop
 800504e:	3708      	adds	r7, #8
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}

08005054 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b086      	sub	sp, #24
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
 800505c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800505e:	2300      	movs	r3, #0
 8005060:	617b      	str	r3, [r7, #20]
 8005062:	2300      	movs	r3, #0
 8005064:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d008      	beq.n	800507e <pbuf_copy+0x2a>
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d005      	beq.n	800507e <pbuf_copy+0x2a>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	891a      	ldrh	r2, [r3, #8]
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	891b      	ldrh	r3, [r3, #8]
 800507a:	429a      	cmp	r2, r3
 800507c:	d209      	bcs.n	8005092 <pbuf_copy+0x3e>
 800507e:	4b57      	ldr	r3, [pc, #348]	; (80051dc <pbuf_copy+0x188>)
 8005080:	f240 32c9 	movw	r2, #969	; 0x3c9
 8005084:	4956      	ldr	r1, [pc, #344]	; (80051e0 <pbuf_copy+0x18c>)
 8005086:	4857      	ldr	r0, [pc, #348]	; (80051e4 <pbuf_copy+0x190>)
 8005088:	f008 f8ee 	bl	800d268 <iprintf>
 800508c:	f06f 030f 	mvn.w	r3, #15
 8005090:	e09f      	b.n	80051d2 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	895b      	ldrh	r3, [r3, #10]
 8005096:	461a      	mov	r2, r3
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	1ad2      	subs	r2, r2, r3
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	895b      	ldrh	r3, [r3, #10]
 80050a0:	4619      	mov	r1, r3
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	1acb      	subs	r3, r1, r3
 80050a6:	429a      	cmp	r2, r3
 80050a8:	d306      	bcc.n	80050b8 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	895b      	ldrh	r3, [r3, #10]
 80050ae:	461a      	mov	r2, r3
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	1ad3      	subs	r3, r2, r3
 80050b4:	60fb      	str	r3, [r7, #12]
 80050b6:	e005      	b.n	80050c4 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	895b      	ldrh	r3, [r3, #10]
 80050bc:	461a      	mov	r2, r3
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	1ad3      	subs	r3, r2, r3
 80050c2:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	685a      	ldr	r2, [r3, #4]
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	18d0      	adds	r0, r2, r3
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	685a      	ldr	r2, [r3, #4]
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	4413      	add	r3, r2
 80050d4:	68fa      	ldr	r2, [r7, #12]
 80050d6:	4619      	mov	r1, r3
 80050d8:	f008 f896 	bl	800d208 <memcpy>
    offset_to += len;
 80050dc:	697a      	ldr	r2, [r7, #20]
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	4413      	add	r3, r2
 80050e2:	617b      	str	r3, [r7, #20]
    offset_from += len;
 80050e4:	693a      	ldr	r2, [r7, #16]
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	4413      	add	r3, r2
 80050ea:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	895b      	ldrh	r3, [r3, #10]
 80050f0:	461a      	mov	r2, r3
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d906      	bls.n	8005106 <pbuf_copy+0xb2>
 80050f8:	4b38      	ldr	r3, [pc, #224]	; (80051dc <pbuf_copy+0x188>)
 80050fa:	f240 32d9 	movw	r2, #985	; 0x3d9
 80050fe:	493a      	ldr	r1, [pc, #232]	; (80051e8 <pbuf_copy+0x194>)
 8005100:	4838      	ldr	r0, [pc, #224]	; (80051e4 <pbuf_copy+0x190>)
 8005102:	f008 f8b1 	bl	800d268 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	895b      	ldrh	r3, [r3, #10]
 800510a:	461a      	mov	r2, r3
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	4293      	cmp	r3, r2
 8005110:	d906      	bls.n	8005120 <pbuf_copy+0xcc>
 8005112:	4b32      	ldr	r3, [pc, #200]	; (80051dc <pbuf_copy+0x188>)
 8005114:	f240 32da 	movw	r2, #986	; 0x3da
 8005118:	4934      	ldr	r1, [pc, #208]	; (80051ec <pbuf_copy+0x198>)
 800511a:	4832      	ldr	r0, [pc, #200]	; (80051e4 <pbuf_copy+0x190>)
 800511c:	f008 f8a4 	bl	800d268 <iprintf>
    if (offset_from >= p_from->len) {
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	895b      	ldrh	r3, [r3, #10]
 8005124:	461a      	mov	r2, r3
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	4293      	cmp	r3, r2
 800512a:	d304      	bcc.n	8005136 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800512c:	2300      	movs	r3, #0
 800512e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	895b      	ldrh	r3, [r3, #10]
 800513a:	461a      	mov	r2, r3
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	4293      	cmp	r3, r2
 8005140:	d114      	bne.n	800516c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8005142:	2300      	movs	r3, #0
 8005144:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d10c      	bne.n	800516c <pbuf_copy+0x118>
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d009      	beq.n	800516c <pbuf_copy+0x118>
 8005158:	4b20      	ldr	r3, [pc, #128]	; (80051dc <pbuf_copy+0x188>)
 800515a:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800515e:	4924      	ldr	r1, [pc, #144]	; (80051f0 <pbuf_copy+0x19c>)
 8005160:	4820      	ldr	r0, [pc, #128]	; (80051e4 <pbuf_copy+0x190>)
 8005162:	f008 f881 	bl	800d268 <iprintf>
 8005166:	f06f 030f 	mvn.w	r3, #15
 800516a:	e032      	b.n	80051d2 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d013      	beq.n	800519a <pbuf_copy+0x146>
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	895a      	ldrh	r2, [r3, #10]
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	891b      	ldrh	r3, [r3, #8]
 800517a:	429a      	cmp	r2, r3
 800517c:	d10d      	bne.n	800519a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d009      	beq.n	800519a <pbuf_copy+0x146>
 8005186:	4b15      	ldr	r3, [pc, #84]	; (80051dc <pbuf_copy+0x188>)
 8005188:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800518c:	4919      	ldr	r1, [pc, #100]	; (80051f4 <pbuf_copy+0x1a0>)
 800518e:	4815      	ldr	r0, [pc, #84]	; (80051e4 <pbuf_copy+0x190>)
 8005190:	f008 f86a 	bl	800d268 <iprintf>
 8005194:	f06f 0305 	mvn.w	r3, #5
 8005198:	e01b      	b.n	80051d2 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d013      	beq.n	80051c8 <pbuf_copy+0x174>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	895a      	ldrh	r2, [r3, #10]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	891b      	ldrh	r3, [r3, #8]
 80051a8:	429a      	cmp	r2, r3
 80051aa:	d10d      	bne.n	80051c8 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d009      	beq.n	80051c8 <pbuf_copy+0x174>
 80051b4:	4b09      	ldr	r3, [pc, #36]	; (80051dc <pbuf_copy+0x188>)
 80051b6:	f240 32ee 	movw	r2, #1006	; 0x3ee
 80051ba:	490e      	ldr	r1, [pc, #56]	; (80051f4 <pbuf_copy+0x1a0>)
 80051bc:	4809      	ldr	r0, [pc, #36]	; (80051e4 <pbuf_copy+0x190>)
 80051be:	f008 f853 	bl	800d268 <iprintf>
 80051c2:	f06f 0305 	mvn.w	r3, #5
 80051c6:	e004      	b.n	80051d2 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	f47f af61 	bne.w	8005092 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80051d0:	2300      	movs	r3, #0
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	3718      	adds	r7, #24
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd80      	pop	{r7, pc}
 80051da:	bf00      	nop
 80051dc:	0800ec38 	.word	0x0800ec38
 80051e0:	0800eee0 	.word	0x0800eee0
 80051e4:	0800ec98 	.word	0x0800ec98
 80051e8:	0800ef10 	.word	0x0800ef10
 80051ec:	0800ef28 	.word	0x0800ef28
 80051f0:	0800ef44 	.word	0x0800ef44
 80051f4:	0800ef54 	.word	0x0800ef54

080051f8 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b088      	sub	sp, #32
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	60f8      	str	r0, [r7, #12]
 8005200:	60b9      	str	r1, [r7, #8]
 8005202:	4611      	mov	r1, r2
 8005204:	461a      	mov	r2, r3
 8005206:	460b      	mov	r3, r1
 8005208:	80fb      	strh	r3, [r7, #6]
 800520a:	4613      	mov	r3, r2
 800520c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800520e:	2300      	movs	r3, #0
 8005210:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8005212:	2300      	movs	r3, #0
 8005214:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d108      	bne.n	800522e <pbuf_copy_partial+0x36>
 800521c:	4b2b      	ldr	r3, [pc, #172]	; (80052cc <pbuf_copy_partial+0xd4>)
 800521e:	f240 420a 	movw	r2, #1034	; 0x40a
 8005222:	492b      	ldr	r1, [pc, #172]	; (80052d0 <pbuf_copy_partial+0xd8>)
 8005224:	482b      	ldr	r0, [pc, #172]	; (80052d4 <pbuf_copy_partial+0xdc>)
 8005226:	f008 f81f 	bl	800d268 <iprintf>
 800522a:	2300      	movs	r3, #0
 800522c:	e04a      	b.n	80052c4 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d108      	bne.n	8005246 <pbuf_copy_partial+0x4e>
 8005234:	4b25      	ldr	r3, [pc, #148]	; (80052cc <pbuf_copy_partial+0xd4>)
 8005236:	f240 420b 	movw	r2, #1035	; 0x40b
 800523a:	4927      	ldr	r1, [pc, #156]	; (80052d8 <pbuf_copy_partial+0xe0>)
 800523c:	4825      	ldr	r0, [pc, #148]	; (80052d4 <pbuf_copy_partial+0xdc>)
 800523e:	f008 f813 	bl	800d268 <iprintf>
 8005242:	2300      	movs	r3, #0
 8005244:	e03e      	b.n	80052c4 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	61fb      	str	r3, [r7, #28]
 800524a:	e034      	b.n	80052b6 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800524c:	88bb      	ldrh	r3, [r7, #4]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d00a      	beq.n	8005268 <pbuf_copy_partial+0x70>
 8005252:	69fb      	ldr	r3, [r7, #28]
 8005254:	895b      	ldrh	r3, [r3, #10]
 8005256:	88ba      	ldrh	r2, [r7, #4]
 8005258:	429a      	cmp	r2, r3
 800525a:	d305      	bcc.n	8005268 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800525c:	69fb      	ldr	r3, [r7, #28]
 800525e:	895b      	ldrh	r3, [r3, #10]
 8005260:	88ba      	ldrh	r2, [r7, #4]
 8005262:	1ad3      	subs	r3, r2, r3
 8005264:	80bb      	strh	r3, [r7, #4]
 8005266:	e023      	b.n	80052b0 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8005268:	69fb      	ldr	r3, [r7, #28]
 800526a:	895a      	ldrh	r2, [r3, #10]
 800526c:	88bb      	ldrh	r3, [r7, #4]
 800526e:	1ad3      	subs	r3, r2, r3
 8005270:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8005272:	8b3a      	ldrh	r2, [r7, #24]
 8005274:	88fb      	ldrh	r3, [r7, #6]
 8005276:	429a      	cmp	r2, r3
 8005278:	d901      	bls.n	800527e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800527a:	88fb      	ldrh	r3, [r7, #6]
 800527c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800527e:	8b7b      	ldrh	r3, [r7, #26]
 8005280:	68ba      	ldr	r2, [r7, #8]
 8005282:	18d0      	adds	r0, r2, r3
 8005284:	69fb      	ldr	r3, [r7, #28]
 8005286:	685a      	ldr	r2, [r3, #4]
 8005288:	88bb      	ldrh	r3, [r7, #4]
 800528a:	4413      	add	r3, r2
 800528c:	8b3a      	ldrh	r2, [r7, #24]
 800528e:	4619      	mov	r1, r3
 8005290:	f007 ffba 	bl	800d208 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8005294:	8afa      	ldrh	r2, [r7, #22]
 8005296:	8b3b      	ldrh	r3, [r7, #24]
 8005298:	4413      	add	r3, r2
 800529a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800529c:	8b7a      	ldrh	r2, [r7, #26]
 800529e:	8b3b      	ldrh	r3, [r7, #24]
 80052a0:	4413      	add	r3, r2
 80052a2:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 80052a4:	88fa      	ldrh	r2, [r7, #6]
 80052a6:	8b3b      	ldrh	r3, [r7, #24]
 80052a8:	1ad3      	subs	r3, r2, r3
 80052aa:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80052ac:	2300      	movs	r3, #0
 80052ae:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80052b0:	69fb      	ldr	r3, [r7, #28]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	61fb      	str	r3, [r7, #28]
 80052b6:	88fb      	ldrh	r3, [r7, #6]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d002      	beq.n	80052c2 <pbuf_copy_partial+0xca>
 80052bc:	69fb      	ldr	r3, [r7, #28]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d1c4      	bne.n	800524c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 80052c2:	8afb      	ldrh	r3, [r7, #22]
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	3720      	adds	r7, #32
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}
 80052cc:	0800ec38 	.word	0x0800ec38
 80052d0:	0800ef80 	.word	0x0800ef80
 80052d4:	0800ec98 	.word	0x0800ec98
 80052d8:	0800efa0 	.word	0x0800efa0

080052dc <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b088      	sub	sp, #32
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	60f8      	str	r0, [r7, #12]
 80052e4:	60b9      	str	r1, [r7, #8]
 80052e6:	4613      	mov	r3, r2
 80052e8:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 80052ea:	88fb      	ldrh	r3, [r7, #6]
 80052ec:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 80052ee:	2300      	movs	r3, #0
 80052f0:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d109      	bne.n	800530c <pbuf_take+0x30>
 80052f8:	4b3a      	ldr	r3, [pc, #232]	; (80053e4 <pbuf_take+0x108>)
 80052fa:	f240 42b3 	movw	r2, #1203	; 0x4b3
 80052fe:	493a      	ldr	r1, [pc, #232]	; (80053e8 <pbuf_take+0x10c>)
 8005300:	483a      	ldr	r0, [pc, #232]	; (80053ec <pbuf_take+0x110>)
 8005302:	f007 ffb1 	bl	800d268 <iprintf>
 8005306:	f06f 030f 	mvn.w	r3, #15
 800530a:	e067      	b.n	80053dc <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d109      	bne.n	8005326 <pbuf_take+0x4a>
 8005312:	4b34      	ldr	r3, [pc, #208]	; (80053e4 <pbuf_take+0x108>)
 8005314:	f240 42b4 	movw	r2, #1204	; 0x4b4
 8005318:	4935      	ldr	r1, [pc, #212]	; (80053f0 <pbuf_take+0x114>)
 800531a:	4834      	ldr	r0, [pc, #208]	; (80053ec <pbuf_take+0x110>)
 800531c:	f007 ffa4 	bl	800d268 <iprintf>
 8005320:	f06f 030f 	mvn.w	r3, #15
 8005324:	e05a      	b.n	80053dc <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	891b      	ldrh	r3, [r3, #8]
 800532a:	88fa      	ldrh	r2, [r7, #6]
 800532c:	429a      	cmp	r2, r3
 800532e:	d909      	bls.n	8005344 <pbuf_take+0x68>
 8005330:	4b2c      	ldr	r3, [pc, #176]	; (80053e4 <pbuf_take+0x108>)
 8005332:	f240 42b5 	movw	r2, #1205	; 0x4b5
 8005336:	492f      	ldr	r1, [pc, #188]	; (80053f4 <pbuf_take+0x118>)
 8005338:	482c      	ldr	r0, [pc, #176]	; (80053ec <pbuf_take+0x110>)
 800533a:	f007 ff95 	bl	800d268 <iprintf>
 800533e:	f04f 33ff 	mov.w	r3, #4294967295
 8005342:	e04b      	b.n	80053dc <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d007      	beq.n	800535a <pbuf_take+0x7e>
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d004      	beq.n	800535a <pbuf_take+0x7e>
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	891b      	ldrh	r3, [r3, #8]
 8005354:	88fa      	ldrh	r2, [r7, #6]
 8005356:	429a      	cmp	r2, r3
 8005358:	d902      	bls.n	8005360 <pbuf_take+0x84>
    return ERR_ARG;
 800535a:	f06f 030f 	mvn.w	r3, #15
 800535e:	e03d      	b.n	80053dc <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	61fb      	str	r3, [r7, #28]
 8005364:	e028      	b.n	80053b8 <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 8005366:	69fb      	ldr	r3, [r7, #28]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d106      	bne.n	800537a <pbuf_take+0x9e>
 800536c:	4b1d      	ldr	r3, [pc, #116]	; (80053e4 <pbuf_take+0x108>)
 800536e:	f240 42bd 	movw	r2, #1213	; 0x4bd
 8005372:	4921      	ldr	r1, [pc, #132]	; (80053f8 <pbuf_take+0x11c>)
 8005374:	481d      	ldr	r0, [pc, #116]	; (80053ec <pbuf_take+0x110>)
 8005376:	f007 ff77 	bl	800d268 <iprintf>
    buf_copy_len = total_copy_len;
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 800537e:	69fb      	ldr	r3, [r7, #28]
 8005380:	895b      	ldrh	r3, [r3, #10]
 8005382:	461a      	mov	r2, r3
 8005384:	69bb      	ldr	r3, [r7, #24]
 8005386:	4293      	cmp	r3, r2
 8005388:	d902      	bls.n	8005390 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 800538a:	69fb      	ldr	r3, [r7, #28]
 800538c:	895b      	ldrh	r3, [r3, #10]
 800538e:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 8005390:	69fb      	ldr	r3, [r7, #28]
 8005392:	6858      	ldr	r0, [r3, #4]
 8005394:	68ba      	ldr	r2, [r7, #8]
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	4413      	add	r3, r2
 800539a:	69ba      	ldr	r2, [r7, #24]
 800539c:	4619      	mov	r1, r3
 800539e:	f007 ff33 	bl	800d208 <memcpy>
    total_copy_len -= buf_copy_len;
 80053a2:	697a      	ldr	r2, [r7, #20]
 80053a4:	69bb      	ldr	r3, [r7, #24]
 80053a6:	1ad3      	subs	r3, r2, r3
 80053a8:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 80053aa:	693a      	ldr	r2, [r7, #16]
 80053ac:	69bb      	ldr	r3, [r7, #24]
 80053ae:	4413      	add	r3, r2
 80053b0:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 80053b2:	69fb      	ldr	r3, [r7, #28]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	61fb      	str	r3, [r7, #28]
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d1d3      	bne.n	8005366 <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d103      	bne.n	80053cc <pbuf_take+0xf0>
 80053c4:	88fb      	ldrh	r3, [r7, #6]
 80053c6:	693a      	ldr	r2, [r7, #16]
 80053c8:	429a      	cmp	r2, r3
 80053ca:	d006      	beq.n	80053da <pbuf_take+0xfe>
 80053cc:	4b05      	ldr	r3, [pc, #20]	; (80053e4 <pbuf_take+0x108>)
 80053ce:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 80053d2:	490a      	ldr	r1, [pc, #40]	; (80053fc <pbuf_take+0x120>)
 80053d4:	4805      	ldr	r0, [pc, #20]	; (80053ec <pbuf_take+0x110>)
 80053d6:	f007 ff47 	bl	800d268 <iprintf>
  return ERR_OK;
 80053da:	2300      	movs	r3, #0
}
 80053dc:	4618      	mov	r0, r3
 80053de:	3720      	adds	r7, #32
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}
 80053e4:	0800ec38 	.word	0x0800ec38
 80053e8:	0800f010 	.word	0x0800f010
 80053ec:	0800ec98 	.word	0x0800ec98
 80053f0:	0800f028 	.word	0x0800f028
 80053f4:	0800f044 	.word	0x0800f044
 80053f8:	0800f064 	.word	0x0800f064
 80053fc:	0800f07c 	.word	0x0800f07c

08005400 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b084      	sub	sp, #16
 8005404:	af00      	add	r7, sp, #0
 8005406:	4603      	mov	r3, r0
 8005408:	603a      	str	r2, [r7, #0]
 800540a:	71fb      	strb	r3, [r7, #7]
 800540c:	460b      	mov	r3, r1
 800540e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	8919      	ldrh	r1, [r3, #8]
 8005414:	88ba      	ldrh	r2, [r7, #4]
 8005416:	79fb      	ldrb	r3, [r7, #7]
 8005418:	4618      	mov	r0, r3
 800541a:	f7ff fa11 	bl	8004840 <pbuf_alloc>
 800541e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d101      	bne.n	800542a <pbuf_clone+0x2a>
    return NULL;
 8005426:	2300      	movs	r3, #0
 8005428:	e011      	b.n	800544e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800542a:	6839      	ldr	r1, [r7, #0]
 800542c:	68f8      	ldr	r0, [r7, #12]
 800542e:	f7ff fe11 	bl	8005054 <pbuf_copy>
 8005432:	4603      	mov	r3, r0
 8005434:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8005436:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d006      	beq.n	800544c <pbuf_clone+0x4c>
 800543e:	4b06      	ldr	r3, [pc, #24]	; (8005458 <pbuf_clone+0x58>)
 8005440:	f240 5224 	movw	r2, #1316	; 0x524
 8005444:	4905      	ldr	r1, [pc, #20]	; (800545c <pbuf_clone+0x5c>)
 8005446:	4806      	ldr	r0, [pc, #24]	; (8005460 <pbuf_clone+0x60>)
 8005448:	f007 ff0e 	bl	800d268 <iprintf>
  return q;
 800544c:	68fb      	ldr	r3, [r7, #12]
}
 800544e:	4618      	mov	r0, r3
 8005450:	3710      	adds	r7, #16
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}
 8005456:	bf00      	nop
 8005458:	0800ec38 	.word	0x0800ec38
 800545c:	0800f0ac 	.word	0x0800f0ac
 8005460:	0800ec98 	.word	0x0800ec98

08005464 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8005468:	f007 ff16 	bl	800d298 <rand>
 800546c:	4603      	mov	r3, r0
 800546e:	b29b      	uxth	r3, r3
 8005470:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8005474:	b29b      	uxth	r3, r3
 8005476:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800547a:	b29a      	uxth	r2, r3
 800547c:	4b01      	ldr	r3, [pc, #4]	; (8005484 <tcp_init+0x20>)
 800547e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8005480:	bf00      	nop
 8005482:	bd80      	pop	{r7, pc}
 8005484:	2000000a 	.word	0x2000000a

08005488 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b082      	sub	sp, #8
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	7d1b      	ldrb	r3, [r3, #20]
 8005494:	2b01      	cmp	r3, #1
 8005496:	d105      	bne.n	80054a4 <tcp_free+0x1c>
 8005498:	4b06      	ldr	r3, [pc, #24]	; (80054b4 <tcp_free+0x2c>)
 800549a:	22d4      	movs	r2, #212	; 0xd4
 800549c:	4906      	ldr	r1, [pc, #24]	; (80054b8 <tcp_free+0x30>)
 800549e:	4807      	ldr	r0, [pc, #28]	; (80054bc <tcp_free+0x34>)
 80054a0:	f007 fee2 	bl	800d268 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 80054a4:	6879      	ldr	r1, [r7, #4]
 80054a6:	2001      	movs	r0, #1
 80054a8:	f7fe fec8 	bl	800423c <memp_free>
}
 80054ac:	bf00      	nop
 80054ae:	3708      	adds	r7, #8
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}
 80054b4:	0800f138 	.word	0x0800f138
 80054b8:	0800f168 	.word	0x0800f168
 80054bc:	0800f17c 	.word	0x0800f17c

080054c0 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b082      	sub	sp, #8
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	7d1b      	ldrb	r3, [r3, #20]
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d105      	bne.n	80054dc <tcp_free_listen+0x1c>
 80054d0:	4b06      	ldr	r3, [pc, #24]	; (80054ec <tcp_free_listen+0x2c>)
 80054d2:	22df      	movs	r2, #223	; 0xdf
 80054d4:	4906      	ldr	r1, [pc, #24]	; (80054f0 <tcp_free_listen+0x30>)
 80054d6:	4807      	ldr	r0, [pc, #28]	; (80054f4 <tcp_free_listen+0x34>)
 80054d8:	f007 fec6 	bl	800d268 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80054dc:	6879      	ldr	r1, [r7, #4]
 80054de:	2002      	movs	r0, #2
 80054e0:	f7fe feac 	bl	800423c <memp_free>
}
 80054e4:	bf00      	nop
 80054e6:	3708      	adds	r7, #8
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}
 80054ec:	0800f138 	.word	0x0800f138
 80054f0:	0800f1a4 	.word	0x0800f1a4
 80054f4:	0800f17c 	.word	0x0800f17c

080054f8 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 80054fc:	f000 fe82 	bl	8006204 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8005500:	4b07      	ldr	r3, [pc, #28]	; (8005520 <tcp_tmr+0x28>)
 8005502:	781b      	ldrb	r3, [r3, #0]
 8005504:	3301      	adds	r3, #1
 8005506:	b2da      	uxtb	r2, r3
 8005508:	4b05      	ldr	r3, [pc, #20]	; (8005520 <tcp_tmr+0x28>)
 800550a:	701a      	strb	r2, [r3, #0]
 800550c:	4b04      	ldr	r3, [pc, #16]	; (8005520 <tcp_tmr+0x28>)
 800550e:	781b      	ldrb	r3, [r3, #0]
 8005510:	f003 0301 	and.w	r3, r3, #1
 8005514:	2b00      	cmp	r3, #0
 8005516:	d001      	beq.n	800551c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8005518:	f000 fb4a 	bl	8005bb0 <tcp_slowtmr>
  }
}
 800551c:	bf00      	nop
 800551e:	bd80      	pop	{r7, pc}
 8005520:	200000c9 	.word	0x200000c9

08005524 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b084      	sub	sp, #16
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
 800552c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d105      	bne.n	8005540 <tcp_remove_listener+0x1c>
 8005534:	4b0d      	ldr	r3, [pc, #52]	; (800556c <tcp_remove_listener+0x48>)
 8005536:	22ff      	movs	r2, #255	; 0xff
 8005538:	490d      	ldr	r1, [pc, #52]	; (8005570 <tcp_remove_listener+0x4c>)
 800553a:	480e      	ldr	r0, [pc, #56]	; (8005574 <tcp_remove_listener+0x50>)
 800553c:	f007 fe94 	bl	800d268 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	60fb      	str	r3, [r7, #12]
 8005544:	e00a      	b.n	800555c <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800554a:	683a      	ldr	r2, [r7, #0]
 800554c:	429a      	cmp	r2, r3
 800554e:	d102      	bne.n	8005556 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2200      	movs	r2, #0
 8005554:	679a      	str	r2, [r3, #120]	; 0x78
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	68db      	ldr	r3, [r3, #12]
 800555a:	60fb      	str	r3, [r7, #12]
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d1f1      	bne.n	8005546 <tcp_remove_listener+0x22>
    }
  }
}
 8005562:	bf00      	nop
 8005564:	bf00      	nop
 8005566:	3710      	adds	r7, #16
 8005568:	46bd      	mov	sp, r7
 800556a:	bd80      	pop	{r7, pc}
 800556c:	0800f138 	.word	0x0800f138
 8005570:	0800f1c0 	.word	0x0800f1c0
 8005574:	0800f17c 	.word	0x0800f17c

08005578 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b084      	sub	sp, #16
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d106      	bne.n	8005594 <tcp_listen_closed+0x1c>
 8005586:	4b14      	ldr	r3, [pc, #80]	; (80055d8 <tcp_listen_closed+0x60>)
 8005588:	f240 1211 	movw	r2, #273	; 0x111
 800558c:	4913      	ldr	r1, [pc, #76]	; (80055dc <tcp_listen_closed+0x64>)
 800558e:	4814      	ldr	r0, [pc, #80]	; (80055e0 <tcp_listen_closed+0x68>)
 8005590:	f007 fe6a 	bl	800d268 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	7d1b      	ldrb	r3, [r3, #20]
 8005598:	2b01      	cmp	r3, #1
 800559a:	d006      	beq.n	80055aa <tcp_listen_closed+0x32>
 800559c:	4b0e      	ldr	r3, [pc, #56]	; (80055d8 <tcp_listen_closed+0x60>)
 800559e:	f44f 7289 	mov.w	r2, #274	; 0x112
 80055a2:	4910      	ldr	r1, [pc, #64]	; (80055e4 <tcp_listen_closed+0x6c>)
 80055a4:	480e      	ldr	r0, [pc, #56]	; (80055e0 <tcp_listen_closed+0x68>)
 80055a6:	f007 fe5f 	bl	800d268 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80055aa:	2301      	movs	r3, #1
 80055ac:	60fb      	str	r3, [r7, #12]
 80055ae:	e00b      	b.n	80055c8 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 80055b0:	4a0d      	ldr	r2, [pc, #52]	; (80055e8 <tcp_listen_closed+0x70>)
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	6879      	ldr	r1, [r7, #4]
 80055bc:	4618      	mov	r0, r3
 80055be:	f7ff ffb1 	bl	8005524 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	3301      	adds	r3, #1
 80055c6:	60fb      	str	r3, [r7, #12]
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2b03      	cmp	r3, #3
 80055cc:	d9f0      	bls.n	80055b0 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80055ce:	bf00      	nop
 80055d0:	bf00      	nop
 80055d2:	3710      	adds	r7, #16
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}
 80055d8:	0800f138 	.word	0x0800f138
 80055dc:	0800f1e8 	.word	0x0800f1e8
 80055e0:	0800f17c 	.word	0x0800f17c
 80055e4:	0800f1f4 	.word	0x0800f1f4
 80055e8:	08011044 	.word	0x08011044

080055ec <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 80055ec:	b5b0      	push	{r4, r5, r7, lr}
 80055ee:	b088      	sub	sp, #32
 80055f0:	af04      	add	r7, sp, #16
 80055f2:	6078      	str	r0, [r7, #4]
 80055f4:	460b      	mov	r3, r1
 80055f6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d106      	bne.n	800560c <tcp_close_shutdown+0x20>
 80055fe:	4b63      	ldr	r3, [pc, #396]	; (800578c <tcp_close_shutdown+0x1a0>)
 8005600:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8005604:	4962      	ldr	r1, [pc, #392]	; (8005790 <tcp_close_shutdown+0x1a4>)
 8005606:	4863      	ldr	r0, [pc, #396]	; (8005794 <tcp_close_shutdown+0x1a8>)
 8005608:	f007 fe2e 	bl	800d268 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800560c:	78fb      	ldrb	r3, [r7, #3]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d066      	beq.n	80056e0 <tcp_close_shutdown+0xf4>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	7d1b      	ldrb	r3, [r3, #20]
 8005616:	2b04      	cmp	r3, #4
 8005618:	d003      	beq.n	8005622 <tcp_close_shutdown+0x36>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	7d1b      	ldrb	r3, [r3, #20]
 800561e:	2b07      	cmp	r3, #7
 8005620:	d15e      	bne.n	80056e0 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005626:	2b00      	cmp	r3, #0
 8005628:	d104      	bne.n	8005634 <tcp_close_shutdown+0x48>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800562e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8005632:	d055      	beq.n	80056e0 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	8b5b      	ldrh	r3, [r3, #26]
 8005638:	f003 0310 	and.w	r3, r3, #16
 800563c:	2b00      	cmp	r3, #0
 800563e:	d106      	bne.n	800564e <tcp_close_shutdown+0x62>
 8005640:	4b52      	ldr	r3, [pc, #328]	; (800578c <tcp_close_shutdown+0x1a0>)
 8005642:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8005646:	4954      	ldr	r1, [pc, #336]	; (8005798 <tcp_close_shutdown+0x1ac>)
 8005648:	4852      	ldr	r0, [pc, #328]	; (8005794 <tcp_close_shutdown+0x1a8>)
 800564a:	f007 fe0d 	bl	800d268 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8005656:	687d      	ldr	r5, [r7, #4]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	3304      	adds	r3, #4
 800565c:	687a      	ldr	r2, [r7, #4]
 800565e:	8ad2      	ldrh	r2, [r2, #22]
 8005660:	6879      	ldr	r1, [r7, #4]
 8005662:	8b09      	ldrh	r1, [r1, #24]
 8005664:	9102      	str	r1, [sp, #8]
 8005666:	9201      	str	r2, [sp, #4]
 8005668:	9300      	str	r3, [sp, #0]
 800566a:	462b      	mov	r3, r5
 800566c:	4622      	mov	r2, r4
 800566e:	4601      	mov	r1, r0
 8005670:	6878      	ldr	r0, [r7, #4]
 8005672:	f004 fa5f 	bl	8009b34 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f001 f87a 	bl	8006770 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800567c:	4b47      	ldr	r3, [pc, #284]	; (800579c <tcp_close_shutdown+0x1b0>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	687a      	ldr	r2, [r7, #4]
 8005682:	429a      	cmp	r2, r3
 8005684:	d105      	bne.n	8005692 <tcp_close_shutdown+0xa6>
 8005686:	4b45      	ldr	r3, [pc, #276]	; (800579c <tcp_close_shutdown+0x1b0>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	68db      	ldr	r3, [r3, #12]
 800568c:	4a43      	ldr	r2, [pc, #268]	; (800579c <tcp_close_shutdown+0x1b0>)
 800568e:	6013      	str	r3, [r2, #0]
 8005690:	e013      	b.n	80056ba <tcp_close_shutdown+0xce>
 8005692:	4b42      	ldr	r3, [pc, #264]	; (800579c <tcp_close_shutdown+0x1b0>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	60fb      	str	r3, [r7, #12]
 8005698:	e00c      	b.n	80056b4 <tcp_close_shutdown+0xc8>
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	68db      	ldr	r3, [r3, #12]
 800569e:	687a      	ldr	r2, [r7, #4]
 80056a0:	429a      	cmp	r2, r3
 80056a2:	d104      	bne.n	80056ae <tcp_close_shutdown+0xc2>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	68da      	ldr	r2, [r3, #12]
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	60da      	str	r2, [r3, #12]
 80056ac:	e005      	b.n	80056ba <tcp_close_shutdown+0xce>
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	68db      	ldr	r3, [r3, #12]
 80056b2:	60fb      	str	r3, [r7, #12]
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d1ef      	bne.n	800569a <tcp_close_shutdown+0xae>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2200      	movs	r2, #0
 80056be:	60da      	str	r2, [r3, #12]
 80056c0:	4b37      	ldr	r3, [pc, #220]	; (80057a0 <tcp_close_shutdown+0x1b4>)
 80056c2:	2201      	movs	r2, #1
 80056c4:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 80056c6:	4b37      	ldr	r3, [pc, #220]	; (80057a4 <tcp_close_shutdown+0x1b8>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	687a      	ldr	r2, [r7, #4]
 80056cc:	429a      	cmp	r2, r3
 80056ce:	d102      	bne.n	80056d6 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 80056d0:	f003 f92c 	bl	800892c <tcp_trigger_input_pcb_close>
 80056d4:	e002      	b.n	80056dc <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f7ff fed6 	bl	8005488 <tcp_free>
      }
      return ERR_OK;
 80056dc:	2300      	movs	r3, #0
 80056de:	e050      	b.n	8005782 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	7d1b      	ldrb	r3, [r3, #20]
 80056e4:	2b02      	cmp	r3, #2
 80056e6:	d03b      	beq.n	8005760 <tcp_close_shutdown+0x174>
 80056e8:	2b02      	cmp	r3, #2
 80056ea:	dc44      	bgt.n	8005776 <tcp_close_shutdown+0x18a>
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d002      	beq.n	80056f6 <tcp_close_shutdown+0x10a>
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	d02a      	beq.n	800574a <tcp_close_shutdown+0x15e>
 80056f4:	e03f      	b.n	8005776 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	8adb      	ldrh	r3, [r3, #22]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d021      	beq.n	8005742 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80056fe:	4b2a      	ldr	r3, [pc, #168]	; (80057a8 <tcp_close_shutdown+0x1bc>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	687a      	ldr	r2, [r7, #4]
 8005704:	429a      	cmp	r2, r3
 8005706:	d105      	bne.n	8005714 <tcp_close_shutdown+0x128>
 8005708:	4b27      	ldr	r3, [pc, #156]	; (80057a8 <tcp_close_shutdown+0x1bc>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	68db      	ldr	r3, [r3, #12]
 800570e:	4a26      	ldr	r2, [pc, #152]	; (80057a8 <tcp_close_shutdown+0x1bc>)
 8005710:	6013      	str	r3, [r2, #0]
 8005712:	e013      	b.n	800573c <tcp_close_shutdown+0x150>
 8005714:	4b24      	ldr	r3, [pc, #144]	; (80057a8 <tcp_close_shutdown+0x1bc>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	60bb      	str	r3, [r7, #8]
 800571a:	e00c      	b.n	8005736 <tcp_close_shutdown+0x14a>
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	68db      	ldr	r3, [r3, #12]
 8005720:	687a      	ldr	r2, [r7, #4]
 8005722:	429a      	cmp	r2, r3
 8005724:	d104      	bne.n	8005730 <tcp_close_shutdown+0x144>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	68da      	ldr	r2, [r3, #12]
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	60da      	str	r2, [r3, #12]
 800572e:	e005      	b.n	800573c <tcp_close_shutdown+0x150>
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	68db      	ldr	r3, [r3, #12]
 8005734:	60bb      	str	r3, [r7, #8]
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d1ef      	bne.n	800571c <tcp_close_shutdown+0x130>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2200      	movs	r2, #0
 8005740:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f7ff fea0 	bl	8005488 <tcp_free>
      break;
 8005748:	e01a      	b.n	8005780 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f7ff ff14 	bl	8005578 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8005750:	6879      	ldr	r1, [r7, #4]
 8005752:	4816      	ldr	r0, [pc, #88]	; (80057ac <tcp_close_shutdown+0x1c0>)
 8005754:	f001 f856 	bl	8006804 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	f7ff feb1 	bl	80054c0 <tcp_free_listen>
      break;
 800575e:	e00f      	b.n	8005780 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8005760:	6879      	ldr	r1, [r7, #4]
 8005762:	480e      	ldr	r0, [pc, #56]	; (800579c <tcp_close_shutdown+0x1b0>)
 8005764:	f001 f84e 	bl	8006804 <tcp_pcb_remove>
 8005768:	4b0d      	ldr	r3, [pc, #52]	; (80057a0 <tcp_close_shutdown+0x1b4>)
 800576a:	2201      	movs	r2, #1
 800576c:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	f7ff fe8a 	bl	8005488 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8005774:	e004      	b.n	8005780 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f000 f81a 	bl	80057b0 <tcp_close_shutdown_fin>
 800577c:	4603      	mov	r3, r0
 800577e:	e000      	b.n	8005782 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8005780:	2300      	movs	r3, #0
}
 8005782:	4618      	mov	r0, r3
 8005784:	3710      	adds	r7, #16
 8005786:	46bd      	mov	sp, r7
 8005788:	bdb0      	pop	{r4, r5, r7, pc}
 800578a:	bf00      	nop
 800578c:	0800f138 	.word	0x0800f138
 8005790:	0800f20c 	.word	0x0800f20c
 8005794:	0800f17c 	.word	0x0800f17c
 8005798:	0800f22c 	.word	0x0800f22c
 800579c:	20006874 	.word	0x20006874
 80057a0:	20006870 	.word	0x20006870
 80057a4:	20006888 	.word	0x20006888
 80057a8:	20006880 	.word	0x20006880
 80057ac:	2000687c 	.word	0x2000687c

080057b0 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b084      	sub	sp, #16
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d106      	bne.n	80057cc <tcp_close_shutdown_fin+0x1c>
 80057be:	4b2e      	ldr	r3, [pc, #184]	; (8005878 <tcp_close_shutdown_fin+0xc8>)
 80057c0:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 80057c4:	492d      	ldr	r1, [pc, #180]	; (800587c <tcp_close_shutdown_fin+0xcc>)
 80057c6:	482e      	ldr	r0, [pc, #184]	; (8005880 <tcp_close_shutdown_fin+0xd0>)
 80057c8:	f007 fd4e 	bl	800d268 <iprintf>

  switch (pcb->state) {
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	7d1b      	ldrb	r3, [r3, #20]
 80057d0:	2b07      	cmp	r3, #7
 80057d2:	d020      	beq.n	8005816 <tcp_close_shutdown_fin+0x66>
 80057d4:	2b07      	cmp	r3, #7
 80057d6:	dc2b      	bgt.n	8005830 <tcp_close_shutdown_fin+0x80>
 80057d8:	2b03      	cmp	r3, #3
 80057da:	d002      	beq.n	80057e2 <tcp_close_shutdown_fin+0x32>
 80057dc:	2b04      	cmp	r3, #4
 80057de:	d00d      	beq.n	80057fc <tcp_close_shutdown_fin+0x4c>
 80057e0:	e026      	b.n	8005830 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f003 fab4 	bl	8008d50 <tcp_send_fin>
 80057e8:	4603      	mov	r3, r0
 80057ea:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80057ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d11f      	bne.n	8005834 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2205      	movs	r2, #5
 80057f8:	751a      	strb	r2, [r3, #20]
      }
      break;
 80057fa:	e01b      	b.n	8005834 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	f003 faa7 	bl	8008d50 <tcp_send_fin>
 8005802:	4603      	mov	r3, r0
 8005804:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8005806:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d114      	bne.n	8005838 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2205      	movs	r2, #5
 8005812:	751a      	strb	r2, [r3, #20]
      }
      break;
 8005814:	e010      	b.n	8005838 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f003 fa9a 	bl	8008d50 <tcp_send_fin>
 800581c:	4603      	mov	r3, r0
 800581e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8005820:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d109      	bne.n	800583c <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2209      	movs	r2, #9
 800582c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800582e:	e005      	b.n	800583c <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8005830:	2300      	movs	r3, #0
 8005832:	e01c      	b.n	800586e <tcp_close_shutdown_fin+0xbe>
      break;
 8005834:	bf00      	nop
 8005836:	e002      	b.n	800583e <tcp_close_shutdown_fin+0x8e>
      break;
 8005838:	bf00      	nop
 800583a:	e000      	b.n	800583e <tcp_close_shutdown_fin+0x8e>
      break;
 800583c:	bf00      	nop
  }

  if (err == ERR_OK) {
 800583e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d103      	bne.n	800584e <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f003 fbc0 	bl	8008fcc <tcp_output>
 800584c:	e00d      	b.n	800586a <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800584e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005852:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005856:	d108      	bne.n	800586a <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	8b5b      	ldrh	r3, [r3, #26]
 800585c:	f043 0308 	orr.w	r3, r3, #8
 8005860:	b29a      	uxth	r2, r3
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8005866:	2300      	movs	r3, #0
 8005868:	e001      	b.n	800586e <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800586a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800586e:	4618      	mov	r0, r3
 8005870:	3710      	adds	r7, #16
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}
 8005876:	bf00      	nop
 8005878:	0800f138 	.word	0x0800f138
 800587c:	0800f1e8 	.word	0x0800f1e8
 8005880:	0800f17c 	.word	0x0800f17c

08005884 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b082      	sub	sp, #8
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d109      	bne.n	80058a6 <tcp_close+0x22>
 8005892:	4b0f      	ldr	r3, [pc, #60]	; (80058d0 <tcp_close+0x4c>)
 8005894:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8005898:	490e      	ldr	r1, [pc, #56]	; (80058d4 <tcp_close+0x50>)
 800589a:	480f      	ldr	r0, [pc, #60]	; (80058d8 <tcp_close+0x54>)
 800589c:	f007 fce4 	bl	800d268 <iprintf>
 80058a0:	f06f 030f 	mvn.w	r3, #15
 80058a4:	e00f      	b.n	80058c6 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	7d1b      	ldrb	r3, [r3, #20]
 80058aa:	2b01      	cmp	r3, #1
 80058ac:	d006      	beq.n	80058bc <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	8b5b      	ldrh	r3, [r3, #26]
 80058b2:	f043 0310 	orr.w	r3, r3, #16
 80058b6:	b29a      	uxth	r2, r3
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 80058bc:	2101      	movs	r1, #1
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f7ff fe94 	bl	80055ec <tcp_close_shutdown>
 80058c4:	4603      	mov	r3, r0
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	3708      	adds	r7, #8
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}
 80058ce:	bf00      	nop
 80058d0:	0800f138 	.word	0x0800f138
 80058d4:	0800f248 	.word	0x0800f248
 80058d8:	0800f17c 	.word	0x0800f17c

080058dc <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b08e      	sub	sp, #56	; 0x38
 80058e0:	af04      	add	r7, sp, #16
 80058e2:	6078      	str	r0, [r7, #4]
 80058e4:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d107      	bne.n	80058fc <tcp_abandon+0x20>
 80058ec:	4b4d      	ldr	r3, [pc, #308]	; (8005a24 <tcp_abandon+0x148>)
 80058ee:	f240 223d 	movw	r2, #573	; 0x23d
 80058f2:	494d      	ldr	r1, [pc, #308]	; (8005a28 <tcp_abandon+0x14c>)
 80058f4:	484d      	ldr	r0, [pc, #308]	; (8005a2c <tcp_abandon+0x150>)
 80058f6:	f007 fcb7 	bl	800d268 <iprintf>
 80058fa:	e090      	b.n	8005a1e <tcp_abandon+0x142>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	7d1b      	ldrb	r3, [r3, #20]
 8005900:	2b01      	cmp	r3, #1
 8005902:	d106      	bne.n	8005912 <tcp_abandon+0x36>
 8005904:	4b47      	ldr	r3, [pc, #284]	; (8005a24 <tcp_abandon+0x148>)
 8005906:	f44f 7210 	mov.w	r2, #576	; 0x240
 800590a:	4949      	ldr	r1, [pc, #292]	; (8005a30 <tcp_abandon+0x154>)
 800590c:	4847      	ldr	r0, [pc, #284]	; (8005a2c <tcp_abandon+0x150>)
 800590e:	f007 fcab 	bl	800d268 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	7d1b      	ldrb	r3, [r3, #20]
 8005916:	2b0a      	cmp	r3, #10
 8005918:	d107      	bne.n	800592a <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800591a:	6879      	ldr	r1, [r7, #4]
 800591c:	4845      	ldr	r0, [pc, #276]	; (8005a34 <tcp_abandon+0x158>)
 800591e:	f000 ff71 	bl	8006804 <tcp_pcb_remove>
    tcp_free(pcb);
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f7ff fdb0 	bl	8005488 <tcp_free>
 8005928:	e079      	b.n	8005a1e <tcp_abandon+0x142>
  } else {
    int send_rst = 0;
 800592a:	2300      	movs	r3, #0
 800592c:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800592e:	2300      	movs	r3, #0
 8005930:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005936:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800593c:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005944:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	691b      	ldr	r3, [r3, #16]
 800594a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	7d1b      	ldrb	r3, [r3, #20]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d126      	bne.n	80059a2 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	8adb      	ldrh	r3, [r3, #22]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d02e      	beq.n	80059ba <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800595c:	4b36      	ldr	r3, [pc, #216]	; (8005a38 <tcp_abandon+0x15c>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	687a      	ldr	r2, [r7, #4]
 8005962:	429a      	cmp	r2, r3
 8005964:	d105      	bne.n	8005972 <tcp_abandon+0x96>
 8005966:	4b34      	ldr	r3, [pc, #208]	; (8005a38 <tcp_abandon+0x15c>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	68db      	ldr	r3, [r3, #12]
 800596c:	4a32      	ldr	r2, [pc, #200]	; (8005a38 <tcp_abandon+0x15c>)
 800596e:	6013      	str	r3, [r2, #0]
 8005970:	e013      	b.n	800599a <tcp_abandon+0xbe>
 8005972:	4b31      	ldr	r3, [pc, #196]	; (8005a38 <tcp_abandon+0x15c>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	61fb      	str	r3, [r7, #28]
 8005978:	e00c      	b.n	8005994 <tcp_abandon+0xb8>
 800597a:	69fb      	ldr	r3, [r7, #28]
 800597c:	68db      	ldr	r3, [r3, #12]
 800597e:	687a      	ldr	r2, [r7, #4]
 8005980:	429a      	cmp	r2, r3
 8005982:	d104      	bne.n	800598e <tcp_abandon+0xb2>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	68da      	ldr	r2, [r3, #12]
 8005988:	69fb      	ldr	r3, [r7, #28]
 800598a:	60da      	str	r2, [r3, #12]
 800598c:	e005      	b.n	800599a <tcp_abandon+0xbe>
 800598e:	69fb      	ldr	r3, [r7, #28]
 8005990:	68db      	ldr	r3, [r3, #12]
 8005992:	61fb      	str	r3, [r7, #28]
 8005994:	69fb      	ldr	r3, [r7, #28]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d1ef      	bne.n	800597a <tcp_abandon+0x9e>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2200      	movs	r2, #0
 800599e:	60da      	str	r2, [r3, #12]
 80059a0:	e00b      	b.n	80059ba <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	8adb      	ldrh	r3, [r3, #22]
 80059aa:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80059ac:	6879      	ldr	r1, [r7, #4]
 80059ae:	4823      	ldr	r0, [pc, #140]	; (8005a3c <tcp_abandon+0x160>)
 80059b0:	f000 ff28 	bl	8006804 <tcp_pcb_remove>
 80059b4:	4b22      	ldr	r3, [pc, #136]	; (8005a40 <tcp_abandon+0x164>)
 80059b6:	2201      	movs	r2, #1
 80059b8:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d004      	beq.n	80059cc <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059c6:	4618      	mov	r0, r3
 80059c8:	f000 fcfc 	bl	80063c4 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d004      	beq.n	80059de <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059d8:	4618      	mov	r0, r3
 80059da:	f000 fcf3 	bl	80063c4 <tcp_segs_free>
    if (pcb->ooseq != NULL) {
      tcp_segs_free(pcb->ooseq);
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 80059de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d00e      	beq.n	8005a02 <tcp_abandon+0x126>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80059e4:	6879      	ldr	r1, [r7, #4]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	3304      	adds	r3, #4
 80059ea:	687a      	ldr	r2, [r7, #4]
 80059ec:	8b12      	ldrh	r2, [r2, #24]
 80059ee:	9202      	str	r2, [sp, #8]
 80059f0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80059f2:	9201      	str	r2, [sp, #4]
 80059f4:	9300      	str	r3, [sp, #0]
 80059f6:	460b      	mov	r3, r1
 80059f8:	697a      	ldr	r2, [r7, #20]
 80059fa:	69b9      	ldr	r1, [r7, #24]
 80059fc:	6878      	ldr	r0, [r7, #4]
 80059fe:	f004 f899 	bl	8009b34 <tcp_rst>
    }
    last_state = pcb->state;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	7d1b      	ldrb	r3, [r3, #20]
 8005a06:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8005a08:	6878      	ldr	r0, [r7, #4]
 8005a0a:	f7ff fd3d 	bl	8005488 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d004      	beq.n	8005a1e <tcp_abandon+0x142>
 8005a14:	693b      	ldr	r3, [r7, #16]
 8005a16:	f06f 010c 	mvn.w	r1, #12
 8005a1a:	68f8      	ldr	r0, [r7, #12]
 8005a1c:	4798      	blx	r3
  }
}
 8005a1e:	3728      	adds	r7, #40	; 0x28
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}
 8005a24:	0800f138 	.word	0x0800f138
 8005a28:	0800f27c 	.word	0x0800f27c
 8005a2c:	0800f17c 	.word	0x0800f17c
 8005a30:	0800f298 	.word	0x0800f298
 8005a34:	20006884 	.word	0x20006884
 8005a38:	20006880 	.word	0x20006880
 8005a3c:	20006874 	.word	0x20006874
 8005a40:	20006870 	.word	0x20006870

08005a44 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b082      	sub	sp, #8
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8005a4c:	2101      	movs	r1, #1
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	f7ff ff44 	bl	80058dc <tcp_abandon>
}
 8005a54:	bf00      	nop
 8005a56:	3708      	adds	r7, #8
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd80      	pop	{r7, pc}

08005a5c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b084      	sub	sp, #16
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d106      	bne.n	8005a78 <tcp_update_rcv_ann_wnd+0x1c>
 8005a6a:	4b25      	ldr	r3, [pc, #148]	; (8005b00 <tcp_update_rcv_ann_wnd+0xa4>)
 8005a6c:	f240 32a6 	movw	r2, #934	; 0x3a6
 8005a70:	4924      	ldr	r1, [pc, #144]	; (8005b04 <tcp_update_rcv_ann_wnd+0xa8>)
 8005a72:	4825      	ldr	r0, [pc, #148]	; (8005b08 <tcp_update_rcv_ann_wnd+0xac>)
 8005a74:	f007 fbf8 	bl	800d268 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a7c:	687a      	ldr	r2, [r7, #4]
 8005a7e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8005a80:	4413      	add	r3, r2
 8005a82:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a88:	687a      	ldr	r2, [r7, #4]
 8005a8a:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8005a8c:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8005a90:	bf28      	it	cs
 8005a92:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8005a96:	b292      	uxth	r2, r2
 8005a98:	4413      	add	r3, r2
 8005a9a:	68fa      	ldr	r2, [r7, #12]
 8005a9c:	1ad3      	subs	r3, r2, r3
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	db08      	blt.n	8005ab4 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aae:	68fa      	ldr	r2, [r7, #12]
 8005ab0:	1ad3      	subs	r3, r2, r3
 8005ab2:	e020      	b.n	8005af6 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005abc:	1ad3      	subs	r3, r2, r3
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	dd03      	ble.n	8005aca <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005ac8:	e014      	b.n	8005af4 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad2:	1ad3      	subs	r3, r2, r3
 8005ad4:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005adc:	d306      	bcc.n	8005aec <tcp_update_rcv_ann_wnd+0x90>
 8005ade:	4b08      	ldr	r3, [pc, #32]	; (8005b00 <tcp_update_rcv_ann_wnd+0xa4>)
 8005ae0:	f240 32b6 	movw	r2, #950	; 0x3b6
 8005ae4:	4909      	ldr	r1, [pc, #36]	; (8005b0c <tcp_update_rcv_ann_wnd+0xb0>)
 8005ae6:	4808      	ldr	r0, [pc, #32]	; (8005b08 <tcp_update_rcv_ann_wnd+0xac>)
 8005ae8:	f007 fbbe 	bl	800d268 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	b29a      	uxth	r2, r3
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8005af4:	2300      	movs	r3, #0
  }
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	3710      	adds	r7, #16
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}
 8005afe:	bf00      	nop
 8005b00:	0800f138 	.word	0x0800f138
 8005b04:	0800f394 	.word	0x0800f394
 8005b08:	0800f17c 	.word	0x0800f17c
 8005b0c:	0800f3b8 	.word	0x0800f3b8

08005b10 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b084      	sub	sp, #16
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
 8005b18:	460b      	mov	r3, r1
 8005b1a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d107      	bne.n	8005b32 <tcp_recved+0x22>
 8005b22:	4b1f      	ldr	r3, [pc, #124]	; (8005ba0 <tcp_recved+0x90>)
 8005b24:	f240 32cf 	movw	r2, #975	; 0x3cf
 8005b28:	491e      	ldr	r1, [pc, #120]	; (8005ba4 <tcp_recved+0x94>)
 8005b2a:	481f      	ldr	r0, [pc, #124]	; (8005ba8 <tcp_recved+0x98>)
 8005b2c:	f007 fb9c 	bl	800d268 <iprintf>
 8005b30:	e032      	b.n	8005b98 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	7d1b      	ldrb	r3, [r3, #20]
 8005b36:	2b01      	cmp	r3, #1
 8005b38:	d106      	bne.n	8005b48 <tcp_recved+0x38>
 8005b3a:	4b19      	ldr	r3, [pc, #100]	; (8005ba0 <tcp_recved+0x90>)
 8005b3c:	f240 32d2 	movw	r2, #978	; 0x3d2
 8005b40:	491a      	ldr	r1, [pc, #104]	; (8005bac <tcp_recved+0x9c>)
 8005b42:	4819      	ldr	r0, [pc, #100]	; (8005ba8 <tcp_recved+0x98>)
 8005b44:	f007 fb90 	bl	800d268 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8005b4c:	887b      	ldrh	r3, [r7, #2]
 8005b4e:	4413      	add	r3, r2
 8005b50:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8005b52:	89fb      	ldrh	r3, [r7, #14]
 8005b54:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8005b58:	d804      	bhi.n	8005b64 <tcp_recved+0x54>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b5e:	89fa      	ldrh	r2, [r7, #14]
 8005b60:	429a      	cmp	r2, r3
 8005b62:	d204      	bcs.n	8005b6e <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8005b6a:	851a      	strh	r2, [r3, #40]	; 0x28
 8005b6c:	e002      	b.n	8005b74 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	89fa      	ldrh	r2, [r7, #14]
 8005b72:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	f7ff ff71 	bl	8005a5c <tcp_update_rcv_ann_wnd>
 8005b7a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8005b82:	d309      	bcc.n	8005b98 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	8b5b      	ldrh	r3, [r3, #26]
 8005b88:	f043 0302 	orr.w	r3, r3, #2
 8005b8c:	b29a      	uxth	r2, r3
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f003 fa1a 	bl	8008fcc <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8005b98:	3710      	adds	r7, #16
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}
 8005b9e:	bf00      	nop
 8005ba0:	0800f138 	.word	0x0800f138
 8005ba4:	0800f3d4 	.word	0x0800f3d4
 8005ba8:	0800f17c 	.word	0x0800f17c
 8005bac:	0800f3ec 	.word	0x0800f3ec

08005bb0 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8005bb0:	b5b0      	push	{r4, r5, r7, lr}
 8005bb2:	b090      	sub	sp, #64	; 0x40
 8005bb4:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8005bbc:	4b94      	ldr	r3, [pc, #592]	; (8005e10 <tcp_slowtmr+0x260>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	3301      	adds	r3, #1
 8005bc2:	4a93      	ldr	r2, [pc, #588]	; (8005e10 <tcp_slowtmr+0x260>)
 8005bc4:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8005bc6:	4b93      	ldr	r3, [pc, #588]	; (8005e14 <tcp_slowtmr+0x264>)
 8005bc8:	781b      	ldrb	r3, [r3, #0]
 8005bca:	3301      	adds	r3, #1
 8005bcc:	b2da      	uxtb	r2, r3
 8005bce:	4b91      	ldr	r3, [pc, #580]	; (8005e14 <tcp_slowtmr+0x264>)
 8005bd0:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8005bd6:	4b90      	ldr	r3, [pc, #576]	; (8005e18 <tcp_slowtmr+0x268>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8005bdc:	e289      	b.n	80060f2 <tcp_slowtmr+0x542>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8005bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005be0:	7d1b      	ldrb	r3, [r3, #20]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d106      	bne.n	8005bf4 <tcp_slowtmr+0x44>
 8005be6:	4b8d      	ldr	r3, [pc, #564]	; (8005e1c <tcp_slowtmr+0x26c>)
 8005be8:	f240 42be 	movw	r2, #1214	; 0x4be
 8005bec:	498c      	ldr	r1, [pc, #560]	; (8005e20 <tcp_slowtmr+0x270>)
 8005bee:	488d      	ldr	r0, [pc, #564]	; (8005e24 <tcp_slowtmr+0x274>)
 8005bf0:	f007 fb3a 	bl	800d268 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8005bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bf6:	7d1b      	ldrb	r3, [r3, #20]
 8005bf8:	2b01      	cmp	r3, #1
 8005bfa:	d106      	bne.n	8005c0a <tcp_slowtmr+0x5a>
 8005bfc:	4b87      	ldr	r3, [pc, #540]	; (8005e1c <tcp_slowtmr+0x26c>)
 8005bfe:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8005c02:	4989      	ldr	r1, [pc, #548]	; (8005e28 <tcp_slowtmr+0x278>)
 8005c04:	4887      	ldr	r0, [pc, #540]	; (8005e24 <tcp_slowtmr+0x274>)
 8005c06:	f007 fb2f 	bl	800d268 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8005c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c0c:	7d1b      	ldrb	r3, [r3, #20]
 8005c0e:	2b0a      	cmp	r3, #10
 8005c10:	d106      	bne.n	8005c20 <tcp_slowtmr+0x70>
 8005c12:	4b82      	ldr	r3, [pc, #520]	; (8005e1c <tcp_slowtmr+0x26c>)
 8005c14:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8005c18:	4984      	ldr	r1, [pc, #528]	; (8005e2c <tcp_slowtmr+0x27c>)
 8005c1a:	4882      	ldr	r0, [pc, #520]	; (8005e24 <tcp_slowtmr+0x274>)
 8005c1c:	f007 fb24 	bl	800d268 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8005c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c22:	7f9a      	ldrb	r2, [r3, #30]
 8005c24:	4b7b      	ldr	r3, [pc, #492]	; (8005e14 <tcp_slowtmr+0x264>)
 8005c26:	781b      	ldrb	r3, [r3, #0]
 8005c28:	429a      	cmp	r2, r3
 8005c2a:	d105      	bne.n	8005c38 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8005c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c2e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8005c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c32:	68db      	ldr	r3, [r3, #12]
 8005c34:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8005c36:	e25c      	b.n	80060f2 <tcp_slowtmr+0x542>
    }
    pcb->last_timer = tcp_timer_ctr;
 8005c38:	4b76      	ldr	r3, [pc, #472]	; (8005e14 <tcp_slowtmr+0x264>)
 8005c3a:	781a      	ldrb	r2, [r3, #0]
 8005c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c3e:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8005c40:	2300      	movs	r3, #0
 8005c42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8005c46:	2300      	movs	r3, #0
 8005c48:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8005c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c4e:	7d1b      	ldrb	r3, [r3, #20]
 8005c50:	2b02      	cmp	r3, #2
 8005c52:	d10a      	bne.n	8005c6a <tcp_slowtmr+0xba>
 8005c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c56:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005c5a:	2b05      	cmp	r3, #5
 8005c5c:	d905      	bls.n	8005c6a <tcp_slowtmr+0xba>
      ++pcb_remove;
 8005c5e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005c62:	3301      	adds	r3, #1
 8005c64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005c68:	e11e      	b.n	8005ea8 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8005c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c6c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005c70:	2b0b      	cmp	r3, #11
 8005c72:	d905      	bls.n	8005c80 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8005c74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005c78:	3301      	adds	r3, #1
 8005c7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005c7e:	e113      	b.n	8005ea8 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8005c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c82:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d075      	beq.n	8005d76 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8005c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d006      	beq.n	8005ca0 <tcp_slowtmr+0xf0>
 8005c92:	4b62      	ldr	r3, [pc, #392]	; (8005e1c <tcp_slowtmr+0x26c>)
 8005c94:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8005c98:	4965      	ldr	r1, [pc, #404]	; (8005e30 <tcp_slowtmr+0x280>)
 8005c9a:	4862      	ldr	r0, [pc, #392]	; (8005e24 <tcp_slowtmr+0x274>)
 8005c9c:	f007 fae4 	bl	800d268 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8005ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ca2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d106      	bne.n	8005cb6 <tcp_slowtmr+0x106>
 8005ca8:	4b5c      	ldr	r3, [pc, #368]	; (8005e1c <tcp_slowtmr+0x26c>)
 8005caa:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8005cae:	4961      	ldr	r1, [pc, #388]	; (8005e34 <tcp_slowtmr+0x284>)
 8005cb0:	485c      	ldr	r0, [pc, #368]	; (8005e24 <tcp_slowtmr+0x274>)
 8005cb2:	f007 fad9 	bl	800d268 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8005cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cb8:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8005cbc:	2b0b      	cmp	r3, #11
 8005cbe:	d905      	bls.n	8005ccc <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8005cc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005cc4:	3301      	adds	r3, #1
 8005cc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005cca:	e0ed      	b.n	8005ea8 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8005ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cce:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8005cd2:	3b01      	subs	r3, #1
 8005cd4:	4a58      	ldr	r2, [pc, #352]	; (8005e38 <tcp_slowtmr+0x288>)
 8005cd6:	5cd3      	ldrb	r3, [r2, r3]
 8005cd8:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8005cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cdc:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8005ce0:	7c7a      	ldrb	r2, [r7, #17]
 8005ce2:	429a      	cmp	r2, r3
 8005ce4:	d907      	bls.n	8005cf6 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8005ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ce8:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8005cec:	3301      	adds	r3, #1
 8005cee:	b2da      	uxtb	r2, r3
 8005cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cf2:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8005cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cf8:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8005cfc:	7c7a      	ldrb	r2, [r7, #17]
 8005cfe:	429a      	cmp	r2, r3
 8005d00:	f200 80d2 	bhi.w	8005ea8 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8005d04:	2301      	movs	r3, #1
 8005d06:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8005d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d0a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d108      	bne.n	8005d24 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8005d12:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005d14:	f004 f802 	bl	8009d1c <tcp_zero_window_probe>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d014      	beq.n	8005d48 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8005d1e:	2300      	movs	r3, #0
 8005d20:	623b      	str	r3, [r7, #32]
 8005d22:	e011      	b.n	8005d48 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8005d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d26:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005d2a:	4619      	mov	r1, r3
 8005d2c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005d2e:	f002 fec7 	bl	8008ac0 <tcp_split_unsent_seg>
 8005d32:	4603      	mov	r3, r0
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d107      	bne.n	8005d48 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8005d38:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005d3a:	f003 f947 	bl	8008fcc <tcp_output>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d101      	bne.n	8005d48 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8005d44:	2300      	movs	r3, #0
 8005d46:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8005d48:	6a3b      	ldr	r3, [r7, #32]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	f000 80ac 	beq.w	8005ea8 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8005d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d52:	2200      	movs	r2, #0
 8005d54:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8005d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d5a:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8005d5e:	2b06      	cmp	r3, #6
 8005d60:	f200 80a2 	bhi.w	8005ea8 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8005d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d66:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8005d6a:	3301      	adds	r3, #1
 8005d6c:	b2da      	uxtb	r2, r3
 8005d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d70:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 8005d74:	e098      	b.n	8005ea8 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8005d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d78:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	db0f      	blt.n	8005da0 <tcp_slowtmr+0x1f0>
 8005d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d82:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8005d86:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d008      	beq.n	8005da0 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8005d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d90:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8005d94:	b29b      	uxth	r3, r3
 8005d96:	3301      	adds	r3, #1
 8005d98:	b29b      	uxth	r3, r3
 8005d9a:	b21a      	sxth	r2, r3
 8005d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d9e:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8005da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005da2:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8005da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005da8:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8005dac:	429a      	cmp	r2, r3
 8005dae:	db7b      	blt.n	8005ea8 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8005db0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005db2:	f003 fbfd 	bl	80095b0 <tcp_rexmit_rto_prepare>
 8005db6:	4603      	mov	r3, r0
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d007      	beq.n	8005dcc <tcp_slowtmr+0x21c>
 8005dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d171      	bne.n	8005ea8 <tcp_slowtmr+0x2f8>
 8005dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d06d      	beq.n	8005ea8 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8005dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dce:	7d1b      	ldrb	r3, [r3, #20]
 8005dd0:	2b02      	cmp	r3, #2
 8005dd2:	d03a      	beq.n	8005e4a <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8005dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dd6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005dda:	2b0c      	cmp	r3, #12
 8005ddc:	bf28      	it	cs
 8005dde:	230c      	movcs	r3, #12
 8005de0:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8005de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005de4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8005de8:	10db      	asrs	r3, r3, #3
 8005dea:	b21b      	sxth	r3, r3
 8005dec:	461a      	mov	r2, r3
 8005dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005df0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8005df4:	4413      	add	r3, r2
 8005df6:	7efa      	ldrb	r2, [r7, #27]
 8005df8:	4910      	ldr	r1, [pc, #64]	; (8005e3c <tcp_slowtmr+0x28c>)
 8005dfa:	5c8a      	ldrb	r2, [r1, r2]
 8005dfc:	4093      	lsls	r3, r2
 8005dfe:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8005e06:	4293      	cmp	r3, r2
 8005e08:	dc1a      	bgt.n	8005e40 <tcp_slowtmr+0x290>
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	b21a      	sxth	r2, r3
 8005e0e:	e019      	b.n	8005e44 <tcp_slowtmr+0x294>
 8005e10:	20006878 	.word	0x20006878
 8005e14:	200000ca 	.word	0x200000ca
 8005e18:	20006874 	.word	0x20006874
 8005e1c:	0800f138 	.word	0x0800f138
 8005e20:	0800f47c 	.word	0x0800f47c
 8005e24:	0800f17c 	.word	0x0800f17c
 8005e28:	0800f4a8 	.word	0x0800f4a8
 8005e2c:	0800f4d4 	.word	0x0800f4d4
 8005e30:	0800f504 	.word	0x0800f504
 8005e34:	0800f538 	.word	0x0800f538
 8005e38:	0801103c 	.word	0x0801103c
 8005e3c:	0801102c 	.word	0x0801102c
 8005e40:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8005e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e46:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8005e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8005e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e52:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8005e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e58:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	bf28      	it	cs
 8005e60:	4613      	movcs	r3, r2
 8005e62:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8005e64:	8a7b      	ldrh	r3, [r7, #18]
 8005e66:	085b      	lsrs	r3, r3, #1
 8005e68:	b29a      	uxth	r2, r3
 8005e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e6c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8005e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e72:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8005e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e78:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005e7a:	005b      	lsls	r3, r3, #1
 8005e7c:	b29b      	uxth	r3, r3
 8005e7e:	429a      	cmp	r2, r3
 8005e80:	d206      	bcs.n	8005e90 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8005e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e84:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005e86:	005b      	lsls	r3, r3, #1
 8005e88:	b29a      	uxth	r2, r3
 8005e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e8c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8005e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e92:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8005e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e96:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8005e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8005ea2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005ea4:	f003 fbf4 	bl	8009690 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8005ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eaa:	7d1b      	ldrb	r3, [r3, #20]
 8005eac:	2b06      	cmp	r3, #6
 8005eae:	d111      	bne.n	8005ed4 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8005eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eb2:	8b5b      	ldrh	r3, [r3, #26]
 8005eb4:	f003 0310 	and.w	r3, r3, #16
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d00b      	beq.n	8005ed4 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005ebc:	4b92      	ldr	r3, [pc, #584]	; (8006108 <tcp_slowtmr+0x558>)
 8005ebe:	681a      	ldr	r2, [r3, #0]
 8005ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ec2:	6a1b      	ldr	r3, [r3, #32]
 8005ec4:	1ad3      	subs	r3, r2, r3
 8005ec6:	2b28      	cmp	r3, #40	; 0x28
 8005ec8:	d904      	bls.n	8005ed4 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8005eca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005ece:	3301      	adds	r3, #1
 8005ed0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8005ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ed6:	7a5b      	ldrb	r3, [r3, #9]
 8005ed8:	f003 0308 	and.w	r3, r3, #8
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d04c      	beq.n	8005f7a <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8005ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ee2:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8005ee4:	2b04      	cmp	r3, #4
 8005ee6:	d003      	beq.n	8005ef0 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8005ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eea:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8005eec:	2b07      	cmp	r3, #7
 8005eee:	d144      	bne.n	8005f7a <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005ef0:	4b85      	ldr	r3, [pc, #532]	; (8006108 <tcp_slowtmr+0x558>)
 8005ef2:	681a      	ldr	r2, [r3, #0]
 8005ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ef6:	6a1b      	ldr	r3, [r3, #32]
 8005ef8:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8005efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005efc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f00:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 8005f04:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8005f08:	4980      	ldr	r1, [pc, #512]	; (800610c <tcp_slowtmr+0x55c>)
 8005f0a:	fba1 1303 	umull	r1, r3, r1, r3
 8005f0e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005f10:	429a      	cmp	r2, r3
 8005f12:	d90a      	bls.n	8005f2a <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8005f14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005f18:	3301      	adds	r3, #1
 8005f1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8005f1e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005f22:	3301      	adds	r3, #1
 8005f24:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005f28:	e027      	b.n	8005f7a <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005f2a:	4b77      	ldr	r3, [pc, #476]	; (8006108 <tcp_slowtmr+0x558>)
 8005f2c:	681a      	ldr	r2, [r3, #0]
 8005f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f30:	6a1b      	ldr	r3, [r3, #32]
 8005f32:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8005f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f36:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8005f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f3c:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
 8005f40:	4618      	mov	r0, r3
 8005f42:	4b73      	ldr	r3, [pc, #460]	; (8006110 <tcp_slowtmr+0x560>)
 8005f44:	fb03 f300 	mul.w	r3, r3, r0
 8005f48:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8005f4a:	4970      	ldr	r1, [pc, #448]	; (800610c <tcp_slowtmr+0x55c>)
 8005f4c:	fba1 1303 	umull	r1, r3, r1, r3
 8005f50:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005f52:	429a      	cmp	r2, r3
 8005f54:	d911      	bls.n	8005f7a <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8005f56:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005f58:	f003 fea0 	bl	8009c9c <tcp_keepalive>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8005f62:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d107      	bne.n	8005f7a <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 8005f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f6c:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
 8005f70:	3301      	adds	r3, #1
 8005f72:	b2da      	uxtb	r2, r3
 8005f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f76:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
      tcp_free_ooseq(pcb);
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8005f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f7c:	7d1b      	ldrb	r3, [r3, #20]
 8005f7e:	2b03      	cmp	r3, #3
 8005f80:	d10b      	bne.n	8005f9a <tcp_slowtmr+0x3ea>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005f82:	4b61      	ldr	r3, [pc, #388]	; (8006108 <tcp_slowtmr+0x558>)
 8005f84:	681a      	ldr	r2, [r3, #0]
 8005f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f88:	6a1b      	ldr	r3, [r3, #32]
 8005f8a:	1ad3      	subs	r3, r2, r3
 8005f8c:	2b28      	cmp	r3, #40	; 0x28
 8005f8e:	d904      	bls.n	8005f9a <tcp_slowtmr+0x3ea>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8005f90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005f94:	3301      	adds	r3, #1
 8005f96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8005f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f9c:	7d1b      	ldrb	r3, [r3, #20]
 8005f9e:	2b09      	cmp	r3, #9
 8005fa0:	d10b      	bne.n	8005fba <tcp_slowtmr+0x40a>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8005fa2:	4b59      	ldr	r3, [pc, #356]	; (8006108 <tcp_slowtmr+0x558>)
 8005fa4:	681a      	ldr	r2, [r3, #0]
 8005fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fa8:	6a1b      	ldr	r3, [r3, #32]
 8005faa:	1ad3      	subs	r3, r2, r3
 8005fac:	2bf0      	cmp	r3, #240	; 0xf0
 8005fae:	d904      	bls.n	8005fba <tcp_slowtmr+0x40a>
        ++pcb_remove;
 8005fb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005fb4:	3301      	adds	r3, #1
 8005fb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8005fba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d060      	beq.n	8006084 <tcp_slowtmr+0x4d4>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8005fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005fc8:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8005fca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005fcc:	f000 fbd0 	bl	8006770 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8005fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d010      	beq.n	8005ff8 <tcp_slowtmr+0x448>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8005fd6:	4b4f      	ldr	r3, [pc, #316]	; (8006114 <tcp_slowtmr+0x564>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005fdc:	429a      	cmp	r2, r3
 8005fde:	d106      	bne.n	8005fee <tcp_slowtmr+0x43e>
 8005fe0:	4b4d      	ldr	r3, [pc, #308]	; (8006118 <tcp_slowtmr+0x568>)
 8005fe2:	f240 526d 	movw	r2, #1389	; 0x56d
 8005fe6:	494d      	ldr	r1, [pc, #308]	; (800611c <tcp_slowtmr+0x56c>)
 8005fe8:	484d      	ldr	r0, [pc, #308]	; (8006120 <tcp_slowtmr+0x570>)
 8005fea:	f007 f93d 	bl	800d268 <iprintf>
        prev->next = pcb->next;
 8005fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ff0:	68da      	ldr	r2, [r3, #12]
 8005ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ff4:	60da      	str	r2, [r3, #12]
 8005ff6:	e00f      	b.n	8006018 <tcp_slowtmr+0x468>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8005ff8:	4b46      	ldr	r3, [pc, #280]	; (8006114 <tcp_slowtmr+0x564>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ffe:	429a      	cmp	r2, r3
 8006000:	d006      	beq.n	8006010 <tcp_slowtmr+0x460>
 8006002:	4b45      	ldr	r3, [pc, #276]	; (8006118 <tcp_slowtmr+0x568>)
 8006004:	f240 5271 	movw	r2, #1393	; 0x571
 8006008:	4946      	ldr	r1, [pc, #280]	; (8006124 <tcp_slowtmr+0x574>)
 800600a:	4845      	ldr	r0, [pc, #276]	; (8006120 <tcp_slowtmr+0x570>)
 800600c:	f007 f92c 	bl	800d268 <iprintf>
        tcp_active_pcbs = pcb->next;
 8006010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006012:	68db      	ldr	r3, [r3, #12]
 8006014:	4a3f      	ldr	r2, [pc, #252]	; (8006114 <tcp_slowtmr+0x564>)
 8006016:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8006018:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800601c:	2b00      	cmp	r3, #0
 800601e:	d013      	beq.n	8006048 <tcp_slowtmr+0x498>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8006020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006022:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8006024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006026:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8006028:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800602a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800602c:	3304      	adds	r3, #4
 800602e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006030:	8ad2      	ldrh	r2, [r2, #22]
 8006032:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006034:	8b09      	ldrh	r1, [r1, #24]
 8006036:	9102      	str	r1, [sp, #8]
 8006038:	9201      	str	r2, [sp, #4]
 800603a:	9300      	str	r3, [sp, #0]
 800603c:	462b      	mov	r3, r5
 800603e:	4622      	mov	r2, r4
 8006040:	4601      	mov	r1, r0
 8006042:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006044:	f003 fd76 	bl	8009b34 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8006048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800604a:	691b      	ldr	r3, [r3, #16]
 800604c:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800604e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006050:	7d1b      	ldrb	r3, [r3, #20]
 8006052:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8006054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006056:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8006058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800605a:	68db      	ldr	r3, [r3, #12]
 800605c:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800605e:	6838      	ldr	r0, [r7, #0]
 8006060:	f7ff fa12 	bl	8005488 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8006064:	4b30      	ldr	r3, [pc, #192]	; (8006128 <tcp_slowtmr+0x578>)
 8006066:	2200      	movs	r2, #0
 8006068:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d004      	beq.n	800607a <tcp_slowtmr+0x4ca>
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	f06f 010c 	mvn.w	r1, #12
 8006076:	68b8      	ldr	r0, [r7, #8]
 8006078:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800607a:	4b2b      	ldr	r3, [pc, #172]	; (8006128 <tcp_slowtmr+0x578>)
 800607c:	781b      	ldrb	r3, [r3, #0]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d037      	beq.n	80060f2 <tcp_slowtmr+0x542>
        goto tcp_slowtmr_start;
 8006082:	e5a6      	b.n	8005bd2 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8006084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006086:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8006088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800608a:	68db      	ldr	r3, [r3, #12]
 800608c:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800608e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006090:	7f1b      	ldrb	r3, [r3, #28]
 8006092:	3301      	adds	r3, #1
 8006094:	b2da      	uxtb	r2, r3
 8006096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006098:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800609a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800609c:	7f1a      	ldrb	r2, [r3, #28]
 800609e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060a0:	7f5b      	ldrb	r3, [r3, #29]
 80060a2:	429a      	cmp	r2, r3
 80060a4:	d325      	bcc.n	80060f2 <tcp_slowtmr+0x542>
        prev->polltmr = 0;
 80060a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060a8:	2200      	movs	r2, #0
 80060aa:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 80060ac:	4b1e      	ldr	r3, [pc, #120]	; (8006128 <tcp_slowtmr+0x578>)
 80060ae:	2200      	movs	r2, #0
 80060b0:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80060b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d00b      	beq.n	80060d4 <tcp_slowtmr+0x524>
 80060bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060c4:	6912      	ldr	r2, [r2, #16]
 80060c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80060c8:	4610      	mov	r0, r2
 80060ca:	4798      	blx	r3
 80060cc:	4603      	mov	r3, r0
 80060ce:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80060d2:	e002      	b.n	80060da <tcp_slowtmr+0x52a>
 80060d4:	2300      	movs	r3, #0
 80060d6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 80060da:	4b13      	ldr	r3, [pc, #76]	; (8006128 <tcp_slowtmr+0x578>)
 80060dc:	781b      	ldrb	r3, [r3, #0]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d000      	beq.n	80060e4 <tcp_slowtmr+0x534>
          goto tcp_slowtmr_start;
 80060e2:	e576      	b.n	8005bd2 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 80060e4:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d102      	bne.n	80060f2 <tcp_slowtmr+0x542>
          tcp_output(prev);
 80060ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80060ee:	f002 ff6d 	bl	8008fcc <tcp_output>
  while (pcb != NULL) {
 80060f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	f47f ad72 	bne.w	8005bde <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 80060fa:	2300      	movs	r3, #0
 80060fc:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 80060fe:	4b0b      	ldr	r3, [pc, #44]	; (800612c <tcp_slowtmr+0x57c>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8006104:	e067      	b.n	80061d6 <tcp_slowtmr+0x626>
 8006106:	bf00      	nop
 8006108:	20006878 	.word	0x20006878
 800610c:	10624dd3 	.word	0x10624dd3
 8006110:	000124f8 	.word	0x000124f8
 8006114:	20006874 	.word	0x20006874
 8006118:	0800f138 	.word	0x0800f138
 800611c:	0800f570 	.word	0x0800f570
 8006120:	0800f17c 	.word	0x0800f17c
 8006124:	0800f59c 	.word	0x0800f59c
 8006128:	20006870 	.word	0x20006870
 800612c:	20006884 	.word	0x20006884
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8006130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006132:	7d1b      	ldrb	r3, [r3, #20]
 8006134:	2b0a      	cmp	r3, #10
 8006136:	d006      	beq.n	8006146 <tcp_slowtmr+0x596>
 8006138:	4b2b      	ldr	r3, [pc, #172]	; (80061e8 <tcp_slowtmr+0x638>)
 800613a:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800613e:	492b      	ldr	r1, [pc, #172]	; (80061ec <tcp_slowtmr+0x63c>)
 8006140:	482b      	ldr	r0, [pc, #172]	; (80061f0 <tcp_slowtmr+0x640>)
 8006142:	f007 f891 	bl	800d268 <iprintf>
    pcb_remove = 0;
 8006146:	2300      	movs	r3, #0
 8006148:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800614c:	4b29      	ldr	r3, [pc, #164]	; (80061f4 <tcp_slowtmr+0x644>)
 800614e:	681a      	ldr	r2, [r3, #0]
 8006150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006152:	6a1b      	ldr	r3, [r3, #32]
 8006154:	1ad3      	subs	r3, r2, r3
 8006156:	2bf0      	cmp	r3, #240	; 0xf0
 8006158:	d904      	bls.n	8006164 <tcp_slowtmr+0x5b4>
      ++pcb_remove;
 800615a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800615e:	3301      	adds	r3, #1
 8006160:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8006164:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006168:	2b00      	cmp	r3, #0
 800616a:	d02f      	beq.n	80061cc <tcp_slowtmr+0x61c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800616c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800616e:	f000 faff 	bl	8006770 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8006172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006174:	2b00      	cmp	r3, #0
 8006176:	d010      	beq.n	800619a <tcp_slowtmr+0x5ea>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8006178:	4b1f      	ldr	r3, [pc, #124]	; (80061f8 <tcp_slowtmr+0x648>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800617e:	429a      	cmp	r2, r3
 8006180:	d106      	bne.n	8006190 <tcp_slowtmr+0x5e0>
 8006182:	4b19      	ldr	r3, [pc, #100]	; (80061e8 <tcp_slowtmr+0x638>)
 8006184:	f240 52af 	movw	r2, #1455	; 0x5af
 8006188:	491c      	ldr	r1, [pc, #112]	; (80061fc <tcp_slowtmr+0x64c>)
 800618a:	4819      	ldr	r0, [pc, #100]	; (80061f0 <tcp_slowtmr+0x640>)
 800618c:	f007 f86c 	bl	800d268 <iprintf>
        prev->next = pcb->next;
 8006190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006192:	68da      	ldr	r2, [r3, #12]
 8006194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006196:	60da      	str	r2, [r3, #12]
 8006198:	e00f      	b.n	80061ba <tcp_slowtmr+0x60a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800619a:	4b17      	ldr	r3, [pc, #92]	; (80061f8 <tcp_slowtmr+0x648>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80061a0:	429a      	cmp	r2, r3
 80061a2:	d006      	beq.n	80061b2 <tcp_slowtmr+0x602>
 80061a4:	4b10      	ldr	r3, [pc, #64]	; (80061e8 <tcp_slowtmr+0x638>)
 80061a6:	f240 52b3 	movw	r2, #1459	; 0x5b3
 80061aa:	4915      	ldr	r1, [pc, #84]	; (8006200 <tcp_slowtmr+0x650>)
 80061ac:	4810      	ldr	r0, [pc, #64]	; (80061f0 <tcp_slowtmr+0x640>)
 80061ae:	f007 f85b 	bl	800d268 <iprintf>
        tcp_tw_pcbs = pcb->next;
 80061b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061b4:	68db      	ldr	r3, [r3, #12]
 80061b6:	4a10      	ldr	r2, [pc, #64]	; (80061f8 <tcp_slowtmr+0x648>)
 80061b8:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80061ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061bc:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 80061be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061c0:	68db      	ldr	r3, [r3, #12]
 80061c2:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80061c4:	69f8      	ldr	r0, [r7, #28]
 80061c6:	f7ff f95f 	bl	8005488 <tcp_free>
 80061ca:	e004      	b.n	80061d6 <tcp_slowtmr+0x626>
    } else {
      prev = pcb;
 80061cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061ce:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80061d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061d2:	68db      	ldr	r3, [r3, #12]
 80061d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80061d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d1a9      	bne.n	8006130 <tcp_slowtmr+0x580>
    }
  }
}
 80061dc:	bf00      	nop
 80061de:	bf00      	nop
 80061e0:	3730      	adds	r7, #48	; 0x30
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bdb0      	pop	{r4, r5, r7, pc}
 80061e6:	bf00      	nop
 80061e8:	0800f138 	.word	0x0800f138
 80061ec:	0800f5c8 	.word	0x0800f5c8
 80061f0:	0800f17c 	.word	0x0800f17c
 80061f4:	20006878 	.word	0x20006878
 80061f8:	20006884 	.word	0x20006884
 80061fc:	0800f5f8 	.word	0x0800f5f8
 8006200:	0800f620 	.word	0x0800f620

08006204 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b082      	sub	sp, #8
 8006208:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800620a:	4b2d      	ldr	r3, [pc, #180]	; (80062c0 <tcp_fasttmr+0xbc>)
 800620c:	781b      	ldrb	r3, [r3, #0]
 800620e:	3301      	adds	r3, #1
 8006210:	b2da      	uxtb	r2, r3
 8006212:	4b2b      	ldr	r3, [pc, #172]	; (80062c0 <tcp_fasttmr+0xbc>)
 8006214:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8006216:	4b2b      	ldr	r3, [pc, #172]	; (80062c4 <tcp_fasttmr+0xc0>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800621c:	e048      	b.n	80062b0 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	7f9a      	ldrb	r2, [r3, #30]
 8006222:	4b27      	ldr	r3, [pc, #156]	; (80062c0 <tcp_fasttmr+0xbc>)
 8006224:	781b      	ldrb	r3, [r3, #0]
 8006226:	429a      	cmp	r2, r3
 8006228:	d03f      	beq.n	80062aa <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800622a:	4b25      	ldr	r3, [pc, #148]	; (80062c0 <tcp_fasttmr+0xbc>)
 800622c:	781a      	ldrb	r2, [r3, #0]
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	8b5b      	ldrh	r3, [r3, #26]
 8006236:	f003 0301 	and.w	r3, r3, #1
 800623a:	2b00      	cmp	r3, #0
 800623c:	d010      	beq.n	8006260 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	8b5b      	ldrh	r3, [r3, #26]
 8006242:	f043 0302 	orr.w	r3, r3, #2
 8006246:	b29a      	uxth	r2, r3
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f002 febd 	bl	8008fcc <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	8b5b      	ldrh	r3, [r3, #26]
 8006256:	f023 0303 	bic.w	r3, r3, #3
 800625a:	b29a      	uxth	r2, r3
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	8b5b      	ldrh	r3, [r3, #26]
 8006264:	f003 0308 	and.w	r3, r3, #8
 8006268:	2b00      	cmp	r3, #0
 800626a:	d009      	beq.n	8006280 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	8b5b      	ldrh	r3, [r3, #26]
 8006270:	f023 0308 	bic.w	r3, r3, #8
 8006274:	b29a      	uxth	r2, r3
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f7ff fa98 	bl	80057b0 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	68db      	ldr	r3, [r3, #12]
 8006284:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800628a:	2b00      	cmp	r3, #0
 800628c:	d00a      	beq.n	80062a4 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800628e:	4b0e      	ldr	r3, [pc, #56]	; (80062c8 <tcp_fasttmr+0xc4>)
 8006290:	2200      	movs	r2, #0
 8006292:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	f000 f819 	bl	80062cc <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800629a:	4b0b      	ldr	r3, [pc, #44]	; (80062c8 <tcp_fasttmr+0xc4>)
 800629c:	781b      	ldrb	r3, [r3, #0]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d000      	beq.n	80062a4 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80062a2:	e7b8      	b.n	8006216 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	607b      	str	r3, [r7, #4]
 80062a8:	e002      	b.n	80062b0 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	68db      	ldr	r3, [r3, #12]
 80062ae:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d1b3      	bne.n	800621e <tcp_fasttmr+0x1a>
    }
  }
}
 80062b6:	bf00      	nop
 80062b8:	bf00      	nop
 80062ba:	3708      	adds	r7, #8
 80062bc:	46bd      	mov	sp, r7
 80062be:	bd80      	pop	{r7, pc}
 80062c0:	200000ca 	.word	0x200000ca
 80062c4:	20006874 	.word	0x20006874
 80062c8:	20006870 	.word	0x20006870

080062cc <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 80062cc:	b590      	push	{r4, r7, lr}
 80062ce:	b085      	sub	sp, #20
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d109      	bne.n	80062ee <tcp_process_refused_data+0x22>
 80062da:	4b37      	ldr	r3, [pc, #220]	; (80063b8 <tcp_process_refused_data+0xec>)
 80062dc:	f240 6209 	movw	r2, #1545	; 0x609
 80062e0:	4936      	ldr	r1, [pc, #216]	; (80063bc <tcp_process_refused_data+0xf0>)
 80062e2:	4837      	ldr	r0, [pc, #220]	; (80063c0 <tcp_process_refused_data+0xf4>)
 80062e4:	f006 ffc0 	bl	800d268 <iprintf>
 80062e8:	f06f 030f 	mvn.w	r3, #15
 80062ec:	e060      	b.n	80063b0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062f2:	7b5b      	ldrb	r3, [r3, #13]
 80062f4:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062fa:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2200      	movs	r2, #0
 8006300:	675a      	str	r2, [r3, #116]	; 0x74
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006308:	2b00      	cmp	r3, #0
 800630a:	d00b      	beq.n	8006324 <tcp_process_refused_data+0x58>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6918      	ldr	r0, [r3, #16]
 8006316:	2300      	movs	r3, #0
 8006318:	68ba      	ldr	r2, [r7, #8]
 800631a:	6879      	ldr	r1, [r7, #4]
 800631c:	47a0      	blx	r4
 800631e:	4603      	mov	r3, r0
 8006320:	73fb      	strb	r3, [r7, #15]
 8006322:	e007      	b.n	8006334 <tcp_process_refused_data+0x68>
 8006324:	2300      	movs	r3, #0
 8006326:	68ba      	ldr	r2, [r7, #8]
 8006328:	6879      	ldr	r1, [r7, #4]
 800632a:	2000      	movs	r0, #0
 800632c:	f000 f878 	bl	8006420 <tcp_recv_null>
 8006330:	4603      	mov	r3, r0
 8006332:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8006334:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d12a      	bne.n	8006392 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800633c:	7bbb      	ldrb	r3, [r7, #14]
 800633e:	f003 0320 	and.w	r3, r3, #32
 8006342:	2b00      	cmp	r3, #0
 8006344:	d033      	beq.n	80063ae <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800634a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800634e:	d005      	beq.n	800635c <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006354:	3301      	adds	r3, #1
 8006356:	b29a      	uxth	r2, r3
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006362:	2b00      	cmp	r3, #0
 8006364:	d00b      	beq.n	800637e <tcp_process_refused_data+0xb2>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6918      	ldr	r0, [r3, #16]
 8006370:	2300      	movs	r3, #0
 8006372:	2200      	movs	r2, #0
 8006374:	6879      	ldr	r1, [r7, #4]
 8006376:	47a0      	blx	r4
 8006378:	4603      	mov	r3, r0
 800637a:	73fb      	strb	r3, [r7, #15]
 800637c:	e001      	b.n	8006382 <tcp_process_refused_data+0xb6>
 800637e:	2300      	movs	r3, #0
 8006380:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8006382:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006386:	f113 0f0d 	cmn.w	r3, #13
 800638a:	d110      	bne.n	80063ae <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800638c:	f06f 030c 	mvn.w	r3, #12
 8006390:	e00e      	b.n	80063b0 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8006392:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006396:	f113 0f0d 	cmn.w	r3, #13
 800639a:	d102      	bne.n	80063a2 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800639c:	f06f 030c 	mvn.w	r3, #12
 80063a0:	e006      	b.n	80063b0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	68ba      	ldr	r2, [r7, #8]
 80063a6:	675a      	str	r2, [r3, #116]	; 0x74
      return ERR_INPROGRESS;
 80063a8:	f06f 0304 	mvn.w	r3, #4
 80063ac:	e000      	b.n	80063b0 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 80063ae:	2300      	movs	r3, #0
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	3714      	adds	r7, #20
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd90      	pop	{r4, r7, pc}
 80063b8:	0800f138 	.word	0x0800f138
 80063bc:	0800f648 	.word	0x0800f648
 80063c0:	0800f17c 	.word	0x0800f17c

080063c4 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b084      	sub	sp, #16
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80063cc:	e007      	b.n	80063de <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	f000 f80a 	bl	80063ee <tcp_seg_free>
    seg = next;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d1f4      	bne.n	80063ce <tcp_segs_free+0xa>
  }
}
 80063e4:	bf00      	nop
 80063e6:	bf00      	nop
 80063e8:	3710      	adds	r7, #16
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bd80      	pop	{r7, pc}

080063ee <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 80063ee:	b580      	push	{r7, lr}
 80063f0:	b082      	sub	sp, #8
 80063f2:	af00      	add	r7, sp, #0
 80063f4:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d00c      	beq.n	8006416 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	685b      	ldr	r3, [r3, #4]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d004      	beq.n	800640e <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	685b      	ldr	r3, [r3, #4]
 8006408:	4618      	mov	r0, r3
 800640a:	f7fe fcfb 	bl	8004e04 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800640e:	6879      	ldr	r1, [r7, #4]
 8006410:	2003      	movs	r0, #3
 8006412:	f7fd ff13 	bl	800423c <memp_free>
  }
}
 8006416:	bf00      	nop
 8006418:	3708      	adds	r7, #8
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}
	...

08006420 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b084      	sub	sp, #16
 8006424:	af00      	add	r7, sp, #0
 8006426:	60f8      	str	r0, [r7, #12]
 8006428:	60b9      	str	r1, [r7, #8]
 800642a:	607a      	str	r2, [r7, #4]
 800642c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d109      	bne.n	8006448 <tcp_recv_null+0x28>
 8006434:	4b12      	ldr	r3, [pc, #72]	; (8006480 <tcp_recv_null+0x60>)
 8006436:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800643a:	4912      	ldr	r1, [pc, #72]	; (8006484 <tcp_recv_null+0x64>)
 800643c:	4812      	ldr	r0, [pc, #72]	; (8006488 <tcp_recv_null+0x68>)
 800643e:	f006 ff13 	bl	800d268 <iprintf>
 8006442:	f06f 030f 	mvn.w	r3, #15
 8006446:	e016      	b.n	8006476 <tcp_recv_null+0x56>

  if (p != NULL) {
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d009      	beq.n	8006462 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	891b      	ldrh	r3, [r3, #8]
 8006452:	4619      	mov	r1, r3
 8006454:	68b8      	ldr	r0, [r7, #8]
 8006456:	f7ff fb5b 	bl	8005b10 <tcp_recved>
    pbuf_free(p);
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f7fe fcd2 	bl	8004e04 <pbuf_free>
 8006460:	e008      	b.n	8006474 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8006462:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d104      	bne.n	8006474 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800646a:	68b8      	ldr	r0, [r7, #8]
 800646c:	f7ff fa0a 	bl	8005884 <tcp_close>
 8006470:	4603      	mov	r3, r0
 8006472:	e000      	b.n	8006476 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8006474:	2300      	movs	r3, #0
}
 8006476:	4618      	mov	r0, r3
 8006478:	3710      	adds	r7, #16
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}
 800647e:	bf00      	nop
 8006480:	0800f138 	.word	0x0800f138
 8006484:	0800f68c 	.word	0x0800f68c
 8006488:	0800f17c 	.word	0x0800f17c

0800648c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b086      	sub	sp, #24
 8006490:	af00      	add	r7, sp, #0
 8006492:	4603      	mov	r3, r0
 8006494:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8006496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800649a:	2b00      	cmp	r3, #0
 800649c:	db01      	blt.n	80064a2 <tcp_kill_prio+0x16>
 800649e:	79fb      	ldrb	r3, [r7, #7]
 80064a0:	e000      	b.n	80064a4 <tcp_kill_prio+0x18>
 80064a2:	237f      	movs	r3, #127	; 0x7f
 80064a4:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 80064a6:	7afb      	ldrb	r3, [r7, #11]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d034      	beq.n	8006516 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 80064ac:	7afb      	ldrb	r3, [r7, #11]
 80064ae:	3b01      	subs	r3, #1
 80064b0:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 80064b2:	2300      	movs	r3, #0
 80064b4:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80064b6:	2300      	movs	r3, #0
 80064b8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80064ba:	4b19      	ldr	r3, [pc, #100]	; (8006520 <tcp_kill_prio+0x94>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	617b      	str	r3, [r7, #20]
 80064c0:	e01f      	b.n	8006502 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	7d5b      	ldrb	r3, [r3, #21]
 80064c6:	7afa      	ldrb	r2, [r7, #11]
 80064c8:	429a      	cmp	r2, r3
 80064ca:	d80c      	bhi.n	80064e6 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 80064d0:	7afa      	ldrb	r2, [r7, #11]
 80064d2:	429a      	cmp	r2, r3
 80064d4:	d112      	bne.n	80064fc <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80064d6:	4b13      	ldr	r3, [pc, #76]	; (8006524 <tcp_kill_prio+0x98>)
 80064d8:	681a      	ldr	r2, [r3, #0]
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	6a1b      	ldr	r3, [r3, #32]
 80064de:	1ad3      	subs	r3, r2, r3
 80064e0:	68fa      	ldr	r2, [r7, #12]
 80064e2:	429a      	cmp	r2, r3
 80064e4:	d80a      	bhi.n	80064fc <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 80064e6:	4b0f      	ldr	r3, [pc, #60]	; (8006524 <tcp_kill_prio+0x98>)
 80064e8:	681a      	ldr	r2, [r3, #0]
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	6a1b      	ldr	r3, [r3, #32]
 80064ee:	1ad3      	subs	r3, r2, r3
 80064f0:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 80064f6:	697b      	ldr	r3, [r7, #20]
 80064f8:	7d5b      	ldrb	r3, [r3, #21]
 80064fa:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80064fc:	697b      	ldr	r3, [r7, #20]
 80064fe:	68db      	ldr	r3, [r3, #12]
 8006500:	617b      	str	r3, [r7, #20]
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d1dc      	bne.n	80064c2 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8006508:	693b      	ldr	r3, [r7, #16]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d004      	beq.n	8006518 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800650e:	6938      	ldr	r0, [r7, #16]
 8006510:	f7ff fa98 	bl	8005a44 <tcp_abort>
 8006514:	e000      	b.n	8006518 <tcp_kill_prio+0x8c>
    return;
 8006516:	bf00      	nop
  }
}
 8006518:	3718      	adds	r7, #24
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}
 800651e:	bf00      	nop
 8006520:	20006874 	.word	0x20006874
 8006524:	20006878 	.word	0x20006878

08006528 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b086      	sub	sp, #24
 800652c:	af00      	add	r7, sp, #0
 800652e:	4603      	mov	r3, r0
 8006530:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8006532:	79fb      	ldrb	r3, [r7, #7]
 8006534:	2b08      	cmp	r3, #8
 8006536:	d009      	beq.n	800654c <tcp_kill_state+0x24>
 8006538:	79fb      	ldrb	r3, [r7, #7]
 800653a:	2b09      	cmp	r3, #9
 800653c:	d006      	beq.n	800654c <tcp_kill_state+0x24>
 800653e:	4b1a      	ldr	r3, [pc, #104]	; (80065a8 <tcp_kill_state+0x80>)
 8006540:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8006544:	4919      	ldr	r1, [pc, #100]	; (80065ac <tcp_kill_state+0x84>)
 8006546:	481a      	ldr	r0, [pc, #104]	; (80065b0 <tcp_kill_state+0x88>)
 8006548:	f006 fe8e 	bl	800d268 <iprintf>

  inactivity = 0;
 800654c:	2300      	movs	r3, #0
 800654e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8006550:	2300      	movs	r3, #0
 8006552:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006554:	4b17      	ldr	r3, [pc, #92]	; (80065b4 <tcp_kill_state+0x8c>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	617b      	str	r3, [r7, #20]
 800655a:	e017      	b.n	800658c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800655c:	697b      	ldr	r3, [r7, #20]
 800655e:	7d1b      	ldrb	r3, [r3, #20]
 8006560:	79fa      	ldrb	r2, [r7, #7]
 8006562:	429a      	cmp	r2, r3
 8006564:	d10f      	bne.n	8006586 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8006566:	4b14      	ldr	r3, [pc, #80]	; (80065b8 <tcp_kill_state+0x90>)
 8006568:	681a      	ldr	r2, [r3, #0]
 800656a:	697b      	ldr	r3, [r7, #20]
 800656c:	6a1b      	ldr	r3, [r3, #32]
 800656e:	1ad3      	subs	r3, r2, r3
 8006570:	68fa      	ldr	r2, [r7, #12]
 8006572:	429a      	cmp	r2, r3
 8006574:	d807      	bhi.n	8006586 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8006576:	4b10      	ldr	r3, [pc, #64]	; (80065b8 <tcp_kill_state+0x90>)
 8006578:	681a      	ldr	r2, [r3, #0]
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	6a1b      	ldr	r3, [r3, #32]
 800657e:	1ad3      	subs	r3, r2, r3
 8006580:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	68db      	ldr	r3, [r3, #12]
 800658a:	617b      	str	r3, [r7, #20]
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d1e4      	bne.n	800655c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d003      	beq.n	80065a0 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8006598:	2100      	movs	r1, #0
 800659a:	6938      	ldr	r0, [r7, #16]
 800659c:	f7ff f99e 	bl	80058dc <tcp_abandon>
  }
}
 80065a0:	bf00      	nop
 80065a2:	3718      	adds	r7, #24
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd80      	pop	{r7, pc}
 80065a8:	0800f138 	.word	0x0800f138
 80065ac:	0800f6a8 	.word	0x0800f6a8
 80065b0:	0800f17c 	.word	0x0800f17c
 80065b4:	20006874 	.word	0x20006874
 80065b8:	20006878 	.word	0x20006878

080065bc <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b084      	sub	sp, #16
 80065c0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 80065c2:	2300      	movs	r3, #0
 80065c4:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 80065c6:	2300      	movs	r3, #0
 80065c8:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80065ca:	4b12      	ldr	r3, [pc, #72]	; (8006614 <tcp_kill_timewait+0x58>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	60fb      	str	r3, [r7, #12]
 80065d0:	e012      	b.n	80065f8 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80065d2:	4b11      	ldr	r3, [pc, #68]	; (8006618 <tcp_kill_timewait+0x5c>)
 80065d4:	681a      	ldr	r2, [r3, #0]
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	6a1b      	ldr	r3, [r3, #32]
 80065da:	1ad3      	subs	r3, r2, r3
 80065dc:	687a      	ldr	r2, [r7, #4]
 80065de:	429a      	cmp	r2, r3
 80065e0:	d807      	bhi.n	80065f2 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 80065e2:	4b0d      	ldr	r3, [pc, #52]	; (8006618 <tcp_kill_timewait+0x5c>)
 80065e4:	681a      	ldr	r2, [r3, #0]
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	6a1b      	ldr	r3, [r3, #32]
 80065ea:	1ad3      	subs	r3, r2, r3
 80065ec:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	68db      	ldr	r3, [r3, #12]
 80065f6:	60fb      	str	r3, [r7, #12]
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d1e9      	bne.n	80065d2 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d002      	beq.n	800660a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8006604:	68b8      	ldr	r0, [r7, #8]
 8006606:	f7ff fa1d 	bl	8005a44 <tcp_abort>
  }
}
 800660a:	bf00      	nop
 800660c:	3710      	adds	r7, #16
 800660e:	46bd      	mov	sp, r7
 8006610:	bd80      	pop	{r7, pc}
 8006612:	bf00      	nop
 8006614:	20006884 	.word	0x20006884
 8006618:	20006878 	.word	0x20006878

0800661c <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b082      	sub	sp, #8
 8006620:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8006622:	4b10      	ldr	r3, [pc, #64]	; (8006664 <tcp_handle_closepend+0x48>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8006628:	e014      	b.n	8006654 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	68db      	ldr	r3, [r3, #12]
 800662e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	8b5b      	ldrh	r3, [r3, #26]
 8006634:	f003 0308 	and.w	r3, r3, #8
 8006638:	2b00      	cmp	r3, #0
 800663a:	d009      	beq.n	8006650 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	8b5b      	ldrh	r3, [r3, #26]
 8006640:	f023 0308 	bic.w	r3, r3, #8
 8006644:	b29a      	uxth	r2, r3
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	f7ff f8b0 	bl	80057b0 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d1e7      	bne.n	800662a <tcp_handle_closepend+0xe>
  }
}
 800665a:	bf00      	nop
 800665c:	bf00      	nop
 800665e:	3708      	adds	r7, #8
 8006660:	46bd      	mov	sp, r7
 8006662:	bd80      	pop	{r7, pc}
 8006664:	20006874 	.word	0x20006874

08006668 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b084      	sub	sp, #16
 800666c:	af00      	add	r7, sp, #0
 800666e:	4603      	mov	r3, r0
 8006670:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006672:	2001      	movs	r0, #1
 8006674:	f7fd fd96 	bl	80041a4 <memp_malloc>
 8006678:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d126      	bne.n	80066ce <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8006680:	f7ff ffcc 	bl	800661c <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8006684:	f7ff ff9a 	bl	80065bc <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006688:	2001      	movs	r0, #1
 800668a:	f7fd fd8b 	bl	80041a4 <memp_malloc>
 800668e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d11b      	bne.n	80066ce <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8006696:	2009      	movs	r0, #9
 8006698:	f7ff ff46 	bl	8006528 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800669c:	2001      	movs	r0, #1
 800669e:	f7fd fd81 	bl	80041a4 <memp_malloc>
 80066a2:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d111      	bne.n	80066ce <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 80066aa:	2008      	movs	r0, #8
 80066ac:	f7ff ff3c 	bl	8006528 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80066b0:	2001      	movs	r0, #1
 80066b2:	f7fd fd77 	bl	80041a4 <memp_malloc>
 80066b6:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d107      	bne.n	80066ce <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 80066be:	79fb      	ldrb	r3, [r7, #7]
 80066c0:	4618      	mov	r0, r3
 80066c2:	f7ff fee3 	bl	800648c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80066c6:	2001      	movs	r0, #1
 80066c8:	f7fd fd6c 	bl	80041a4 <memp_malloc>
 80066cc:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d03f      	beq.n	8006754 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80066d4:	2298      	movs	r2, #152	; 0x98
 80066d6:	2100      	movs	r1, #0
 80066d8:	68f8      	ldr	r0, [r7, #12]
 80066da:	f006 fdbd 	bl	800d258 <memset>
    pcb->prio = prio;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	79fa      	ldrb	r2, [r7, #7]
 80066e2:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80066ea:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80066f4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	22ff      	movs	r2, #255	; 0xff
 8006702:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	f44f 7206 	mov.w	r2, #536	; 0x218
 800670a:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	2206      	movs	r2, #6
 8006710:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	2206      	movs	r2, #6
 8006718:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006720:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	2201      	movs	r2, #1
 8006726:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800672a:	4b0d      	ldr	r3, [pc, #52]	; (8006760 <tcp_alloc+0xf8>)
 800672c:	681a      	ldr	r2, [r3, #0]
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8006732:	4b0c      	ldr	r3, [pc, #48]	; (8006764 <tcp_alloc+0xfc>)
 8006734:	781a      	ldrb	r2, [r3, #0]
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8006740:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	4a08      	ldr	r2, [pc, #32]	; (8006768 <tcp_alloc+0x100>)
 8006748:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	4a07      	ldr	r2, [pc, #28]	; (800676c <tcp_alloc+0x104>)
 8006750:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8006754:	68fb      	ldr	r3, [r7, #12]
}
 8006756:	4618      	mov	r0, r3
 8006758:	3710      	adds	r7, #16
 800675a:	46bd      	mov	sp, r7
 800675c:	bd80      	pop	{r7, pc}
 800675e:	bf00      	nop
 8006760:	20006878 	.word	0x20006878
 8006764:	200000ca 	.word	0x200000ca
 8006768:	08006421 	.word	0x08006421
 800676c:	006ddd00 	.word	0x006ddd00

08006770 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b082      	sub	sp, #8
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d107      	bne.n	800678e <tcp_pcb_purge+0x1e>
 800677e:	4b1e      	ldr	r3, [pc, #120]	; (80067f8 <tcp_pcb_purge+0x88>)
 8006780:	f640 0251 	movw	r2, #2129	; 0x851
 8006784:	491d      	ldr	r1, [pc, #116]	; (80067fc <tcp_pcb_purge+0x8c>)
 8006786:	481e      	ldr	r0, [pc, #120]	; (8006800 <tcp_pcb_purge+0x90>)
 8006788:	f006 fd6e 	bl	800d268 <iprintf>
 800678c:	e030      	b.n	80067f0 <tcp_pcb_purge+0x80>

  if (pcb->state != CLOSED &&
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	7d1b      	ldrb	r3, [r3, #20]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d02c      	beq.n	80067f0 <tcp_pcb_purge+0x80>
      pcb->state != TIME_WAIT &&
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800679a:	2b0a      	cmp	r3, #10
 800679c:	d028      	beq.n	80067f0 <tcp_pcb_purge+0x80>
      pcb->state != LISTEN) {
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 80067a2:	2b01      	cmp	r3, #1
 80067a4:	d024      	beq.n	80067f0 <tcp_pcb_purge+0x80>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d007      	beq.n	80067be <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067b2:	4618      	mov	r0, r3
 80067b4:	f7fe fb26 	bl	8004e04 <pbuf_free>
      pcb->refused_data = NULL;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2200      	movs	r2, #0
 80067bc:	675a      	str	r2, [r3, #116]	; 0x74
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80067c4:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067ca:	4618      	mov	r0, r3
 80067cc:	f7ff fdfa 	bl	80063c4 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067d4:	4618      	mov	r0, r3
 80067d6:	f7ff fdf5 	bl	80063c4 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2200      	movs	r2, #0
 80067de:	66da      	str	r2, [r3, #108]	; 0x6c
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2200      	movs	r2, #0
 80067ec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 80067f0:	3708      	adds	r7, #8
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bd80      	pop	{r7, pc}
 80067f6:	bf00      	nop
 80067f8:	0800f138 	.word	0x0800f138
 80067fc:	0800f768 	.word	0x0800f768
 8006800:	0800f17c 	.word	0x0800f17c

08006804 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b084      	sub	sp, #16
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
 800680c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d106      	bne.n	8006822 <tcp_pcb_remove+0x1e>
 8006814:	4b38      	ldr	r3, [pc, #224]	; (80068f8 <tcp_pcb_remove+0xf4>)
 8006816:	f640 0283 	movw	r2, #2179	; 0x883
 800681a:	4938      	ldr	r1, [pc, #224]	; (80068fc <tcp_pcb_remove+0xf8>)
 800681c:	4838      	ldr	r0, [pc, #224]	; (8006900 <tcp_pcb_remove+0xfc>)
 800681e:	f006 fd23 	bl	800d268 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d106      	bne.n	8006836 <tcp_pcb_remove+0x32>
 8006828:	4b33      	ldr	r3, [pc, #204]	; (80068f8 <tcp_pcb_remove+0xf4>)
 800682a:	f640 0284 	movw	r2, #2180	; 0x884
 800682e:	4935      	ldr	r1, [pc, #212]	; (8006904 <tcp_pcb_remove+0x100>)
 8006830:	4833      	ldr	r0, [pc, #204]	; (8006900 <tcp_pcb_remove+0xfc>)
 8006832:	f006 fd19 	bl	800d268 <iprintf>

  TCP_RMV(pcblist, pcb);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	683a      	ldr	r2, [r7, #0]
 800683c:	429a      	cmp	r2, r3
 800683e:	d105      	bne.n	800684c <tcp_pcb_remove+0x48>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	68da      	ldr	r2, [r3, #12]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	601a      	str	r2, [r3, #0]
 800684a:	e013      	b.n	8006874 <tcp_pcb_remove+0x70>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	60fb      	str	r3, [r7, #12]
 8006852:	e00c      	b.n	800686e <tcp_pcb_remove+0x6a>
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	68db      	ldr	r3, [r3, #12]
 8006858:	683a      	ldr	r2, [r7, #0]
 800685a:	429a      	cmp	r2, r3
 800685c:	d104      	bne.n	8006868 <tcp_pcb_remove+0x64>
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	68da      	ldr	r2, [r3, #12]
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	60da      	str	r2, [r3, #12]
 8006866:	e005      	b.n	8006874 <tcp_pcb_remove+0x70>
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	68db      	ldr	r3, [r3, #12]
 800686c:	60fb      	str	r3, [r7, #12]
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d1ef      	bne.n	8006854 <tcp_pcb_remove+0x50>
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	2200      	movs	r2, #0
 8006878:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800687a:	6838      	ldr	r0, [r7, #0]
 800687c:	f7ff ff78 	bl	8006770 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	7d1b      	ldrb	r3, [r3, #20]
 8006884:	2b0a      	cmp	r3, #10
 8006886:	d013      	beq.n	80068b0 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800688c:	2b01      	cmp	r3, #1
 800688e:	d00f      	beq.n	80068b0 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	8b5b      	ldrh	r3, [r3, #26]
 8006894:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8006898:	2b00      	cmp	r3, #0
 800689a:	d009      	beq.n	80068b0 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	8b5b      	ldrh	r3, [r3, #26]
 80068a0:	f043 0302 	orr.w	r3, r3, #2
 80068a4:	b29a      	uxth	r2, r3
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80068aa:	6838      	ldr	r0, [r7, #0]
 80068ac:	f002 fb8e 	bl	8008fcc <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	7d1b      	ldrb	r3, [r3, #20]
 80068b4:	2b01      	cmp	r3, #1
 80068b6:	d015      	beq.n	80068e4 <tcp_pcb_remove+0xe0>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d006      	beq.n	80068ce <tcp_pcb_remove+0xca>
 80068c0:	4b0d      	ldr	r3, [pc, #52]	; (80068f8 <tcp_pcb_remove+0xf4>)
 80068c2:	f640 0293 	movw	r2, #2195	; 0x893
 80068c6:	4910      	ldr	r1, [pc, #64]	; (8006908 <tcp_pcb_remove+0x104>)
 80068c8:	480d      	ldr	r0, [pc, #52]	; (8006900 <tcp_pcb_remove+0xfc>)
 80068ca:	f006 fccd 	bl	800d268 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d006      	beq.n	80068e4 <tcp_pcb_remove+0xe0>
 80068d6:	4b08      	ldr	r3, [pc, #32]	; (80068f8 <tcp_pcb_remove+0xf4>)
 80068d8:	f640 0294 	movw	r2, #2196	; 0x894
 80068dc:	490b      	ldr	r1, [pc, #44]	; (800690c <tcp_pcb_remove+0x108>)
 80068de:	4808      	ldr	r0, [pc, #32]	; (8006900 <tcp_pcb_remove+0xfc>)
 80068e0:	f006 fcc2 	bl	800d268 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	2200      	movs	r2, #0
 80068e8:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	2200      	movs	r2, #0
 80068ee:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 80068f0:	bf00      	nop
 80068f2:	3710      	adds	r7, #16
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bd80      	pop	{r7, pc}
 80068f8:	0800f138 	.word	0x0800f138
 80068fc:	0800f784 	.word	0x0800f784
 8006900:	0800f17c 	.word	0x0800f17c
 8006904:	0800f7a0 	.word	0x0800f7a0
 8006908:	0800f7c0 	.word	0x0800f7c0
 800690c:	0800f7d8 	.word	0x0800f7d8

08006910 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b082      	sub	sp, #8
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d106      	bne.n	800692c <tcp_next_iss+0x1c>
 800691e:	4b0a      	ldr	r3, [pc, #40]	; (8006948 <tcp_next_iss+0x38>)
 8006920:	f640 02af 	movw	r2, #2223	; 0x8af
 8006924:	4909      	ldr	r1, [pc, #36]	; (800694c <tcp_next_iss+0x3c>)
 8006926:	480a      	ldr	r0, [pc, #40]	; (8006950 <tcp_next_iss+0x40>)
 8006928:	f006 fc9e 	bl	800d268 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800692c:	4b09      	ldr	r3, [pc, #36]	; (8006954 <tcp_next_iss+0x44>)
 800692e:	681a      	ldr	r2, [r3, #0]
 8006930:	4b09      	ldr	r3, [pc, #36]	; (8006958 <tcp_next_iss+0x48>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4413      	add	r3, r2
 8006936:	4a07      	ldr	r2, [pc, #28]	; (8006954 <tcp_next_iss+0x44>)
 8006938:	6013      	str	r3, [r2, #0]
  return iss;
 800693a:	4b06      	ldr	r3, [pc, #24]	; (8006954 <tcp_next_iss+0x44>)
 800693c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800693e:	4618      	mov	r0, r3
 8006940:	3708      	adds	r7, #8
 8006942:	46bd      	mov	sp, r7
 8006944:	bd80      	pop	{r7, pc}
 8006946:	bf00      	nop
 8006948:	0800f138 	.word	0x0800f138
 800694c:	0800f7f4 	.word	0x0800f7f4
 8006950:	0800f17c 	.word	0x0800f17c
 8006954:	2000000c 	.word	0x2000000c
 8006958:	20006878 	.word	0x20006878

0800695c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b086      	sub	sp, #24
 8006960:	af00      	add	r7, sp, #0
 8006962:	4603      	mov	r3, r0
 8006964:	60b9      	str	r1, [r7, #8]
 8006966:	607a      	str	r2, [r7, #4]
 8006968:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d106      	bne.n	800697e <tcp_eff_send_mss_netif+0x22>
 8006970:	4b14      	ldr	r3, [pc, #80]	; (80069c4 <tcp_eff_send_mss_netif+0x68>)
 8006972:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8006976:	4914      	ldr	r1, [pc, #80]	; (80069c8 <tcp_eff_send_mss_netif+0x6c>)
 8006978:	4814      	ldr	r0, [pc, #80]	; (80069cc <tcp_eff_send_mss_netif+0x70>)
 800697a:	f006 fc75 	bl	800d268 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d101      	bne.n	8006988 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8006984:	89fb      	ldrh	r3, [r7, #14]
 8006986:	e019      	b.n	80069bc <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8006988:	68bb      	ldr	r3, [r7, #8]
 800698a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800698c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800698e:	8afb      	ldrh	r3, [r7, #22]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d012      	beq.n	80069ba <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8006994:	2328      	movs	r3, #40	; 0x28
 8006996:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8006998:	8afa      	ldrh	r2, [r7, #22]
 800699a:	8abb      	ldrh	r3, [r7, #20]
 800699c:	429a      	cmp	r2, r3
 800699e:	d904      	bls.n	80069aa <tcp_eff_send_mss_netif+0x4e>
 80069a0:	8afa      	ldrh	r2, [r7, #22]
 80069a2:	8abb      	ldrh	r3, [r7, #20]
 80069a4:	1ad3      	subs	r3, r2, r3
 80069a6:	b29b      	uxth	r3, r3
 80069a8:	e000      	b.n	80069ac <tcp_eff_send_mss_netif+0x50>
 80069aa:	2300      	movs	r3, #0
 80069ac:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80069ae:	8a7a      	ldrh	r2, [r7, #18]
 80069b0:	89fb      	ldrh	r3, [r7, #14]
 80069b2:	4293      	cmp	r3, r2
 80069b4:	bf28      	it	cs
 80069b6:	4613      	movcs	r3, r2
 80069b8:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 80069ba:	89fb      	ldrh	r3, [r7, #14]
}
 80069bc:	4618      	mov	r0, r3
 80069be:	3718      	adds	r7, #24
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bd80      	pop	{r7, pc}
 80069c4:	0800f138 	.word	0x0800f138
 80069c8:	0800f810 	.word	0x0800f810
 80069cc:	0800f17c 	.word	0x0800f17c

080069d0 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b084      	sub	sp, #16
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
 80069d8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d119      	bne.n	8006a18 <tcp_netif_ip_addr_changed_pcblist+0x48>
 80069e4:	4b10      	ldr	r3, [pc, #64]	; (8006a28 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 80069e6:	f44f 6210 	mov.w	r2, #2304	; 0x900
 80069ea:	4910      	ldr	r1, [pc, #64]	; (8006a2c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 80069ec:	4810      	ldr	r0, [pc, #64]	; (8006a30 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 80069ee:	f006 fc3b 	bl	800d268 <iprintf>

  while (pcb != NULL) {
 80069f2:	e011      	b.n	8006a18 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681a      	ldr	r2, [r3, #0]
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	429a      	cmp	r2, r3
 80069fe:	d108      	bne.n	8006a12 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	68db      	ldr	r3, [r3, #12]
 8006a04:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8006a06:	68f8      	ldr	r0, [r7, #12]
 8006a08:	f7ff f81c 	bl	8005a44 <tcp_abort>
      pcb = next;
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	60fb      	str	r3, [r7, #12]
 8006a10:	e002      	b.n	8006a18 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	68db      	ldr	r3, [r3, #12]
 8006a16:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d1ea      	bne.n	80069f4 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8006a1e:	bf00      	nop
 8006a20:	bf00      	nop
 8006a22:	3710      	adds	r7, #16
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bd80      	pop	{r7, pc}
 8006a28:	0800f138 	.word	0x0800f138
 8006a2c:	0800f838 	.word	0x0800f838
 8006a30:	0800f17c 	.word	0x0800f17c

08006a34 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b084      	sub	sp, #16
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
 8006a3c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d02a      	beq.n	8006a9a <tcp_netif_ip_addr_changed+0x66>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d026      	beq.n	8006a9a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8006a4c:	4b15      	ldr	r3, [pc, #84]	; (8006aa4 <tcp_netif_ip_addr_changed+0x70>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4619      	mov	r1, r3
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f7ff ffbc 	bl	80069d0 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8006a58:	4b13      	ldr	r3, [pc, #76]	; (8006aa8 <tcp_netif_ip_addr_changed+0x74>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4619      	mov	r1, r3
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f7ff ffb6 	bl	80069d0 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d017      	beq.n	8006a9a <tcp_netif_ip_addr_changed+0x66>
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d013      	beq.n	8006a9a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8006a72:	4b0e      	ldr	r3, [pc, #56]	; (8006aac <tcp_netif_ip_addr_changed+0x78>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	60fb      	str	r3, [r7, #12]
 8006a78:	e00c      	b.n	8006a94 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681a      	ldr	r2, [r3, #0]
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	429a      	cmp	r2, r3
 8006a84:	d103      	bne.n	8006a8e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	681a      	ldr	r2, [r3, #0]
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	68db      	ldr	r3, [r3, #12]
 8006a92:	60fb      	str	r3, [r7, #12]
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d1ef      	bne.n	8006a7a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8006a9a:	bf00      	nop
 8006a9c:	3710      	adds	r7, #16
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bd80      	pop	{r7, pc}
 8006aa2:	bf00      	nop
 8006aa4:	20006874 	.word	0x20006874
 8006aa8:	20006880 	.word	0x20006880
 8006aac:	2000687c 	.word	0x2000687c

08006ab0 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8006ab0:	b590      	push	{r4, r7, lr}
 8006ab2:	b08d      	sub	sp, #52	; 0x34
 8006ab4:	af04      	add	r7, sp, #16
 8006ab6:	6078      	str	r0, [r7, #4]
 8006ab8:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d105      	bne.n	8006acc <tcp_input+0x1c>
 8006ac0:	4b9b      	ldr	r3, [pc, #620]	; (8006d30 <tcp_input+0x280>)
 8006ac2:	2283      	movs	r2, #131	; 0x83
 8006ac4:	499b      	ldr	r1, [pc, #620]	; (8006d34 <tcp_input+0x284>)
 8006ac6:	489c      	ldr	r0, [pc, #624]	; (8006d38 <tcp_input+0x288>)
 8006ac8:	f006 fbce 	bl	800d268 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	685b      	ldr	r3, [r3, #4]
 8006ad0:	4a9a      	ldr	r2, [pc, #616]	; (8006d3c <tcp_input+0x28c>)
 8006ad2:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	895b      	ldrh	r3, [r3, #10]
 8006ad8:	2b13      	cmp	r3, #19
 8006ada:	f240 83c2 	bls.w	8007262 <tcp_input+0x7b2>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8006ade:	4b98      	ldr	r3, [pc, #608]	; (8006d40 <tcp_input+0x290>)
 8006ae0:	695b      	ldr	r3, [r3, #20]
 8006ae2:	4a97      	ldr	r2, [pc, #604]	; (8006d40 <tcp_input+0x290>)
 8006ae4:	6812      	ldr	r2, [r2, #0]
 8006ae6:	4611      	mov	r1, r2
 8006ae8:	4618      	mov	r0, r3
 8006aea:	f005 fc0b 	bl	800c304 <ip4_addr_isbroadcast_u32>
 8006aee:	4603      	mov	r3, r0
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	f040 83b8 	bne.w	8007266 <tcp_input+0x7b6>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8006af6:	4b92      	ldr	r3, [pc, #584]	; (8006d40 <tcp_input+0x290>)
 8006af8:	695b      	ldr	r3, [r3, #20]
 8006afa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8006afe:	2be0      	cmp	r3, #224	; 0xe0
 8006b00:	f000 83b1 	beq.w	8007266 <tcp_input+0x7b6>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8006b04:	4b8d      	ldr	r3, [pc, #564]	; (8006d3c <tcp_input+0x28c>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	899b      	ldrh	r3, [r3, #12]
 8006b0a:	b29b      	uxth	r3, r3
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	f7fc fef3 	bl	80038f8 <lwip_htons>
 8006b12:	4603      	mov	r3, r0
 8006b14:	0b1b      	lsrs	r3, r3, #12
 8006b16:	b29b      	uxth	r3, r3
 8006b18:	b2db      	uxtb	r3, r3
 8006b1a:	009b      	lsls	r3, r3, #2
 8006b1c:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8006b1e:	7cbb      	ldrb	r3, [r7, #18]
 8006b20:	2b13      	cmp	r3, #19
 8006b22:	f240 83a2 	bls.w	800726a <tcp_input+0x7ba>
 8006b26:	7cbb      	ldrb	r3, [r7, #18]
 8006b28:	b29a      	uxth	r2, r3
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	891b      	ldrh	r3, [r3, #8]
 8006b2e:	429a      	cmp	r2, r3
 8006b30:	f200 839b 	bhi.w	800726a <tcp_input+0x7ba>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8006b34:	7cbb      	ldrb	r3, [r7, #18]
 8006b36:	b29b      	uxth	r3, r3
 8006b38:	3b14      	subs	r3, #20
 8006b3a:	b29a      	uxth	r2, r3
 8006b3c:	4b81      	ldr	r3, [pc, #516]	; (8006d44 <tcp_input+0x294>)
 8006b3e:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8006b40:	4b81      	ldr	r3, [pc, #516]	; (8006d48 <tcp_input+0x298>)
 8006b42:	2200      	movs	r2, #0
 8006b44:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	895a      	ldrh	r2, [r3, #10]
 8006b4a:	7cbb      	ldrb	r3, [r7, #18]
 8006b4c:	b29b      	uxth	r3, r3
 8006b4e:	429a      	cmp	r2, r3
 8006b50:	d309      	bcc.n	8006b66 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8006b52:	4b7c      	ldr	r3, [pc, #496]	; (8006d44 <tcp_input+0x294>)
 8006b54:	881a      	ldrh	r2, [r3, #0]
 8006b56:	4b7d      	ldr	r3, [pc, #500]	; (8006d4c <tcp_input+0x29c>)
 8006b58:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8006b5a:	7cbb      	ldrb	r3, [r7, #18]
 8006b5c:	4619      	mov	r1, r3
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f7fe f8ca 	bl	8004cf8 <pbuf_remove_header>
 8006b64:	e04e      	b.n	8006c04 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d105      	bne.n	8006b7a <tcp_input+0xca>
 8006b6e:	4b70      	ldr	r3, [pc, #448]	; (8006d30 <tcp_input+0x280>)
 8006b70:	22c2      	movs	r2, #194	; 0xc2
 8006b72:	4977      	ldr	r1, [pc, #476]	; (8006d50 <tcp_input+0x2a0>)
 8006b74:	4870      	ldr	r0, [pc, #448]	; (8006d38 <tcp_input+0x288>)
 8006b76:	f006 fb77 	bl	800d268 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8006b7a:	2114      	movs	r1, #20
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	f7fe f8bb 	bl	8004cf8 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	895a      	ldrh	r2, [r3, #10]
 8006b86:	4b71      	ldr	r3, [pc, #452]	; (8006d4c <tcp_input+0x29c>)
 8006b88:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8006b8a:	4b6e      	ldr	r3, [pc, #440]	; (8006d44 <tcp_input+0x294>)
 8006b8c:	881a      	ldrh	r2, [r3, #0]
 8006b8e:	4b6f      	ldr	r3, [pc, #444]	; (8006d4c <tcp_input+0x29c>)
 8006b90:	881b      	ldrh	r3, [r3, #0]
 8006b92:	1ad3      	subs	r3, r2, r3
 8006b94:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8006b96:	4b6d      	ldr	r3, [pc, #436]	; (8006d4c <tcp_input+0x29c>)
 8006b98:	881b      	ldrh	r3, [r3, #0]
 8006b9a:	4619      	mov	r1, r3
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	f7fe f8ab 	bl	8004cf8 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	895b      	ldrh	r3, [r3, #10]
 8006ba8:	8a3a      	ldrh	r2, [r7, #16]
 8006baa:	429a      	cmp	r2, r3
 8006bac:	f200 835f 	bhi.w	800726e <tcp_input+0x7be>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	4a64      	ldr	r2, [pc, #400]	; (8006d48 <tcp_input+0x298>)
 8006bb8:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	8a3a      	ldrh	r2, [r7, #16]
 8006bc0:	4611      	mov	r1, r2
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	f7fe f898 	bl	8004cf8 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	891a      	ldrh	r2, [r3, #8]
 8006bcc:	8a3b      	ldrh	r3, [r7, #16]
 8006bce:	1ad3      	subs	r3, r2, r3
 8006bd0:	b29a      	uxth	r2, r3
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	895b      	ldrh	r3, [r3, #10]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d005      	beq.n	8006bea <tcp_input+0x13a>
 8006bde:	4b54      	ldr	r3, [pc, #336]	; (8006d30 <tcp_input+0x280>)
 8006be0:	22df      	movs	r2, #223	; 0xdf
 8006be2:	495c      	ldr	r1, [pc, #368]	; (8006d54 <tcp_input+0x2a4>)
 8006be4:	4854      	ldr	r0, [pc, #336]	; (8006d38 <tcp_input+0x288>)
 8006be6:	f006 fb3f 	bl	800d268 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	891a      	ldrh	r2, [r3, #8]
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	891b      	ldrh	r3, [r3, #8]
 8006bf4:	429a      	cmp	r2, r3
 8006bf6:	d005      	beq.n	8006c04 <tcp_input+0x154>
 8006bf8:	4b4d      	ldr	r3, [pc, #308]	; (8006d30 <tcp_input+0x280>)
 8006bfa:	22e0      	movs	r2, #224	; 0xe0
 8006bfc:	4956      	ldr	r1, [pc, #344]	; (8006d58 <tcp_input+0x2a8>)
 8006bfe:	484e      	ldr	r0, [pc, #312]	; (8006d38 <tcp_input+0x288>)
 8006c00:	f006 fb32 	bl	800d268 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8006c04:	4b4d      	ldr	r3, [pc, #308]	; (8006d3c <tcp_input+0x28c>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	881b      	ldrh	r3, [r3, #0]
 8006c0a:	b29b      	uxth	r3, r3
 8006c0c:	4a4b      	ldr	r2, [pc, #300]	; (8006d3c <tcp_input+0x28c>)
 8006c0e:	6814      	ldr	r4, [r2, #0]
 8006c10:	4618      	mov	r0, r3
 8006c12:	f7fc fe71 	bl	80038f8 <lwip_htons>
 8006c16:	4603      	mov	r3, r0
 8006c18:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8006c1a:	4b48      	ldr	r3, [pc, #288]	; (8006d3c <tcp_input+0x28c>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	885b      	ldrh	r3, [r3, #2]
 8006c20:	b29b      	uxth	r3, r3
 8006c22:	4a46      	ldr	r2, [pc, #280]	; (8006d3c <tcp_input+0x28c>)
 8006c24:	6814      	ldr	r4, [r2, #0]
 8006c26:	4618      	mov	r0, r3
 8006c28:	f7fc fe66 	bl	80038f8 <lwip_htons>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8006c30:	4b42      	ldr	r3, [pc, #264]	; (8006d3c <tcp_input+0x28c>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	685b      	ldr	r3, [r3, #4]
 8006c36:	4a41      	ldr	r2, [pc, #260]	; (8006d3c <tcp_input+0x28c>)
 8006c38:	6814      	ldr	r4, [r2, #0]
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	f7fc fe71 	bl	8003922 <lwip_htonl>
 8006c40:	4603      	mov	r3, r0
 8006c42:	6063      	str	r3, [r4, #4]
 8006c44:	6863      	ldr	r3, [r4, #4]
 8006c46:	4a45      	ldr	r2, [pc, #276]	; (8006d5c <tcp_input+0x2ac>)
 8006c48:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8006c4a:	4b3c      	ldr	r3, [pc, #240]	; (8006d3c <tcp_input+0x28c>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	689b      	ldr	r3, [r3, #8]
 8006c50:	4a3a      	ldr	r2, [pc, #232]	; (8006d3c <tcp_input+0x28c>)
 8006c52:	6814      	ldr	r4, [r2, #0]
 8006c54:	4618      	mov	r0, r3
 8006c56:	f7fc fe64 	bl	8003922 <lwip_htonl>
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	60a3      	str	r3, [r4, #8]
 8006c5e:	68a3      	ldr	r3, [r4, #8]
 8006c60:	4a3f      	ldr	r2, [pc, #252]	; (8006d60 <tcp_input+0x2b0>)
 8006c62:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8006c64:	4b35      	ldr	r3, [pc, #212]	; (8006d3c <tcp_input+0x28c>)
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	89db      	ldrh	r3, [r3, #14]
 8006c6a:	b29b      	uxth	r3, r3
 8006c6c:	4a33      	ldr	r2, [pc, #204]	; (8006d3c <tcp_input+0x28c>)
 8006c6e:	6814      	ldr	r4, [r2, #0]
 8006c70:	4618      	mov	r0, r3
 8006c72:	f7fc fe41 	bl	80038f8 <lwip_htons>
 8006c76:	4603      	mov	r3, r0
 8006c78:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8006c7a:	4b30      	ldr	r3, [pc, #192]	; (8006d3c <tcp_input+0x28c>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	899b      	ldrh	r3, [r3, #12]
 8006c80:	b29b      	uxth	r3, r3
 8006c82:	4618      	mov	r0, r3
 8006c84:	f7fc fe38 	bl	80038f8 <lwip_htons>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	b2db      	uxtb	r3, r3
 8006c8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006c90:	b2da      	uxtb	r2, r3
 8006c92:	4b34      	ldr	r3, [pc, #208]	; (8006d64 <tcp_input+0x2b4>)
 8006c94:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	891a      	ldrh	r2, [r3, #8]
 8006c9a:	4b33      	ldr	r3, [pc, #204]	; (8006d68 <tcp_input+0x2b8>)
 8006c9c:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8006c9e:	4b31      	ldr	r3, [pc, #196]	; (8006d64 <tcp_input+0x2b4>)
 8006ca0:	781b      	ldrb	r3, [r3, #0]
 8006ca2:	f003 0303 	and.w	r3, r3, #3
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d00c      	beq.n	8006cc4 <tcp_input+0x214>
    tcplen++;
 8006caa:	4b2f      	ldr	r3, [pc, #188]	; (8006d68 <tcp_input+0x2b8>)
 8006cac:	881b      	ldrh	r3, [r3, #0]
 8006cae:	3301      	adds	r3, #1
 8006cb0:	b29a      	uxth	r2, r3
 8006cb2:	4b2d      	ldr	r3, [pc, #180]	; (8006d68 <tcp_input+0x2b8>)
 8006cb4:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	891a      	ldrh	r2, [r3, #8]
 8006cba:	4b2b      	ldr	r3, [pc, #172]	; (8006d68 <tcp_input+0x2b8>)
 8006cbc:	881b      	ldrh	r3, [r3, #0]
 8006cbe:	429a      	cmp	r2, r3
 8006cc0:	f200 82d7 	bhi.w	8007272 <tcp_input+0x7c2>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006cc8:	4b28      	ldr	r3, [pc, #160]	; (8006d6c <tcp_input+0x2bc>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	61fb      	str	r3, [r7, #28]
 8006cce:	e09d      	b.n	8006e0c <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8006cd0:	69fb      	ldr	r3, [r7, #28]
 8006cd2:	7d1b      	ldrb	r3, [r3, #20]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d105      	bne.n	8006ce4 <tcp_input+0x234>
 8006cd8:	4b15      	ldr	r3, [pc, #84]	; (8006d30 <tcp_input+0x280>)
 8006cda:	22fb      	movs	r2, #251	; 0xfb
 8006cdc:	4924      	ldr	r1, [pc, #144]	; (8006d70 <tcp_input+0x2c0>)
 8006cde:	4816      	ldr	r0, [pc, #88]	; (8006d38 <tcp_input+0x288>)
 8006ce0:	f006 fac2 	bl	800d268 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8006ce4:	69fb      	ldr	r3, [r7, #28]
 8006ce6:	7d1b      	ldrb	r3, [r3, #20]
 8006ce8:	2b0a      	cmp	r3, #10
 8006cea:	d105      	bne.n	8006cf8 <tcp_input+0x248>
 8006cec:	4b10      	ldr	r3, [pc, #64]	; (8006d30 <tcp_input+0x280>)
 8006cee:	22fc      	movs	r2, #252	; 0xfc
 8006cf0:	4920      	ldr	r1, [pc, #128]	; (8006d74 <tcp_input+0x2c4>)
 8006cf2:	4811      	ldr	r0, [pc, #68]	; (8006d38 <tcp_input+0x288>)
 8006cf4:	f006 fab8 	bl	800d268 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8006cf8:	69fb      	ldr	r3, [r7, #28]
 8006cfa:	7d1b      	ldrb	r3, [r3, #20]
 8006cfc:	2b01      	cmp	r3, #1
 8006cfe:	d105      	bne.n	8006d0c <tcp_input+0x25c>
 8006d00:	4b0b      	ldr	r3, [pc, #44]	; (8006d30 <tcp_input+0x280>)
 8006d02:	22fd      	movs	r2, #253	; 0xfd
 8006d04:	491c      	ldr	r1, [pc, #112]	; (8006d78 <tcp_input+0x2c8>)
 8006d06:	480c      	ldr	r0, [pc, #48]	; (8006d38 <tcp_input+0x288>)
 8006d08:	f006 faae 	bl	800d268 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8006d0c:	69fb      	ldr	r3, [r7, #28]
 8006d0e:	7a1b      	ldrb	r3, [r3, #8]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d033      	beq.n	8006d7c <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8006d14:	69fb      	ldr	r3, [r7, #28]
 8006d16:	7a1a      	ldrb	r2, [r3, #8]
 8006d18:	4b09      	ldr	r3, [pc, #36]	; (8006d40 <tcp_input+0x290>)
 8006d1a:	685b      	ldr	r3, [r3, #4]
 8006d1c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006d20:	3301      	adds	r3, #1
 8006d22:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8006d24:	429a      	cmp	r2, r3
 8006d26:	d029      	beq.n	8006d7c <tcp_input+0x2cc>
      prev = pcb;
 8006d28:	69fb      	ldr	r3, [r7, #28]
 8006d2a:	61bb      	str	r3, [r7, #24]
      continue;
 8006d2c:	e06b      	b.n	8006e06 <tcp_input+0x356>
 8006d2e:	bf00      	nop
 8006d30:	0800f86c 	.word	0x0800f86c
 8006d34:	0800f8a0 	.word	0x0800f8a0
 8006d38:	0800f8b8 	.word	0x0800f8b8
 8006d3c:	200000dc 	.word	0x200000dc
 8006d40:	20003348 	.word	0x20003348
 8006d44:	200000e0 	.word	0x200000e0
 8006d48:	200000e4 	.word	0x200000e4
 8006d4c:	200000e2 	.word	0x200000e2
 8006d50:	0800f8e0 	.word	0x0800f8e0
 8006d54:	0800f8f0 	.word	0x0800f8f0
 8006d58:	0800f8fc 	.word	0x0800f8fc
 8006d5c:	200000ec 	.word	0x200000ec
 8006d60:	200000f0 	.word	0x200000f0
 8006d64:	200000f8 	.word	0x200000f8
 8006d68:	200000f6 	.word	0x200000f6
 8006d6c:	20006874 	.word	0x20006874
 8006d70:	0800f91c 	.word	0x0800f91c
 8006d74:	0800f944 	.word	0x0800f944
 8006d78:	0800f970 	.word	0x0800f970
    }

    if (pcb->remote_port == tcphdr->src &&
 8006d7c:	69fb      	ldr	r3, [r7, #28]
 8006d7e:	8b1a      	ldrh	r2, [r3, #24]
 8006d80:	4b94      	ldr	r3, [pc, #592]	; (8006fd4 <tcp_input+0x524>)
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	881b      	ldrh	r3, [r3, #0]
 8006d86:	b29b      	uxth	r3, r3
 8006d88:	429a      	cmp	r2, r3
 8006d8a:	d13a      	bne.n	8006e02 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8006d8c:	69fb      	ldr	r3, [r7, #28]
 8006d8e:	8ada      	ldrh	r2, [r3, #22]
 8006d90:	4b90      	ldr	r3, [pc, #576]	; (8006fd4 <tcp_input+0x524>)
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	885b      	ldrh	r3, [r3, #2]
 8006d96:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8006d98:	429a      	cmp	r2, r3
 8006d9a:	d132      	bne.n	8006e02 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8006d9c:	69fb      	ldr	r3, [r7, #28]
 8006d9e:	685a      	ldr	r2, [r3, #4]
 8006da0:	4b8d      	ldr	r3, [pc, #564]	; (8006fd8 <tcp_input+0x528>)
 8006da2:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8006da4:	429a      	cmp	r2, r3
 8006da6:	d12c      	bne.n	8006e02 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8006da8:	69fb      	ldr	r3, [r7, #28]
 8006daa:	681a      	ldr	r2, [r3, #0]
 8006dac:	4b8a      	ldr	r3, [pc, #552]	; (8006fd8 <tcp_input+0x528>)
 8006dae:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8006db0:	429a      	cmp	r2, r3
 8006db2:	d126      	bne.n	8006e02 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8006db4:	69fb      	ldr	r3, [r7, #28]
 8006db6:	68db      	ldr	r3, [r3, #12]
 8006db8:	69fa      	ldr	r2, [r7, #28]
 8006dba:	429a      	cmp	r2, r3
 8006dbc:	d106      	bne.n	8006dcc <tcp_input+0x31c>
 8006dbe:	4b87      	ldr	r3, [pc, #540]	; (8006fdc <tcp_input+0x52c>)
 8006dc0:	f240 120d 	movw	r2, #269	; 0x10d
 8006dc4:	4986      	ldr	r1, [pc, #536]	; (8006fe0 <tcp_input+0x530>)
 8006dc6:	4887      	ldr	r0, [pc, #540]	; (8006fe4 <tcp_input+0x534>)
 8006dc8:	f006 fa4e 	bl	800d268 <iprintf>
      if (prev != NULL) {
 8006dcc:	69bb      	ldr	r3, [r7, #24]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d00a      	beq.n	8006de8 <tcp_input+0x338>
        prev->next = pcb->next;
 8006dd2:	69fb      	ldr	r3, [r7, #28]
 8006dd4:	68da      	ldr	r2, [r3, #12]
 8006dd6:	69bb      	ldr	r3, [r7, #24]
 8006dd8:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8006dda:	4b83      	ldr	r3, [pc, #524]	; (8006fe8 <tcp_input+0x538>)
 8006ddc:	681a      	ldr	r2, [r3, #0]
 8006dde:	69fb      	ldr	r3, [r7, #28]
 8006de0:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8006de2:	4a81      	ldr	r2, [pc, #516]	; (8006fe8 <tcp_input+0x538>)
 8006de4:	69fb      	ldr	r3, [r7, #28]
 8006de6:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8006de8:	69fb      	ldr	r3, [r7, #28]
 8006dea:	68db      	ldr	r3, [r3, #12]
 8006dec:	69fa      	ldr	r2, [r7, #28]
 8006dee:	429a      	cmp	r2, r3
 8006df0:	d111      	bne.n	8006e16 <tcp_input+0x366>
 8006df2:	4b7a      	ldr	r3, [pc, #488]	; (8006fdc <tcp_input+0x52c>)
 8006df4:	f240 1215 	movw	r2, #277	; 0x115
 8006df8:	497c      	ldr	r1, [pc, #496]	; (8006fec <tcp_input+0x53c>)
 8006dfa:	487a      	ldr	r0, [pc, #488]	; (8006fe4 <tcp_input+0x534>)
 8006dfc:	f006 fa34 	bl	800d268 <iprintf>
      break;
 8006e00:	e009      	b.n	8006e16 <tcp_input+0x366>
    }
    prev = pcb;
 8006e02:	69fb      	ldr	r3, [r7, #28]
 8006e04:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006e06:	69fb      	ldr	r3, [r7, #28]
 8006e08:	68db      	ldr	r3, [r3, #12]
 8006e0a:	61fb      	str	r3, [r7, #28]
 8006e0c:	69fb      	ldr	r3, [r7, #28]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	f47f af5e 	bne.w	8006cd0 <tcp_input+0x220>
 8006e14:	e000      	b.n	8006e18 <tcp_input+0x368>
      break;
 8006e16:	bf00      	nop
  }

  if (pcb == NULL) {
 8006e18:	69fb      	ldr	r3, [r7, #28]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	f040 8095 	bne.w	8006f4a <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8006e20:	4b73      	ldr	r3, [pc, #460]	; (8006ff0 <tcp_input+0x540>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	61fb      	str	r3, [r7, #28]
 8006e26:	e03f      	b.n	8006ea8 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8006e28:	69fb      	ldr	r3, [r7, #28]
 8006e2a:	7d1b      	ldrb	r3, [r3, #20]
 8006e2c:	2b0a      	cmp	r3, #10
 8006e2e:	d006      	beq.n	8006e3e <tcp_input+0x38e>
 8006e30:	4b6a      	ldr	r3, [pc, #424]	; (8006fdc <tcp_input+0x52c>)
 8006e32:	f240 121f 	movw	r2, #287	; 0x11f
 8006e36:	496f      	ldr	r1, [pc, #444]	; (8006ff4 <tcp_input+0x544>)
 8006e38:	486a      	ldr	r0, [pc, #424]	; (8006fe4 <tcp_input+0x534>)
 8006e3a:	f006 fa15 	bl	800d268 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8006e3e:	69fb      	ldr	r3, [r7, #28]
 8006e40:	7a1b      	ldrb	r3, [r3, #8]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d009      	beq.n	8006e5a <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8006e46:	69fb      	ldr	r3, [r7, #28]
 8006e48:	7a1a      	ldrb	r2, [r3, #8]
 8006e4a:	4b63      	ldr	r3, [pc, #396]	; (8006fd8 <tcp_input+0x528>)
 8006e4c:	685b      	ldr	r3, [r3, #4]
 8006e4e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006e52:	3301      	adds	r3, #1
 8006e54:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8006e56:	429a      	cmp	r2, r3
 8006e58:	d122      	bne.n	8006ea0 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8006e5a:	69fb      	ldr	r3, [r7, #28]
 8006e5c:	8b1a      	ldrh	r2, [r3, #24]
 8006e5e:	4b5d      	ldr	r3, [pc, #372]	; (8006fd4 <tcp_input+0x524>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	881b      	ldrh	r3, [r3, #0]
 8006e64:	b29b      	uxth	r3, r3
 8006e66:	429a      	cmp	r2, r3
 8006e68:	d11b      	bne.n	8006ea2 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8006e6a:	69fb      	ldr	r3, [r7, #28]
 8006e6c:	8ada      	ldrh	r2, [r3, #22]
 8006e6e:	4b59      	ldr	r3, [pc, #356]	; (8006fd4 <tcp_input+0x524>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	885b      	ldrh	r3, [r3, #2]
 8006e74:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8006e76:	429a      	cmp	r2, r3
 8006e78:	d113      	bne.n	8006ea2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8006e7a:	69fb      	ldr	r3, [r7, #28]
 8006e7c:	685a      	ldr	r2, [r3, #4]
 8006e7e:	4b56      	ldr	r3, [pc, #344]	; (8006fd8 <tcp_input+0x528>)
 8006e80:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8006e82:	429a      	cmp	r2, r3
 8006e84:	d10d      	bne.n	8006ea2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8006e86:	69fb      	ldr	r3, [r7, #28]
 8006e88:	681a      	ldr	r2, [r3, #0]
 8006e8a:	4b53      	ldr	r3, [pc, #332]	; (8006fd8 <tcp_input+0x528>)
 8006e8c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8006e8e:	429a      	cmp	r2, r3
 8006e90:	d107      	bne.n	8006ea2 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8006e92:	69f8      	ldr	r0, [r7, #28]
 8006e94:	f000 fb52 	bl	800753c <tcp_timewait_input>
        }
        pbuf_free(p);
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	f7fd ffb3 	bl	8004e04 <pbuf_free>
        return;
 8006e9e:	e1ee      	b.n	800727e <tcp_input+0x7ce>
        continue;
 8006ea0:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8006ea2:	69fb      	ldr	r3, [r7, #28]
 8006ea4:	68db      	ldr	r3, [r3, #12]
 8006ea6:	61fb      	str	r3, [r7, #28]
 8006ea8:	69fb      	ldr	r3, [r7, #28]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d1bc      	bne.n	8006e28 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8006eae:	2300      	movs	r3, #0
 8006eb0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8006eb2:	4b51      	ldr	r3, [pc, #324]	; (8006ff8 <tcp_input+0x548>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	617b      	str	r3, [r7, #20]
 8006eb8:	e02a      	b.n	8006f10 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	7a1b      	ldrb	r3, [r3, #8]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d00c      	beq.n	8006edc <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8006ec2:	697b      	ldr	r3, [r7, #20]
 8006ec4:	7a1a      	ldrb	r2, [r3, #8]
 8006ec6:	4b44      	ldr	r3, [pc, #272]	; (8006fd8 <tcp_input+0x528>)
 8006ec8:	685b      	ldr	r3, [r3, #4]
 8006eca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006ece:	3301      	adds	r3, #1
 8006ed0:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8006ed2:	429a      	cmp	r2, r3
 8006ed4:	d002      	beq.n	8006edc <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	61bb      	str	r3, [r7, #24]
        continue;
 8006eda:	e016      	b.n	8006f0a <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8006edc:	697b      	ldr	r3, [r7, #20]
 8006ede:	8ada      	ldrh	r2, [r3, #22]
 8006ee0:	4b3c      	ldr	r3, [pc, #240]	; (8006fd4 <tcp_input+0x524>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	885b      	ldrh	r3, [r3, #2]
 8006ee6:	b29b      	uxth	r3, r3
 8006ee8:	429a      	cmp	r2, r3
 8006eea:	d10c      	bne.n	8006f06 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	681a      	ldr	r2, [r3, #0]
 8006ef0:	4b39      	ldr	r3, [pc, #228]	; (8006fd8 <tcp_input+0x528>)
 8006ef2:	695b      	ldr	r3, [r3, #20]
 8006ef4:	429a      	cmp	r2, r3
 8006ef6:	d00f      	beq.n	8006f18 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8006ef8:	697b      	ldr	r3, [r7, #20]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d00d      	beq.n	8006f1a <tcp_input+0x46a>
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d009      	beq.n	8006f1a <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8006f06:	697b      	ldr	r3, [r7, #20]
 8006f08:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	68db      	ldr	r3, [r3, #12]
 8006f0e:	617b      	str	r3, [r7, #20]
 8006f10:	697b      	ldr	r3, [r7, #20]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d1d1      	bne.n	8006eba <tcp_input+0x40a>
 8006f16:	e000      	b.n	8006f1a <tcp_input+0x46a>
            break;
 8006f18:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8006f1a:	697b      	ldr	r3, [r7, #20]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d014      	beq.n	8006f4a <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8006f20:	69bb      	ldr	r3, [r7, #24]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d00a      	beq.n	8006f3c <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8006f26:	697b      	ldr	r3, [r7, #20]
 8006f28:	68da      	ldr	r2, [r3, #12]
 8006f2a:	69bb      	ldr	r3, [r7, #24]
 8006f2c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8006f2e:	4b32      	ldr	r3, [pc, #200]	; (8006ff8 <tcp_input+0x548>)
 8006f30:	681a      	ldr	r2, [r3, #0]
 8006f32:	697b      	ldr	r3, [r7, #20]
 8006f34:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8006f36:	4a30      	ldr	r2, [pc, #192]	; (8006ff8 <tcp_input+0x548>)
 8006f38:	697b      	ldr	r3, [r7, #20]
 8006f3a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8006f3c:	6978      	ldr	r0, [r7, #20]
 8006f3e:	f000 f9ff 	bl	8007340 <tcp_listen_input>
      }
      pbuf_free(p);
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f7fd ff5e 	bl	8004e04 <pbuf_free>
      return;
 8006f48:	e199      	b.n	800727e <tcp_input+0x7ce>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8006f4a:	69fb      	ldr	r3, [r7, #28]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	f000 815e 	beq.w	800720e <tcp_input+0x75e>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8006f52:	4b2a      	ldr	r3, [pc, #168]	; (8006ffc <tcp_input+0x54c>)
 8006f54:	2200      	movs	r2, #0
 8006f56:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	891a      	ldrh	r2, [r3, #8]
 8006f5c:	4b27      	ldr	r3, [pc, #156]	; (8006ffc <tcp_input+0x54c>)
 8006f5e:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8006f60:	4a26      	ldr	r2, [pc, #152]	; (8006ffc <tcp_input+0x54c>)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8006f66:	4b1b      	ldr	r3, [pc, #108]	; (8006fd4 <tcp_input+0x524>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4a24      	ldr	r2, [pc, #144]	; (8006ffc <tcp_input+0x54c>)
 8006f6c:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8006f6e:	4b24      	ldr	r3, [pc, #144]	; (8007000 <tcp_input+0x550>)
 8006f70:	2200      	movs	r2, #0
 8006f72:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8006f74:	4b23      	ldr	r3, [pc, #140]	; (8007004 <tcp_input+0x554>)
 8006f76:	2200      	movs	r2, #0
 8006f78:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8006f7a:	4b23      	ldr	r3, [pc, #140]	; (8007008 <tcp_input+0x558>)
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8006f80:	4b22      	ldr	r3, [pc, #136]	; (800700c <tcp_input+0x55c>)
 8006f82:	781b      	ldrb	r3, [r3, #0]
 8006f84:	f003 0308 	and.w	r3, r3, #8
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d006      	beq.n	8006f9a <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	7b5b      	ldrb	r3, [r3, #13]
 8006f90:	f043 0301 	orr.w	r3, r3, #1
 8006f94:	b2da      	uxtb	r2, r3
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8006f9a:	69fb      	ldr	r3, [r7, #28]
 8006f9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d038      	beq.n	8007014 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8006fa2:	69f8      	ldr	r0, [r7, #28]
 8006fa4:	f7ff f992 	bl	80062cc <tcp_process_refused_data>
 8006fa8:	4603      	mov	r3, r0
 8006faa:	f113 0f0d 	cmn.w	r3, #13
 8006fae:	d007      	beq.n	8006fc0 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8006fb0:	69fb      	ldr	r3, [r7, #28]
 8006fb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d02d      	beq.n	8007014 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8006fb8:	4b15      	ldr	r3, [pc, #84]	; (8007010 <tcp_input+0x560>)
 8006fba:	881b      	ldrh	r3, [r3, #0]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d029      	beq.n	8007014 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8006fc0:	69fb      	ldr	r3, [r7, #28]
 8006fc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	f040 8102 	bne.w	80071ce <tcp_input+0x71e>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8006fca:	69f8      	ldr	r0, [r7, #28]
 8006fcc:	f002 fe04 	bl	8009bd8 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8006fd0:	e0fd      	b.n	80071ce <tcp_input+0x71e>
 8006fd2:	bf00      	nop
 8006fd4:	200000dc 	.word	0x200000dc
 8006fd8:	20003348 	.word	0x20003348
 8006fdc:	0800f86c 	.word	0x0800f86c
 8006fe0:	0800f998 	.word	0x0800f998
 8006fe4:	0800f8b8 	.word	0x0800f8b8
 8006fe8:	20006874 	.word	0x20006874
 8006fec:	0800f9c4 	.word	0x0800f9c4
 8006ff0:	20006884 	.word	0x20006884
 8006ff4:	0800f9f0 	.word	0x0800f9f0
 8006ff8:	2000687c 	.word	0x2000687c
 8006ffc:	200000cc 	.word	0x200000cc
 8007000:	200000fc 	.word	0x200000fc
 8007004:	200000f9 	.word	0x200000f9
 8007008:	200000f4 	.word	0x200000f4
 800700c:	200000f8 	.word	0x200000f8
 8007010:	200000f6 	.word	0x200000f6
      }
    }
    tcp_input_pcb = pcb;
 8007014:	4a9b      	ldr	r2, [pc, #620]	; (8007284 <tcp_input+0x7d4>)
 8007016:	69fb      	ldr	r3, [r7, #28]
 8007018:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800701a:	69f8      	ldr	r0, [r7, #28]
 800701c:	f000 fb08 	bl	8007630 <tcp_process>
 8007020:	4603      	mov	r3, r0
 8007022:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8007024:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007028:	f113 0f0d 	cmn.w	r3, #13
 800702c:	f000 80d1 	beq.w	80071d2 <tcp_input+0x722>
      if (recv_flags & TF_RESET) {
 8007030:	4b95      	ldr	r3, [pc, #596]	; (8007288 <tcp_input+0x7d8>)
 8007032:	781b      	ldrb	r3, [r3, #0]
 8007034:	f003 0308 	and.w	r3, r3, #8
 8007038:	2b00      	cmp	r3, #0
 800703a:	d015      	beq.n	8007068 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800703c:	69fb      	ldr	r3, [r7, #28]
 800703e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007042:	2b00      	cmp	r3, #0
 8007044:	d008      	beq.n	8007058 <tcp_input+0x5a8>
 8007046:	69fb      	ldr	r3, [r7, #28]
 8007048:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800704c:	69fa      	ldr	r2, [r7, #28]
 800704e:	6912      	ldr	r2, [r2, #16]
 8007050:	f06f 010d 	mvn.w	r1, #13
 8007054:	4610      	mov	r0, r2
 8007056:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8007058:	69f9      	ldr	r1, [r7, #28]
 800705a:	488c      	ldr	r0, [pc, #560]	; (800728c <tcp_input+0x7dc>)
 800705c:	f7ff fbd2 	bl	8006804 <tcp_pcb_remove>
        tcp_free(pcb);
 8007060:	69f8      	ldr	r0, [r7, #28]
 8007062:	f7fe fa11 	bl	8005488 <tcp_free>
 8007066:	e0bf      	b.n	80071e8 <tcp_input+0x738>
      } else {
        err = ERR_OK;
 8007068:	2300      	movs	r3, #0
 800706a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800706c:	4b88      	ldr	r3, [pc, #544]	; (8007290 <tcp_input+0x7e0>)
 800706e:	881b      	ldrh	r3, [r3, #0]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d01b      	beq.n	80070ac <tcp_input+0x5fc>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8007074:	4b86      	ldr	r3, [pc, #536]	; (8007290 <tcp_input+0x7e0>)
 8007076:	881b      	ldrh	r3, [r3, #0]
 8007078:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800707a:	69fb      	ldr	r3, [r7, #28]
 800707c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800707e:	2b00      	cmp	r3, #0
 8007080:	d009      	beq.n	8007096 <tcp_input+0x5e6>
 8007082:	69fb      	ldr	r3, [r7, #28]
 8007084:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007086:	69fa      	ldr	r2, [r7, #28]
 8007088:	6910      	ldr	r0, [r2, #16]
 800708a:	89fa      	ldrh	r2, [r7, #14]
 800708c:	69f9      	ldr	r1, [r7, #28]
 800708e:	4798      	blx	r3
 8007090:	4603      	mov	r3, r0
 8007092:	74fb      	strb	r3, [r7, #19]
 8007094:	e001      	b.n	800709a <tcp_input+0x5ea>
 8007096:	2300      	movs	r3, #0
 8007098:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800709a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800709e:	f113 0f0d 	cmn.w	r3, #13
 80070a2:	f000 8098 	beq.w	80071d6 <tcp_input+0x726>
              goto aborted;
            }
          }
          recv_acked = 0;
 80070a6:	4b7a      	ldr	r3, [pc, #488]	; (8007290 <tcp_input+0x7e0>)
 80070a8:	2200      	movs	r2, #0
 80070aa:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80070ac:	69f8      	ldr	r0, [r7, #28]
 80070ae:	f000 f907 	bl	80072c0 <tcp_input_delayed_close>
 80070b2:	4603      	mov	r3, r0
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	f040 8090 	bne.w	80071da <tcp_input+0x72a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 80070ba:	4b76      	ldr	r3, [pc, #472]	; (8007294 <tcp_input+0x7e4>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d041      	beq.n	8007146 <tcp_input+0x696>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 80070c2:	69fb      	ldr	r3, [r7, #28]
 80070c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d006      	beq.n	80070d8 <tcp_input+0x628>
 80070ca:	4b73      	ldr	r3, [pc, #460]	; (8007298 <tcp_input+0x7e8>)
 80070cc:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80070d0:	4972      	ldr	r1, [pc, #456]	; (800729c <tcp_input+0x7ec>)
 80070d2:	4873      	ldr	r0, [pc, #460]	; (80072a0 <tcp_input+0x7f0>)
 80070d4:	f006 f8c8 	bl	800d268 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 80070d8:	69fb      	ldr	r3, [r7, #28]
 80070da:	8b5b      	ldrh	r3, [r3, #26]
 80070dc:	f003 0310 	and.w	r3, r3, #16
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d008      	beq.n	80070f6 <tcp_input+0x646>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 80070e4:	4b6b      	ldr	r3, [pc, #428]	; (8007294 <tcp_input+0x7e4>)
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4618      	mov	r0, r3
 80070ea:	f7fd fe8b 	bl	8004e04 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 80070ee:	69f8      	ldr	r0, [r7, #28]
 80070f0:	f7fe fca8 	bl	8005a44 <tcp_abort>
            goto aborted;
 80070f4:	e078      	b.n	80071e8 <tcp_input+0x738>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80070f6:	69fb      	ldr	r3, [r7, #28]
 80070f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d00c      	beq.n	800711a <tcp_input+0x66a>
 8007100:	69fb      	ldr	r3, [r7, #28]
 8007102:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8007106:	69fb      	ldr	r3, [r7, #28]
 8007108:	6918      	ldr	r0, [r3, #16]
 800710a:	4b62      	ldr	r3, [pc, #392]	; (8007294 <tcp_input+0x7e4>)
 800710c:	681a      	ldr	r2, [r3, #0]
 800710e:	2300      	movs	r3, #0
 8007110:	69f9      	ldr	r1, [r7, #28]
 8007112:	47a0      	blx	r4
 8007114:	4603      	mov	r3, r0
 8007116:	74fb      	strb	r3, [r7, #19]
 8007118:	e008      	b.n	800712c <tcp_input+0x67c>
 800711a:	4b5e      	ldr	r3, [pc, #376]	; (8007294 <tcp_input+0x7e4>)
 800711c:	681a      	ldr	r2, [r3, #0]
 800711e:	2300      	movs	r3, #0
 8007120:	69f9      	ldr	r1, [r7, #28]
 8007122:	2000      	movs	r0, #0
 8007124:	f7ff f97c 	bl	8006420 <tcp_recv_null>
 8007128:	4603      	mov	r3, r0
 800712a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800712c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007130:	f113 0f0d 	cmn.w	r3, #13
 8007134:	d053      	beq.n	80071de <tcp_input+0x72e>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8007136:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d003      	beq.n	8007146 <tcp_input+0x696>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800713e:	4b55      	ldr	r3, [pc, #340]	; (8007294 <tcp_input+0x7e4>)
 8007140:	681a      	ldr	r2, [r3, #0]
 8007142:	69fb      	ldr	r3, [r7, #28]
 8007144:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8007146:	4b50      	ldr	r3, [pc, #320]	; (8007288 <tcp_input+0x7d8>)
 8007148:	781b      	ldrb	r3, [r3, #0]
 800714a:	f003 0320 	and.w	r3, r3, #32
 800714e:	2b00      	cmp	r3, #0
 8007150:	d030      	beq.n	80071b4 <tcp_input+0x704>
          if (pcb->refused_data != NULL) {
 8007152:	69fb      	ldr	r3, [r7, #28]
 8007154:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007156:	2b00      	cmp	r3, #0
 8007158:	d009      	beq.n	800716e <tcp_input+0x6be>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800715a:	69fb      	ldr	r3, [r7, #28]
 800715c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800715e:	7b5a      	ldrb	r2, [r3, #13]
 8007160:	69fb      	ldr	r3, [r7, #28]
 8007162:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007164:	f042 0220 	orr.w	r2, r2, #32
 8007168:	b2d2      	uxtb	r2, r2
 800716a:	735a      	strb	r2, [r3, #13]
 800716c:	e022      	b.n	80071b4 <tcp_input+0x704>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800716e:	69fb      	ldr	r3, [r7, #28]
 8007170:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007172:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8007176:	d005      	beq.n	8007184 <tcp_input+0x6d4>
              pcb->rcv_wnd++;
 8007178:	69fb      	ldr	r3, [r7, #28]
 800717a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800717c:	3301      	adds	r3, #1
 800717e:	b29a      	uxth	r2, r3
 8007180:	69fb      	ldr	r3, [r7, #28]
 8007182:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8007184:	69fb      	ldr	r3, [r7, #28]
 8007186:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800718a:	2b00      	cmp	r3, #0
 800718c:	d00b      	beq.n	80071a6 <tcp_input+0x6f6>
 800718e:	69fb      	ldr	r3, [r7, #28]
 8007190:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8007194:	69fb      	ldr	r3, [r7, #28]
 8007196:	6918      	ldr	r0, [r3, #16]
 8007198:	2300      	movs	r3, #0
 800719a:	2200      	movs	r2, #0
 800719c:	69f9      	ldr	r1, [r7, #28]
 800719e:	47a0      	blx	r4
 80071a0:	4603      	mov	r3, r0
 80071a2:	74fb      	strb	r3, [r7, #19]
 80071a4:	e001      	b.n	80071aa <tcp_input+0x6fa>
 80071a6:	2300      	movs	r3, #0
 80071a8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80071aa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80071ae:	f113 0f0d 	cmn.w	r3, #13
 80071b2:	d016      	beq.n	80071e2 <tcp_input+0x732>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 80071b4:	4b33      	ldr	r3, [pc, #204]	; (8007284 <tcp_input+0x7d4>)
 80071b6:	2200      	movs	r2, #0
 80071b8:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 80071ba:	69f8      	ldr	r0, [r7, #28]
 80071bc:	f000 f880 	bl	80072c0 <tcp_input_delayed_close>
 80071c0:	4603      	mov	r3, r0
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d10f      	bne.n	80071e6 <tcp_input+0x736>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 80071c6:	69f8      	ldr	r0, [r7, #28]
 80071c8:	f001 ff00 	bl	8008fcc <tcp_output>
 80071cc:	e00c      	b.n	80071e8 <tcp_input+0x738>
        goto aborted;
 80071ce:	bf00      	nop
 80071d0:	e00a      	b.n	80071e8 <tcp_input+0x738>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 80071d2:	bf00      	nop
 80071d4:	e008      	b.n	80071e8 <tcp_input+0x738>
              goto aborted;
 80071d6:	bf00      	nop
 80071d8:	e006      	b.n	80071e8 <tcp_input+0x738>
          goto aborted;
 80071da:	bf00      	nop
 80071dc:	e004      	b.n	80071e8 <tcp_input+0x738>
            goto aborted;
 80071de:	bf00      	nop
 80071e0:	e002      	b.n	80071e8 <tcp_input+0x738>
              goto aborted;
 80071e2:	bf00      	nop
 80071e4:	e000      	b.n	80071e8 <tcp_input+0x738>
          goto aborted;
 80071e6:	bf00      	nop
    tcp_input_pcb = NULL;
 80071e8:	4b26      	ldr	r3, [pc, #152]	; (8007284 <tcp_input+0x7d4>)
 80071ea:	2200      	movs	r2, #0
 80071ec:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80071ee:	4b29      	ldr	r3, [pc, #164]	; (8007294 <tcp_input+0x7e4>)
 80071f0:	2200      	movs	r2, #0
 80071f2:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 80071f4:	4b2b      	ldr	r3, [pc, #172]	; (80072a4 <tcp_input+0x7f4>)
 80071f6:	685b      	ldr	r3, [r3, #4]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d03f      	beq.n	800727c <tcp_input+0x7cc>
      pbuf_free(inseg.p);
 80071fc:	4b29      	ldr	r3, [pc, #164]	; (80072a4 <tcp_input+0x7f4>)
 80071fe:	685b      	ldr	r3, [r3, #4]
 8007200:	4618      	mov	r0, r3
 8007202:	f7fd fdff 	bl	8004e04 <pbuf_free>
      inseg.p = NULL;
 8007206:	4b27      	ldr	r3, [pc, #156]	; (80072a4 <tcp_input+0x7f4>)
 8007208:	2200      	movs	r2, #0
 800720a:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800720c:	e036      	b.n	800727c <tcp_input+0x7cc>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800720e:	4b26      	ldr	r3, [pc, #152]	; (80072a8 <tcp_input+0x7f8>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	899b      	ldrh	r3, [r3, #12]
 8007214:	b29b      	uxth	r3, r3
 8007216:	4618      	mov	r0, r3
 8007218:	f7fc fb6e 	bl	80038f8 <lwip_htons>
 800721c:	4603      	mov	r3, r0
 800721e:	b2db      	uxtb	r3, r3
 8007220:	f003 0304 	and.w	r3, r3, #4
 8007224:	2b00      	cmp	r3, #0
 8007226:	d118      	bne.n	800725a <tcp_input+0x7aa>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007228:	4b20      	ldr	r3, [pc, #128]	; (80072ac <tcp_input+0x7fc>)
 800722a:	6819      	ldr	r1, [r3, #0]
 800722c:	4b20      	ldr	r3, [pc, #128]	; (80072b0 <tcp_input+0x800>)
 800722e:	881b      	ldrh	r3, [r3, #0]
 8007230:	461a      	mov	r2, r3
 8007232:	4b20      	ldr	r3, [pc, #128]	; (80072b4 <tcp_input+0x804>)
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007238:	4b1b      	ldr	r3, [pc, #108]	; (80072a8 <tcp_input+0x7f8>)
 800723a:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800723c:	885b      	ldrh	r3, [r3, #2]
 800723e:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007240:	4a19      	ldr	r2, [pc, #100]	; (80072a8 <tcp_input+0x7f8>)
 8007242:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007244:	8812      	ldrh	r2, [r2, #0]
 8007246:	b292      	uxth	r2, r2
 8007248:	9202      	str	r2, [sp, #8]
 800724a:	9301      	str	r3, [sp, #4]
 800724c:	4b1a      	ldr	r3, [pc, #104]	; (80072b8 <tcp_input+0x808>)
 800724e:	9300      	str	r3, [sp, #0]
 8007250:	4b1a      	ldr	r3, [pc, #104]	; (80072bc <tcp_input+0x80c>)
 8007252:	4602      	mov	r2, r0
 8007254:	2000      	movs	r0, #0
 8007256:	f002 fc6d 	bl	8009b34 <tcp_rst>
    pbuf_free(p);
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f7fd fdd2 	bl	8004e04 <pbuf_free>
  return;
 8007260:	e00c      	b.n	800727c <tcp_input+0x7cc>
    goto dropped;
 8007262:	bf00      	nop
 8007264:	e006      	b.n	8007274 <tcp_input+0x7c4>
    goto dropped;
 8007266:	bf00      	nop
 8007268:	e004      	b.n	8007274 <tcp_input+0x7c4>
    goto dropped;
 800726a:	bf00      	nop
 800726c:	e002      	b.n	8007274 <tcp_input+0x7c4>
      goto dropped;
 800726e:	bf00      	nop
 8007270:	e000      	b.n	8007274 <tcp_input+0x7c4>
      goto dropped;
 8007272:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f7fd fdc5 	bl	8004e04 <pbuf_free>
 800727a:	e000      	b.n	800727e <tcp_input+0x7ce>
  return;
 800727c:	bf00      	nop
}
 800727e:	3724      	adds	r7, #36	; 0x24
 8007280:	46bd      	mov	sp, r7
 8007282:	bd90      	pop	{r4, r7, pc}
 8007284:	20006888 	.word	0x20006888
 8007288:	200000f9 	.word	0x200000f9
 800728c:	20006874 	.word	0x20006874
 8007290:	200000f4 	.word	0x200000f4
 8007294:	200000fc 	.word	0x200000fc
 8007298:	0800f86c 	.word	0x0800f86c
 800729c:	0800fa20 	.word	0x0800fa20
 80072a0:	0800f8b8 	.word	0x0800f8b8
 80072a4:	200000cc 	.word	0x200000cc
 80072a8:	200000dc 	.word	0x200000dc
 80072ac:	200000f0 	.word	0x200000f0
 80072b0:	200000f6 	.word	0x200000f6
 80072b4:	200000ec 	.word	0x200000ec
 80072b8:	20003358 	.word	0x20003358
 80072bc:	2000335c 	.word	0x2000335c

080072c0 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b082      	sub	sp, #8
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d106      	bne.n	80072dc <tcp_input_delayed_close+0x1c>
 80072ce:	4b17      	ldr	r3, [pc, #92]	; (800732c <tcp_input_delayed_close+0x6c>)
 80072d0:	f240 225a 	movw	r2, #602	; 0x25a
 80072d4:	4916      	ldr	r1, [pc, #88]	; (8007330 <tcp_input_delayed_close+0x70>)
 80072d6:	4817      	ldr	r0, [pc, #92]	; (8007334 <tcp_input_delayed_close+0x74>)
 80072d8:	f005 ffc6 	bl	800d268 <iprintf>

  if (recv_flags & TF_CLOSED) {
 80072dc:	4b16      	ldr	r3, [pc, #88]	; (8007338 <tcp_input_delayed_close+0x78>)
 80072de:	781b      	ldrb	r3, [r3, #0]
 80072e0:	f003 0310 	and.w	r3, r3, #16
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d01c      	beq.n	8007322 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	8b5b      	ldrh	r3, [r3, #26]
 80072ec:	f003 0310 	and.w	r3, r3, #16
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d10d      	bne.n	8007310 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d008      	beq.n	8007310 <tcp_input_delayed_close+0x50>
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007304:	687a      	ldr	r2, [r7, #4]
 8007306:	6912      	ldr	r2, [r2, #16]
 8007308:	f06f 010e 	mvn.w	r1, #14
 800730c:	4610      	mov	r0, r2
 800730e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8007310:	6879      	ldr	r1, [r7, #4]
 8007312:	480a      	ldr	r0, [pc, #40]	; (800733c <tcp_input_delayed_close+0x7c>)
 8007314:	f7ff fa76 	bl	8006804 <tcp_pcb_remove>
    tcp_free(pcb);
 8007318:	6878      	ldr	r0, [r7, #4]
 800731a:	f7fe f8b5 	bl	8005488 <tcp_free>
    return 1;
 800731e:	2301      	movs	r3, #1
 8007320:	e000      	b.n	8007324 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8007322:	2300      	movs	r3, #0
}
 8007324:	4618      	mov	r0, r3
 8007326:	3708      	adds	r7, #8
 8007328:	46bd      	mov	sp, r7
 800732a:	bd80      	pop	{r7, pc}
 800732c:	0800f86c 	.word	0x0800f86c
 8007330:	0800fa3c 	.word	0x0800fa3c
 8007334:	0800f8b8 	.word	0x0800f8b8
 8007338:	200000f9 	.word	0x200000f9
 800733c:	20006874 	.word	0x20006874

08007340 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8007340:	b590      	push	{r4, r7, lr}
 8007342:	b08b      	sub	sp, #44	; 0x2c
 8007344:	af04      	add	r7, sp, #16
 8007346:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8007348:	4b6f      	ldr	r3, [pc, #444]	; (8007508 <tcp_listen_input+0x1c8>)
 800734a:	781b      	ldrb	r3, [r3, #0]
 800734c:	f003 0304 	and.w	r3, r3, #4
 8007350:	2b00      	cmp	r3, #0
 8007352:	f040 80d2 	bne.w	80074fa <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d106      	bne.n	800736a <tcp_listen_input+0x2a>
 800735c:	4b6b      	ldr	r3, [pc, #428]	; (800750c <tcp_listen_input+0x1cc>)
 800735e:	f240 2281 	movw	r2, #641	; 0x281
 8007362:	496b      	ldr	r1, [pc, #428]	; (8007510 <tcp_listen_input+0x1d0>)
 8007364:	486b      	ldr	r0, [pc, #428]	; (8007514 <tcp_listen_input+0x1d4>)
 8007366:	f005 ff7f 	bl	800d268 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800736a:	4b67      	ldr	r3, [pc, #412]	; (8007508 <tcp_listen_input+0x1c8>)
 800736c:	781b      	ldrb	r3, [r3, #0]
 800736e:	f003 0310 	and.w	r3, r3, #16
 8007372:	2b00      	cmp	r3, #0
 8007374:	d019      	beq.n	80073aa <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007376:	4b68      	ldr	r3, [pc, #416]	; (8007518 <tcp_listen_input+0x1d8>)
 8007378:	6819      	ldr	r1, [r3, #0]
 800737a:	4b68      	ldr	r3, [pc, #416]	; (800751c <tcp_listen_input+0x1dc>)
 800737c:	881b      	ldrh	r3, [r3, #0]
 800737e:	461a      	mov	r2, r3
 8007380:	4b67      	ldr	r3, [pc, #412]	; (8007520 <tcp_listen_input+0x1e0>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007386:	4b67      	ldr	r3, [pc, #412]	; (8007524 <tcp_listen_input+0x1e4>)
 8007388:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800738a:	885b      	ldrh	r3, [r3, #2]
 800738c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800738e:	4a65      	ldr	r2, [pc, #404]	; (8007524 <tcp_listen_input+0x1e4>)
 8007390:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007392:	8812      	ldrh	r2, [r2, #0]
 8007394:	b292      	uxth	r2, r2
 8007396:	9202      	str	r2, [sp, #8]
 8007398:	9301      	str	r3, [sp, #4]
 800739a:	4b63      	ldr	r3, [pc, #396]	; (8007528 <tcp_listen_input+0x1e8>)
 800739c:	9300      	str	r3, [sp, #0]
 800739e:	4b63      	ldr	r3, [pc, #396]	; (800752c <tcp_listen_input+0x1ec>)
 80073a0:	4602      	mov	r2, r0
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	f002 fbc6 	bl	8009b34 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 80073a8:	e0a9      	b.n	80074fe <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 80073aa:	4b57      	ldr	r3, [pc, #348]	; (8007508 <tcp_listen_input+0x1c8>)
 80073ac:	781b      	ldrb	r3, [r3, #0]
 80073ae:	f003 0302 	and.w	r3, r3, #2
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	f000 80a3 	beq.w	80074fe <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	7d5b      	ldrb	r3, [r3, #21]
 80073bc:	4618      	mov	r0, r3
 80073be:	f7ff f953 	bl	8006668 <tcp_alloc>
 80073c2:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d111      	bne.n	80073ee <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	699b      	ldr	r3, [r3, #24]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d00a      	beq.n	80073e8 <tcp_listen_input+0xa8>
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	699b      	ldr	r3, [r3, #24]
 80073d6:	687a      	ldr	r2, [r7, #4]
 80073d8:	6910      	ldr	r0, [r2, #16]
 80073da:	f04f 32ff 	mov.w	r2, #4294967295
 80073de:	2100      	movs	r1, #0
 80073e0:	4798      	blx	r3
 80073e2:	4603      	mov	r3, r0
 80073e4:	73bb      	strb	r3, [r7, #14]
      return;
 80073e6:	e08b      	b.n	8007500 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80073e8:	23f0      	movs	r3, #240	; 0xf0
 80073ea:	73bb      	strb	r3, [r7, #14]
      return;
 80073ec:	e088      	b.n	8007500 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80073ee:	4b50      	ldr	r3, [pc, #320]	; (8007530 <tcp_listen_input+0x1f0>)
 80073f0:	695a      	ldr	r2, [r3, #20]
 80073f2:	697b      	ldr	r3, [r7, #20]
 80073f4:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80073f6:	4b4e      	ldr	r3, [pc, #312]	; (8007530 <tcp_listen_input+0x1f0>)
 80073f8:	691a      	ldr	r2, [r3, #16]
 80073fa:	697b      	ldr	r3, [r7, #20]
 80073fc:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	8ada      	ldrh	r2, [r3, #22]
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8007406:	4b47      	ldr	r3, [pc, #284]	; (8007524 <tcp_listen_input+0x1e4>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	881b      	ldrh	r3, [r3, #0]
 800740c:	b29a      	uxth	r2, r3
 800740e:	697b      	ldr	r3, [r7, #20]
 8007410:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8007412:	697b      	ldr	r3, [r7, #20]
 8007414:	2203      	movs	r2, #3
 8007416:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8007418:	4b41      	ldr	r3, [pc, #260]	; (8007520 <tcp_listen_input+0x1e0>)
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	1c5a      	adds	r2, r3, #1
 800741e:	697b      	ldr	r3, [r7, #20]
 8007420:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007426:	697b      	ldr	r3, [r7, #20]
 8007428:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800742a:	6978      	ldr	r0, [r7, #20]
 800742c:	f7ff fa70 	bl	8006910 <tcp_next_iss>
 8007430:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	693a      	ldr	r2, [r7, #16]
 8007436:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8007438:	697b      	ldr	r3, [r7, #20]
 800743a:	693a      	ldr	r2, [r7, #16]
 800743c:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800743e:	697b      	ldr	r3, [r7, #20]
 8007440:	693a      	ldr	r2, [r7, #16]
 8007442:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8007444:	697b      	ldr	r3, [r7, #20]
 8007446:	693a      	ldr	r2, [r7, #16]
 8007448:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800744a:	4b35      	ldr	r3, [pc, #212]	; (8007520 <tcp_listen_input+0x1e0>)
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	1e5a      	subs	r2, r3, #1
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	691a      	ldr	r2, [r3, #16]
 8007458:	697b      	ldr	r3, [r7, #20]
 800745a:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800745c:	697b      	ldr	r3, [r7, #20]
 800745e:	687a      	ldr	r2, [r7, #4]
 8007460:	679a      	str	r2, [r3, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	7a5b      	ldrb	r3, [r3, #9]
 8007466:	f003 030c 	and.w	r3, r3, #12
 800746a:	b2da      	uxtb	r2, r3
 800746c:	697b      	ldr	r3, [r7, #20]
 800746e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	7a1a      	ldrb	r2, [r3, #8]
 8007474:	697b      	ldr	r3, [r7, #20]
 8007476:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8007478:	4b2e      	ldr	r3, [pc, #184]	; (8007534 <tcp_listen_input+0x1f4>)
 800747a:	681a      	ldr	r2, [r3, #0]
 800747c:	697b      	ldr	r3, [r7, #20]
 800747e:	60da      	str	r2, [r3, #12]
 8007480:	4a2c      	ldr	r2, [pc, #176]	; (8007534 <tcp_listen_input+0x1f4>)
 8007482:	697b      	ldr	r3, [r7, #20]
 8007484:	6013      	str	r3, [r2, #0]
 8007486:	f002 fd17 	bl	8009eb8 <tcp_timer_needed>
 800748a:	4b2b      	ldr	r3, [pc, #172]	; (8007538 <tcp_listen_input+0x1f8>)
 800748c:	2201      	movs	r2, #1
 800748e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8007490:	6978      	ldr	r0, [r7, #20]
 8007492:	f001 f9d5 	bl	8008840 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8007496:	4b23      	ldr	r3, [pc, #140]	; (8007524 <tcp_listen_input+0x1e4>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	89db      	ldrh	r3, [r3, #14]
 800749c:	b29a      	uxth	r2, r3
 800749e:	697b      	ldr	r3, [r7, #20]
 80074a0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80074aa:	697b      	ldr	r3, [r7, #20]
 80074ac:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80074b0:	697b      	ldr	r3, [r7, #20]
 80074b2:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80074b4:	697b      	ldr	r3, [r7, #20]
 80074b6:	3304      	adds	r3, #4
 80074b8:	4618      	mov	r0, r3
 80074ba:	f004 fc8d 	bl	800bdd8 <ip4_route>
 80074be:	4601      	mov	r1, r0
 80074c0:	697b      	ldr	r3, [r7, #20]
 80074c2:	3304      	adds	r3, #4
 80074c4:	461a      	mov	r2, r3
 80074c6:	4620      	mov	r0, r4
 80074c8:	f7ff fa48 	bl	800695c <tcp_eff_send_mss_netif>
 80074cc:	4603      	mov	r3, r0
 80074ce:	461a      	mov	r2, r3
 80074d0:	697b      	ldr	r3, [r7, #20]
 80074d2:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80074d4:	2112      	movs	r1, #18
 80074d6:	6978      	ldr	r0, [r7, #20]
 80074d8:	f001 fc8a 	bl	8008df0 <tcp_enqueue_flags>
 80074dc:	4603      	mov	r3, r0
 80074de:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 80074e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d004      	beq.n	80074f2 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 80074e8:	2100      	movs	r1, #0
 80074ea:	6978      	ldr	r0, [r7, #20]
 80074ec:	f7fe f9f6 	bl	80058dc <tcp_abandon>
      return;
 80074f0:	e006      	b.n	8007500 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 80074f2:	6978      	ldr	r0, [r7, #20]
 80074f4:	f001 fd6a 	bl	8008fcc <tcp_output>
  return;
 80074f8:	e001      	b.n	80074fe <tcp_listen_input+0x1be>
    return;
 80074fa:	bf00      	nop
 80074fc:	e000      	b.n	8007500 <tcp_listen_input+0x1c0>
  return;
 80074fe:	bf00      	nop
}
 8007500:	371c      	adds	r7, #28
 8007502:	46bd      	mov	sp, r7
 8007504:	bd90      	pop	{r4, r7, pc}
 8007506:	bf00      	nop
 8007508:	200000f8 	.word	0x200000f8
 800750c:	0800f86c 	.word	0x0800f86c
 8007510:	0800fa64 	.word	0x0800fa64
 8007514:	0800f8b8 	.word	0x0800f8b8
 8007518:	200000f0 	.word	0x200000f0
 800751c:	200000f6 	.word	0x200000f6
 8007520:	200000ec 	.word	0x200000ec
 8007524:	200000dc 	.word	0x200000dc
 8007528:	20003358 	.word	0x20003358
 800752c:	2000335c 	.word	0x2000335c
 8007530:	20003348 	.word	0x20003348
 8007534:	20006874 	.word	0x20006874
 8007538:	20006870 	.word	0x20006870

0800753c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b086      	sub	sp, #24
 8007540:	af04      	add	r7, sp, #16
 8007542:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8007544:	4b2f      	ldr	r3, [pc, #188]	; (8007604 <tcp_timewait_input+0xc8>)
 8007546:	781b      	ldrb	r3, [r3, #0]
 8007548:	f003 0304 	and.w	r3, r3, #4
 800754c:	2b00      	cmp	r3, #0
 800754e:	d153      	bne.n	80075f8 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d106      	bne.n	8007564 <tcp_timewait_input+0x28>
 8007556:	4b2c      	ldr	r3, [pc, #176]	; (8007608 <tcp_timewait_input+0xcc>)
 8007558:	f240 22ee 	movw	r2, #750	; 0x2ee
 800755c:	492b      	ldr	r1, [pc, #172]	; (800760c <tcp_timewait_input+0xd0>)
 800755e:	482c      	ldr	r0, [pc, #176]	; (8007610 <tcp_timewait_input+0xd4>)
 8007560:	f005 fe82 	bl	800d268 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8007564:	4b27      	ldr	r3, [pc, #156]	; (8007604 <tcp_timewait_input+0xc8>)
 8007566:	781b      	ldrb	r3, [r3, #0]
 8007568:	f003 0302 	and.w	r3, r3, #2
 800756c:	2b00      	cmp	r3, #0
 800756e:	d02a      	beq.n	80075c6 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8007570:	4b28      	ldr	r3, [pc, #160]	; (8007614 <tcp_timewait_input+0xd8>)
 8007572:	681a      	ldr	r2, [r3, #0]
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007578:	1ad3      	subs	r3, r2, r3
 800757a:	2b00      	cmp	r3, #0
 800757c:	db2d      	blt.n	80075da <tcp_timewait_input+0x9e>
 800757e:	4b25      	ldr	r3, [pc, #148]	; (8007614 <tcp_timewait_input+0xd8>)
 8007580:	681a      	ldr	r2, [r3, #0]
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007586:	6879      	ldr	r1, [r7, #4]
 8007588:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800758a:	440b      	add	r3, r1
 800758c:	1ad3      	subs	r3, r2, r3
 800758e:	2b00      	cmp	r3, #0
 8007590:	dc23      	bgt.n	80075da <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007592:	4b21      	ldr	r3, [pc, #132]	; (8007618 <tcp_timewait_input+0xdc>)
 8007594:	6819      	ldr	r1, [r3, #0]
 8007596:	4b21      	ldr	r3, [pc, #132]	; (800761c <tcp_timewait_input+0xe0>)
 8007598:	881b      	ldrh	r3, [r3, #0]
 800759a:	461a      	mov	r2, r3
 800759c:	4b1d      	ldr	r3, [pc, #116]	; (8007614 <tcp_timewait_input+0xd8>)
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80075a2:	4b1f      	ldr	r3, [pc, #124]	; (8007620 <tcp_timewait_input+0xe4>)
 80075a4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80075a6:	885b      	ldrh	r3, [r3, #2]
 80075a8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80075aa:	4a1d      	ldr	r2, [pc, #116]	; (8007620 <tcp_timewait_input+0xe4>)
 80075ac:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80075ae:	8812      	ldrh	r2, [r2, #0]
 80075b0:	b292      	uxth	r2, r2
 80075b2:	9202      	str	r2, [sp, #8]
 80075b4:	9301      	str	r3, [sp, #4]
 80075b6:	4b1b      	ldr	r3, [pc, #108]	; (8007624 <tcp_timewait_input+0xe8>)
 80075b8:	9300      	str	r3, [sp, #0]
 80075ba:	4b1b      	ldr	r3, [pc, #108]	; (8007628 <tcp_timewait_input+0xec>)
 80075bc:	4602      	mov	r2, r0
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f002 fab8 	bl	8009b34 <tcp_rst>
      return;
 80075c4:	e01b      	b.n	80075fe <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 80075c6:	4b0f      	ldr	r3, [pc, #60]	; (8007604 <tcp_timewait_input+0xc8>)
 80075c8:	781b      	ldrb	r3, [r3, #0]
 80075ca:	f003 0301 	and.w	r3, r3, #1
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d003      	beq.n	80075da <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 80075d2:	4b16      	ldr	r3, [pc, #88]	; (800762c <tcp_timewait_input+0xf0>)
 80075d4:	681a      	ldr	r2, [r3, #0]
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 80075da:	4b10      	ldr	r3, [pc, #64]	; (800761c <tcp_timewait_input+0xe0>)
 80075dc:	881b      	ldrh	r3, [r3, #0]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d00c      	beq.n	80075fc <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	8b5b      	ldrh	r3, [r3, #26]
 80075e6:	f043 0302 	orr.w	r3, r3, #2
 80075ea:	b29a      	uxth	r2, r3
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	f001 fceb 	bl	8008fcc <tcp_output>
  }
  return;
 80075f6:	e001      	b.n	80075fc <tcp_timewait_input+0xc0>
    return;
 80075f8:	bf00      	nop
 80075fa:	e000      	b.n	80075fe <tcp_timewait_input+0xc2>
  return;
 80075fc:	bf00      	nop
}
 80075fe:	3708      	adds	r7, #8
 8007600:	46bd      	mov	sp, r7
 8007602:	bd80      	pop	{r7, pc}
 8007604:	200000f8 	.word	0x200000f8
 8007608:	0800f86c 	.word	0x0800f86c
 800760c:	0800fa84 	.word	0x0800fa84
 8007610:	0800f8b8 	.word	0x0800f8b8
 8007614:	200000ec 	.word	0x200000ec
 8007618:	200000f0 	.word	0x200000f0
 800761c:	200000f6 	.word	0x200000f6
 8007620:	200000dc 	.word	0x200000dc
 8007624:	20003358 	.word	0x20003358
 8007628:	2000335c 	.word	0x2000335c
 800762c:	20006878 	.word	0x20006878

08007630 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8007630:	b590      	push	{r4, r7, lr}
 8007632:	b08d      	sub	sp, #52	; 0x34
 8007634:	af04      	add	r7, sp, #16
 8007636:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8007638:	2300      	movs	r3, #0
 800763a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800763c:	2300      	movs	r3, #0
 800763e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d106      	bne.n	8007654 <tcp_process+0x24>
 8007646:	4ba5      	ldr	r3, [pc, #660]	; (80078dc <tcp_process+0x2ac>)
 8007648:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800764c:	49a4      	ldr	r1, [pc, #656]	; (80078e0 <tcp_process+0x2b0>)
 800764e:	48a5      	ldr	r0, [pc, #660]	; (80078e4 <tcp_process+0x2b4>)
 8007650:	f005 fe0a 	bl	800d268 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8007654:	4ba4      	ldr	r3, [pc, #656]	; (80078e8 <tcp_process+0x2b8>)
 8007656:	781b      	ldrb	r3, [r3, #0]
 8007658:	f003 0304 	and.w	r3, r3, #4
 800765c:	2b00      	cmp	r3, #0
 800765e:	d04e      	beq.n	80076fe <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	7d1b      	ldrb	r3, [r3, #20]
 8007664:	2b02      	cmp	r3, #2
 8007666:	d108      	bne.n	800767a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800766c:	4b9f      	ldr	r3, [pc, #636]	; (80078ec <tcp_process+0x2bc>)
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	429a      	cmp	r2, r3
 8007672:	d123      	bne.n	80076bc <tcp_process+0x8c>
        acceptable = 1;
 8007674:	2301      	movs	r3, #1
 8007676:	76fb      	strb	r3, [r7, #27]
 8007678:	e020      	b.n	80076bc <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800767e:	4b9c      	ldr	r3, [pc, #624]	; (80078f0 <tcp_process+0x2c0>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	429a      	cmp	r2, r3
 8007684:	d102      	bne.n	800768c <tcp_process+0x5c>
        acceptable = 1;
 8007686:	2301      	movs	r3, #1
 8007688:	76fb      	strb	r3, [r7, #27]
 800768a:	e017      	b.n	80076bc <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800768c:	4b98      	ldr	r3, [pc, #608]	; (80078f0 <tcp_process+0x2c0>)
 800768e:	681a      	ldr	r2, [r3, #0]
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007694:	1ad3      	subs	r3, r2, r3
 8007696:	2b00      	cmp	r3, #0
 8007698:	db10      	blt.n	80076bc <tcp_process+0x8c>
 800769a:	4b95      	ldr	r3, [pc, #596]	; (80078f0 <tcp_process+0x2c0>)
 800769c:	681a      	ldr	r2, [r3, #0]
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076a2:	6879      	ldr	r1, [r7, #4]
 80076a4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80076a6:	440b      	add	r3, r1
 80076a8:	1ad3      	subs	r3, r2, r3
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	dc06      	bgt.n	80076bc <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	8b5b      	ldrh	r3, [r3, #26]
 80076b2:	f043 0302 	orr.w	r3, r3, #2
 80076b6:	b29a      	uxth	r2, r3
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 80076bc:	7efb      	ldrb	r3, [r7, #27]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d01b      	beq.n	80076fa <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	7d1b      	ldrb	r3, [r3, #20]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d106      	bne.n	80076d8 <tcp_process+0xa8>
 80076ca:	4b84      	ldr	r3, [pc, #528]	; (80078dc <tcp_process+0x2ac>)
 80076cc:	f44f 724e 	mov.w	r2, #824	; 0x338
 80076d0:	4988      	ldr	r1, [pc, #544]	; (80078f4 <tcp_process+0x2c4>)
 80076d2:	4884      	ldr	r0, [pc, #528]	; (80078e4 <tcp_process+0x2b4>)
 80076d4:	f005 fdc8 	bl	800d268 <iprintf>
      recv_flags |= TF_RESET;
 80076d8:	4b87      	ldr	r3, [pc, #540]	; (80078f8 <tcp_process+0x2c8>)
 80076da:	781b      	ldrb	r3, [r3, #0]
 80076dc:	f043 0308 	orr.w	r3, r3, #8
 80076e0:	b2da      	uxtb	r2, r3
 80076e2:	4b85      	ldr	r3, [pc, #532]	; (80078f8 <tcp_process+0x2c8>)
 80076e4:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	8b5b      	ldrh	r3, [r3, #26]
 80076ea:	f023 0301 	bic.w	r3, r3, #1
 80076ee:	b29a      	uxth	r2, r3
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 80076f4:	f06f 030d 	mvn.w	r3, #13
 80076f8:	e37a      	b.n	8007df0 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 80076fa:	2300      	movs	r3, #0
 80076fc:	e378      	b.n	8007df0 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80076fe:	4b7a      	ldr	r3, [pc, #488]	; (80078e8 <tcp_process+0x2b8>)
 8007700:	781b      	ldrb	r3, [r3, #0]
 8007702:	f003 0302 	and.w	r3, r3, #2
 8007706:	2b00      	cmp	r3, #0
 8007708:	d010      	beq.n	800772c <tcp_process+0xfc>
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	7d1b      	ldrb	r3, [r3, #20]
 800770e:	2b02      	cmp	r3, #2
 8007710:	d00c      	beq.n	800772c <tcp_process+0xfc>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	7d1b      	ldrb	r3, [r3, #20]
 8007716:	2b03      	cmp	r3, #3
 8007718:	d008      	beq.n	800772c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	8b5b      	ldrh	r3, [r3, #26]
 800771e:	f043 0302 	orr.w	r3, r3, #2
 8007722:	b29a      	uxth	r2, r3
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8007728:	2300      	movs	r3, #0
 800772a:	e361      	b.n	8007df0 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	8b5b      	ldrh	r3, [r3, #26]
 8007730:	f003 0310 	and.w	r3, r3, #16
 8007734:	2b00      	cmp	r3, #0
 8007736:	d103      	bne.n	8007740 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8007738:	4b70      	ldr	r3, [pc, #448]	; (80078fc <tcp_process+0x2cc>)
 800773a:	681a      	ldr	r2, [r3, #0]
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2200      	movs	r2, #0
 8007744:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
  pcb->persist_probe = 0;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2200      	movs	r2, #0
 800774c:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

  tcp_parseopt(pcb);
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f001 f875 	bl	8008840 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	7d1b      	ldrb	r3, [r3, #20]
 800775a:	3b02      	subs	r3, #2
 800775c:	2b07      	cmp	r3, #7
 800775e:	f200 8337 	bhi.w	8007dd0 <tcp_process+0x7a0>
 8007762:	a201      	add	r2, pc, #4	; (adr r2, 8007768 <tcp_process+0x138>)
 8007764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007768:	08007789 	.word	0x08007789
 800776c:	080079b9 	.word	0x080079b9
 8007770:	08007b31 	.word	0x08007b31
 8007774:	08007b5b 	.word	0x08007b5b
 8007778:	08007c7f 	.word	0x08007c7f
 800777c:	08007b31 	.word	0x08007b31
 8007780:	08007d0b 	.word	0x08007d0b
 8007784:	08007d9b 	.word	0x08007d9b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8007788:	4b57      	ldr	r3, [pc, #348]	; (80078e8 <tcp_process+0x2b8>)
 800778a:	781b      	ldrb	r3, [r3, #0]
 800778c:	f003 0310 	and.w	r3, r3, #16
 8007790:	2b00      	cmp	r3, #0
 8007792:	f000 80e4 	beq.w	800795e <tcp_process+0x32e>
 8007796:	4b54      	ldr	r3, [pc, #336]	; (80078e8 <tcp_process+0x2b8>)
 8007798:	781b      	ldrb	r3, [r3, #0]
 800779a:	f003 0302 	and.w	r3, r3, #2
 800779e:	2b00      	cmp	r3, #0
 80077a0:	f000 80dd 	beq.w	800795e <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077a8:	1c5a      	adds	r2, r3, #1
 80077aa:	4b50      	ldr	r3, [pc, #320]	; (80078ec <tcp_process+0x2bc>)
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	429a      	cmp	r2, r3
 80077b0:	f040 80d5 	bne.w	800795e <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 80077b4:	4b4e      	ldr	r3, [pc, #312]	; (80078f0 <tcp_process+0x2c0>)
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	1c5a      	adds	r2, r3, #1
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 80077c6:	4b49      	ldr	r3, [pc, #292]	; (80078ec <tcp_process+0x2bc>)
 80077c8:	681a      	ldr	r2, [r3, #0]
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 80077ce:	4b4c      	ldr	r3, [pc, #304]	; (8007900 <tcp_process+0x2d0>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	89db      	ldrh	r3, [r3, #14]
 80077d4:	b29a      	uxth	r2, r3
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80077e8:	4b41      	ldr	r3, [pc, #260]	; (80078f0 <tcp_process+0x2c0>)
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	1e5a      	subs	r2, r3, #1
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2204      	movs	r2, #4
 80077f6:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	3304      	adds	r3, #4
 8007800:	4618      	mov	r0, r3
 8007802:	f004 fae9 	bl	800bdd8 <ip4_route>
 8007806:	4601      	mov	r1, r0
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	3304      	adds	r3, #4
 800780c:	461a      	mov	r2, r3
 800780e:	4620      	mov	r0, r4
 8007810:	f7ff f8a4 	bl	800695c <tcp_eff_send_mss_netif>
 8007814:	4603      	mov	r3, r0
 8007816:	461a      	mov	r2, r3
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007820:	009a      	lsls	r2, r3, #2
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007826:	005b      	lsls	r3, r3, #1
 8007828:	f241 111c 	movw	r1, #4380	; 0x111c
 800782c:	428b      	cmp	r3, r1
 800782e:	bf38      	it	cc
 8007830:	460b      	movcc	r3, r1
 8007832:	429a      	cmp	r2, r3
 8007834:	d204      	bcs.n	8007840 <tcp_process+0x210>
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800783a:	009b      	lsls	r3, r3, #2
 800783c:	b29b      	uxth	r3, r3
 800783e:	e00d      	b.n	800785c <tcp_process+0x22c>
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007844:	005b      	lsls	r3, r3, #1
 8007846:	f241 121c 	movw	r2, #4380	; 0x111c
 800784a:	4293      	cmp	r3, r2
 800784c:	d904      	bls.n	8007858 <tcp_process+0x228>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007852:	005b      	lsls	r3, r3, #1
 8007854:	b29b      	uxth	r3, r3
 8007856:	e001      	b.n	800785c <tcp_process+0x22c>
 8007858:	f241 131c 	movw	r3, #4380	; 0x111c
 800785c:	687a      	ldr	r2, [r7, #4]
 800785e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8007868:	2b00      	cmp	r3, #0
 800786a:	d106      	bne.n	800787a <tcp_process+0x24a>
 800786c:	4b1b      	ldr	r3, [pc, #108]	; (80078dc <tcp_process+0x2ac>)
 800786e:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8007872:	4924      	ldr	r1, [pc, #144]	; (8007904 <tcp_process+0x2d4>)
 8007874:	481b      	ldr	r0, [pc, #108]	; (80078e4 <tcp_process+0x2b4>)
 8007876:	f005 fcf7 	bl	800d268 <iprintf>
        --pcb->snd_queuelen;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8007880:	3b01      	subs	r3, #1
 8007882:	b29a      	uxth	r2, r3
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800788e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8007890:	69fb      	ldr	r3, [r7, #28]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d111      	bne.n	80078ba <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800789a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800789c:	69fb      	ldr	r3, [r7, #28]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d106      	bne.n	80078b0 <tcp_process+0x280>
 80078a2:	4b0e      	ldr	r3, [pc, #56]	; (80078dc <tcp_process+0x2ac>)
 80078a4:	f44f 725d 	mov.w	r2, #884	; 0x374
 80078a8:	4917      	ldr	r1, [pc, #92]	; (8007908 <tcp_process+0x2d8>)
 80078aa:	480e      	ldr	r0, [pc, #56]	; (80078e4 <tcp_process+0x2b4>)
 80078ac:	f005 fcdc 	bl	800d268 <iprintf>
          pcb->unsent = rseg->next;
 80078b0:	69fb      	ldr	r3, [r7, #28]
 80078b2:	681a      	ldr	r2, [r3, #0]
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	66da      	str	r2, [r3, #108]	; 0x6c
 80078b8:	e003      	b.n	80078c2 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 80078ba:	69fb      	ldr	r3, [r7, #28]
 80078bc:	681a      	ldr	r2, [r3, #0]
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 80078c2:	69f8      	ldr	r0, [r7, #28]
 80078c4:	f7fe fd93 	bl	80063ee <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d11d      	bne.n	800790c <tcp_process+0x2dc>
          pcb->rtime = -1;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80078d6:	861a      	strh	r2, [r3, #48]	; 0x30
 80078d8:	e01f      	b.n	800791a <tcp_process+0x2ea>
 80078da:	bf00      	nop
 80078dc:	0800f86c 	.word	0x0800f86c
 80078e0:	0800faa4 	.word	0x0800faa4
 80078e4:	0800f8b8 	.word	0x0800f8b8
 80078e8:	200000f8 	.word	0x200000f8
 80078ec:	200000f0 	.word	0x200000f0
 80078f0:	200000ec 	.word	0x200000ec
 80078f4:	0800fac0 	.word	0x0800fac0
 80078f8:	200000f9 	.word	0x200000f9
 80078fc:	20006878 	.word	0x20006878
 8007900:	200000dc 	.word	0x200000dc
 8007904:	0800fae0 	.word	0x0800fae0
 8007908:	0800faf8 	.word	0x0800faf8
        } else {
          pcb->rtime = 0;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2200      	movs	r2, #0
 8007910:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2200      	movs	r2, #0
 8007916:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007920:	2b00      	cmp	r3, #0
 8007922:	d00a      	beq.n	800793a <tcp_process+0x30a>
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800792a:	687a      	ldr	r2, [r7, #4]
 800792c:	6910      	ldr	r0, [r2, #16]
 800792e:	2200      	movs	r2, #0
 8007930:	6879      	ldr	r1, [r7, #4]
 8007932:	4798      	blx	r3
 8007934:	4603      	mov	r3, r0
 8007936:	76bb      	strb	r3, [r7, #26]
 8007938:	e001      	b.n	800793e <tcp_process+0x30e>
 800793a:	2300      	movs	r3, #0
 800793c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800793e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8007942:	f113 0f0d 	cmn.w	r3, #13
 8007946:	d102      	bne.n	800794e <tcp_process+0x31e>
          return ERR_ABRT;
 8007948:	f06f 030c 	mvn.w	r3, #12
 800794c:	e250      	b.n	8007df0 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	8b5b      	ldrh	r3, [r3, #26]
 8007952:	f043 0302 	orr.w	r3, r3, #2
 8007956:	b29a      	uxth	r2, r3
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800795c:	e23a      	b.n	8007dd4 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800795e:	4b9d      	ldr	r3, [pc, #628]	; (8007bd4 <tcp_process+0x5a4>)
 8007960:	781b      	ldrb	r3, [r3, #0]
 8007962:	f003 0310 	and.w	r3, r3, #16
 8007966:	2b00      	cmp	r3, #0
 8007968:	f000 8234 	beq.w	8007dd4 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800796c:	4b9a      	ldr	r3, [pc, #616]	; (8007bd8 <tcp_process+0x5a8>)
 800796e:	6819      	ldr	r1, [r3, #0]
 8007970:	4b9a      	ldr	r3, [pc, #616]	; (8007bdc <tcp_process+0x5ac>)
 8007972:	881b      	ldrh	r3, [r3, #0]
 8007974:	461a      	mov	r2, r3
 8007976:	4b9a      	ldr	r3, [pc, #616]	; (8007be0 <tcp_process+0x5b0>)
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800797c:	4b99      	ldr	r3, [pc, #612]	; (8007be4 <tcp_process+0x5b4>)
 800797e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007980:	885b      	ldrh	r3, [r3, #2]
 8007982:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007984:	4a97      	ldr	r2, [pc, #604]	; (8007be4 <tcp_process+0x5b4>)
 8007986:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007988:	8812      	ldrh	r2, [r2, #0]
 800798a:	b292      	uxth	r2, r2
 800798c:	9202      	str	r2, [sp, #8]
 800798e:	9301      	str	r3, [sp, #4]
 8007990:	4b95      	ldr	r3, [pc, #596]	; (8007be8 <tcp_process+0x5b8>)
 8007992:	9300      	str	r3, [sp, #0]
 8007994:	4b95      	ldr	r3, [pc, #596]	; (8007bec <tcp_process+0x5bc>)
 8007996:	4602      	mov	r2, r0
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	f002 f8cb 	bl	8009b34 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80079a4:	2b05      	cmp	r3, #5
 80079a6:	f200 8215 	bhi.w	8007dd4 <tcp_process+0x7a4>
          pcb->rtime = 0;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2200      	movs	r2, #0
 80079ae:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 80079b0:	6878      	ldr	r0, [r7, #4]
 80079b2:	f001 fe95 	bl	80096e0 <tcp_rexmit_rto>
      break;
 80079b6:	e20d      	b.n	8007dd4 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 80079b8:	4b86      	ldr	r3, [pc, #536]	; (8007bd4 <tcp_process+0x5a4>)
 80079ba:	781b      	ldrb	r3, [r3, #0]
 80079bc:	f003 0310 	and.w	r3, r3, #16
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	f000 80a1 	beq.w	8007b08 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80079c6:	4b84      	ldr	r3, [pc, #528]	; (8007bd8 <tcp_process+0x5a8>)
 80079c8:	681a      	ldr	r2, [r3, #0]
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079ce:	1ad3      	subs	r3, r2, r3
 80079d0:	3b01      	subs	r3, #1
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	db7e      	blt.n	8007ad4 <tcp_process+0x4a4>
 80079d6:	4b80      	ldr	r3, [pc, #512]	; (8007bd8 <tcp_process+0x5a8>)
 80079d8:	681a      	ldr	r2, [r3, #0]
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079de:	1ad3      	subs	r3, r2, r3
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	dc77      	bgt.n	8007ad4 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2204      	movs	r2, #4
 80079e8:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d102      	bne.n	80079f8 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 80079f2:	23fa      	movs	r3, #250	; 0xfa
 80079f4:	76bb      	strb	r3, [r7, #26]
 80079f6:	e01d      	b.n	8007a34 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80079fc:	699b      	ldr	r3, [r3, #24]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d106      	bne.n	8007a10 <tcp_process+0x3e0>
 8007a02:	4b7b      	ldr	r3, [pc, #492]	; (8007bf0 <tcp_process+0x5c0>)
 8007a04:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8007a08:	497a      	ldr	r1, [pc, #488]	; (8007bf4 <tcp_process+0x5c4>)
 8007a0a:	487b      	ldr	r0, [pc, #492]	; (8007bf8 <tcp_process+0x5c8>)
 8007a0c:	f005 fc2c 	bl	800d268 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007a14:	699b      	ldr	r3, [r3, #24]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d00a      	beq.n	8007a30 <tcp_process+0x400>
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007a1e:	699b      	ldr	r3, [r3, #24]
 8007a20:	687a      	ldr	r2, [r7, #4]
 8007a22:	6910      	ldr	r0, [r2, #16]
 8007a24:	2200      	movs	r2, #0
 8007a26:	6879      	ldr	r1, [r7, #4]
 8007a28:	4798      	blx	r3
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	76bb      	strb	r3, [r7, #26]
 8007a2e:	e001      	b.n	8007a34 <tcp_process+0x404>
 8007a30:	23f0      	movs	r3, #240	; 0xf0
 8007a32:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8007a34:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d00a      	beq.n	8007a52 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8007a3c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8007a40:	f113 0f0d 	cmn.w	r3, #13
 8007a44:	d002      	beq.n	8007a4c <tcp_process+0x41c>
              tcp_abort(pcb);
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	f7fd fffc 	bl	8005a44 <tcp_abort>
            }
            return ERR_ABRT;
 8007a4c:	f06f 030c 	mvn.w	r3, #12
 8007a50:	e1ce      	b.n	8007df0 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	f000 fa58 	bl	8007f08 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8007a58:	4b68      	ldr	r3, [pc, #416]	; (8007bfc <tcp_process+0x5cc>)
 8007a5a:	881b      	ldrh	r3, [r3, #0]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d005      	beq.n	8007a6c <tcp_process+0x43c>
            recv_acked--;
 8007a60:	4b66      	ldr	r3, [pc, #408]	; (8007bfc <tcp_process+0x5cc>)
 8007a62:	881b      	ldrh	r3, [r3, #0]
 8007a64:	3b01      	subs	r3, #1
 8007a66:	b29a      	uxth	r2, r3
 8007a68:	4b64      	ldr	r3, [pc, #400]	; (8007bfc <tcp_process+0x5cc>)
 8007a6a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007a70:	009a      	lsls	r2, r3, #2
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007a76:	005b      	lsls	r3, r3, #1
 8007a78:	f241 111c 	movw	r1, #4380	; 0x111c
 8007a7c:	428b      	cmp	r3, r1
 8007a7e:	bf38      	it	cc
 8007a80:	460b      	movcc	r3, r1
 8007a82:	429a      	cmp	r2, r3
 8007a84:	d204      	bcs.n	8007a90 <tcp_process+0x460>
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007a8a:	009b      	lsls	r3, r3, #2
 8007a8c:	b29b      	uxth	r3, r3
 8007a8e:	e00d      	b.n	8007aac <tcp_process+0x47c>
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007a94:	005b      	lsls	r3, r3, #1
 8007a96:	f241 121c 	movw	r2, #4380	; 0x111c
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d904      	bls.n	8007aa8 <tcp_process+0x478>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007aa2:	005b      	lsls	r3, r3, #1
 8007aa4:	b29b      	uxth	r3, r3
 8007aa6:	e001      	b.n	8007aac <tcp_process+0x47c>
 8007aa8:	f241 131c 	movw	r3, #4380	; 0x111c
 8007aac:	687a      	ldr	r2, [r7, #4]
 8007aae:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8007ab2:	4b53      	ldr	r3, [pc, #332]	; (8007c00 <tcp_process+0x5d0>)
 8007ab4:	781b      	ldrb	r3, [r3, #0]
 8007ab6:	f003 0320 	and.w	r3, r3, #32
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d037      	beq.n	8007b2e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	8b5b      	ldrh	r3, [r3, #26]
 8007ac2:	f043 0302 	orr.w	r3, r3, #2
 8007ac6:	b29a      	uxth	r2, r3
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2207      	movs	r2, #7
 8007ad0:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8007ad2:	e02c      	b.n	8007b2e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007ad4:	4b40      	ldr	r3, [pc, #256]	; (8007bd8 <tcp_process+0x5a8>)
 8007ad6:	6819      	ldr	r1, [r3, #0]
 8007ad8:	4b40      	ldr	r3, [pc, #256]	; (8007bdc <tcp_process+0x5ac>)
 8007ada:	881b      	ldrh	r3, [r3, #0]
 8007adc:	461a      	mov	r2, r3
 8007ade:	4b40      	ldr	r3, [pc, #256]	; (8007be0 <tcp_process+0x5b0>)
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007ae4:	4b3f      	ldr	r3, [pc, #252]	; (8007be4 <tcp_process+0x5b4>)
 8007ae6:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007ae8:	885b      	ldrh	r3, [r3, #2]
 8007aea:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007aec:	4a3d      	ldr	r2, [pc, #244]	; (8007be4 <tcp_process+0x5b4>)
 8007aee:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007af0:	8812      	ldrh	r2, [r2, #0]
 8007af2:	b292      	uxth	r2, r2
 8007af4:	9202      	str	r2, [sp, #8]
 8007af6:	9301      	str	r3, [sp, #4]
 8007af8:	4b3b      	ldr	r3, [pc, #236]	; (8007be8 <tcp_process+0x5b8>)
 8007afa:	9300      	str	r3, [sp, #0]
 8007afc:	4b3b      	ldr	r3, [pc, #236]	; (8007bec <tcp_process+0x5bc>)
 8007afe:	4602      	mov	r2, r0
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	f002 f817 	bl	8009b34 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8007b06:	e167      	b.n	8007dd8 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8007b08:	4b32      	ldr	r3, [pc, #200]	; (8007bd4 <tcp_process+0x5a4>)
 8007b0a:	781b      	ldrb	r3, [r3, #0]
 8007b0c:	f003 0302 	and.w	r3, r3, #2
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	f000 8161 	beq.w	8007dd8 <tcp_process+0x7a8>
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b1a:	1e5a      	subs	r2, r3, #1
 8007b1c:	4b30      	ldr	r3, [pc, #192]	; (8007be0 <tcp_process+0x5b0>)
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	429a      	cmp	r2, r3
 8007b22:	f040 8159 	bne.w	8007dd8 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f001 fdfc 	bl	8009724 <tcp_rexmit>
      break;
 8007b2c:	e154      	b.n	8007dd8 <tcp_process+0x7a8>
 8007b2e:	e153      	b.n	8007dd8 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f000 f9e9 	bl	8007f08 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8007b36:	4b32      	ldr	r3, [pc, #200]	; (8007c00 <tcp_process+0x5d0>)
 8007b38:	781b      	ldrb	r3, [r3, #0]
 8007b3a:	f003 0320 	and.w	r3, r3, #32
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	f000 814c 	beq.w	8007ddc <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	8b5b      	ldrh	r3, [r3, #26]
 8007b48:	f043 0302 	orr.w	r3, r3, #2
 8007b4c:	b29a      	uxth	r2, r3
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2207      	movs	r2, #7
 8007b56:	751a      	strb	r2, [r3, #20]
      }
      break;
 8007b58:	e140      	b.n	8007ddc <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	f000 f9d4 	bl	8007f08 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8007b60:	4b27      	ldr	r3, [pc, #156]	; (8007c00 <tcp_process+0x5d0>)
 8007b62:	781b      	ldrb	r3, [r3, #0]
 8007b64:	f003 0320 	and.w	r3, r3, #32
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d071      	beq.n	8007c50 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8007b6c:	4b19      	ldr	r3, [pc, #100]	; (8007bd4 <tcp_process+0x5a4>)
 8007b6e:	781b      	ldrb	r3, [r3, #0]
 8007b70:	f003 0310 	and.w	r3, r3, #16
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d060      	beq.n	8007c3a <tcp_process+0x60a>
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007b7c:	4b16      	ldr	r3, [pc, #88]	; (8007bd8 <tcp_process+0x5a8>)
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	429a      	cmp	r2, r3
 8007b82:	d15a      	bne.n	8007c3a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d156      	bne.n	8007c3a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	8b5b      	ldrh	r3, [r3, #26]
 8007b90:	f043 0302 	orr.w	r3, r3, #2
 8007b94:	b29a      	uxth	r2, r3
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f7fe fde8 	bl	8006770 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8007ba0:	4b18      	ldr	r3, [pc, #96]	; (8007c04 <tcp_process+0x5d4>)
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	687a      	ldr	r2, [r7, #4]
 8007ba6:	429a      	cmp	r2, r3
 8007ba8:	d105      	bne.n	8007bb6 <tcp_process+0x586>
 8007baa:	4b16      	ldr	r3, [pc, #88]	; (8007c04 <tcp_process+0x5d4>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	68db      	ldr	r3, [r3, #12]
 8007bb0:	4a14      	ldr	r2, [pc, #80]	; (8007c04 <tcp_process+0x5d4>)
 8007bb2:	6013      	str	r3, [r2, #0]
 8007bb4:	e02e      	b.n	8007c14 <tcp_process+0x5e4>
 8007bb6:	4b13      	ldr	r3, [pc, #76]	; (8007c04 <tcp_process+0x5d4>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	617b      	str	r3, [r7, #20]
 8007bbc:	e027      	b.n	8007c0e <tcp_process+0x5de>
 8007bbe:	697b      	ldr	r3, [r7, #20]
 8007bc0:	68db      	ldr	r3, [r3, #12]
 8007bc2:	687a      	ldr	r2, [r7, #4]
 8007bc4:	429a      	cmp	r2, r3
 8007bc6:	d11f      	bne.n	8007c08 <tcp_process+0x5d8>
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	68da      	ldr	r2, [r3, #12]
 8007bcc:	697b      	ldr	r3, [r7, #20]
 8007bce:	60da      	str	r2, [r3, #12]
 8007bd0:	e020      	b.n	8007c14 <tcp_process+0x5e4>
 8007bd2:	bf00      	nop
 8007bd4:	200000f8 	.word	0x200000f8
 8007bd8:	200000f0 	.word	0x200000f0
 8007bdc:	200000f6 	.word	0x200000f6
 8007be0:	200000ec 	.word	0x200000ec
 8007be4:	200000dc 	.word	0x200000dc
 8007be8:	20003358 	.word	0x20003358
 8007bec:	2000335c 	.word	0x2000335c
 8007bf0:	0800f86c 	.word	0x0800f86c
 8007bf4:	0800fb0c 	.word	0x0800fb0c
 8007bf8:	0800f8b8 	.word	0x0800f8b8
 8007bfc:	200000f4 	.word	0x200000f4
 8007c00:	200000f9 	.word	0x200000f9
 8007c04:	20006874 	.word	0x20006874
 8007c08:	697b      	ldr	r3, [r7, #20]
 8007c0a:	68db      	ldr	r3, [r3, #12]
 8007c0c:	617b      	str	r3, [r7, #20]
 8007c0e:	697b      	ldr	r3, [r7, #20]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d1d4      	bne.n	8007bbe <tcp_process+0x58e>
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2200      	movs	r2, #0
 8007c18:	60da      	str	r2, [r3, #12]
 8007c1a:	4b77      	ldr	r3, [pc, #476]	; (8007df8 <tcp_process+0x7c8>)
 8007c1c:	2201      	movs	r2, #1
 8007c1e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	220a      	movs	r2, #10
 8007c24:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8007c26:	4b75      	ldr	r3, [pc, #468]	; (8007dfc <tcp_process+0x7cc>)
 8007c28:	681a      	ldr	r2, [r3, #0]
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	60da      	str	r2, [r3, #12]
 8007c2e:	4a73      	ldr	r2, [pc, #460]	; (8007dfc <tcp_process+0x7cc>)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6013      	str	r3, [r2, #0]
 8007c34:	f002 f940 	bl	8009eb8 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8007c38:	e0d2      	b.n	8007de0 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	8b5b      	ldrh	r3, [r3, #26]
 8007c3e:	f043 0302 	orr.w	r3, r3, #2
 8007c42:	b29a      	uxth	r2, r3
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2208      	movs	r2, #8
 8007c4c:	751a      	strb	r2, [r3, #20]
      break;
 8007c4e:	e0c7      	b.n	8007de0 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8007c50:	4b6b      	ldr	r3, [pc, #428]	; (8007e00 <tcp_process+0x7d0>)
 8007c52:	781b      	ldrb	r3, [r3, #0]
 8007c54:	f003 0310 	and.w	r3, r3, #16
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	f000 80c1 	beq.w	8007de0 <tcp_process+0x7b0>
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007c62:	4b68      	ldr	r3, [pc, #416]	; (8007e04 <tcp_process+0x7d4>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	429a      	cmp	r2, r3
 8007c68:	f040 80ba 	bne.w	8007de0 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	f040 80b5 	bne.w	8007de0 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2206      	movs	r2, #6
 8007c7a:	751a      	strb	r2, [r3, #20]
      break;
 8007c7c:	e0b0      	b.n	8007de0 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	f000 f942 	bl	8007f08 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8007c84:	4b60      	ldr	r3, [pc, #384]	; (8007e08 <tcp_process+0x7d8>)
 8007c86:	781b      	ldrb	r3, [r3, #0]
 8007c88:	f003 0320 	and.w	r3, r3, #32
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	f000 80a9 	beq.w	8007de4 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	8b5b      	ldrh	r3, [r3, #26]
 8007c96:	f043 0302 	orr.w	r3, r3, #2
 8007c9a:	b29a      	uxth	r2, r3
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8007ca0:	6878      	ldr	r0, [r7, #4]
 8007ca2:	f7fe fd65 	bl	8006770 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8007ca6:	4b59      	ldr	r3, [pc, #356]	; (8007e0c <tcp_process+0x7dc>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	687a      	ldr	r2, [r7, #4]
 8007cac:	429a      	cmp	r2, r3
 8007cae:	d105      	bne.n	8007cbc <tcp_process+0x68c>
 8007cb0:	4b56      	ldr	r3, [pc, #344]	; (8007e0c <tcp_process+0x7dc>)
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	68db      	ldr	r3, [r3, #12]
 8007cb6:	4a55      	ldr	r2, [pc, #340]	; (8007e0c <tcp_process+0x7dc>)
 8007cb8:	6013      	str	r3, [r2, #0]
 8007cba:	e013      	b.n	8007ce4 <tcp_process+0x6b4>
 8007cbc:	4b53      	ldr	r3, [pc, #332]	; (8007e0c <tcp_process+0x7dc>)
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	613b      	str	r3, [r7, #16]
 8007cc2:	e00c      	b.n	8007cde <tcp_process+0x6ae>
 8007cc4:	693b      	ldr	r3, [r7, #16]
 8007cc6:	68db      	ldr	r3, [r3, #12]
 8007cc8:	687a      	ldr	r2, [r7, #4]
 8007cca:	429a      	cmp	r2, r3
 8007ccc:	d104      	bne.n	8007cd8 <tcp_process+0x6a8>
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	68da      	ldr	r2, [r3, #12]
 8007cd2:	693b      	ldr	r3, [r7, #16]
 8007cd4:	60da      	str	r2, [r3, #12]
 8007cd6:	e005      	b.n	8007ce4 <tcp_process+0x6b4>
 8007cd8:	693b      	ldr	r3, [r7, #16]
 8007cda:	68db      	ldr	r3, [r3, #12]
 8007cdc:	613b      	str	r3, [r7, #16]
 8007cde:	693b      	ldr	r3, [r7, #16]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d1ef      	bne.n	8007cc4 <tcp_process+0x694>
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	60da      	str	r2, [r3, #12]
 8007cea:	4b43      	ldr	r3, [pc, #268]	; (8007df8 <tcp_process+0x7c8>)
 8007cec:	2201      	movs	r2, #1
 8007cee:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	220a      	movs	r2, #10
 8007cf4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8007cf6:	4b41      	ldr	r3, [pc, #260]	; (8007dfc <tcp_process+0x7cc>)
 8007cf8:	681a      	ldr	r2, [r3, #0]
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	60da      	str	r2, [r3, #12]
 8007cfe:	4a3f      	ldr	r2, [pc, #252]	; (8007dfc <tcp_process+0x7cc>)
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	6013      	str	r3, [r2, #0]
 8007d04:	f002 f8d8 	bl	8009eb8 <tcp_timer_needed>
      }
      break;
 8007d08:	e06c      	b.n	8007de4 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	f000 f8fc 	bl	8007f08 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8007d10:	4b3b      	ldr	r3, [pc, #236]	; (8007e00 <tcp_process+0x7d0>)
 8007d12:	781b      	ldrb	r3, [r3, #0]
 8007d14:	f003 0310 	and.w	r3, r3, #16
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d065      	beq.n	8007de8 <tcp_process+0x7b8>
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007d20:	4b38      	ldr	r3, [pc, #224]	; (8007e04 <tcp_process+0x7d4>)
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	429a      	cmp	r2, r3
 8007d26:	d15f      	bne.n	8007de8 <tcp_process+0x7b8>
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d15b      	bne.n	8007de8 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8007d30:	6878      	ldr	r0, [r7, #4]
 8007d32:	f7fe fd1d 	bl	8006770 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8007d36:	4b35      	ldr	r3, [pc, #212]	; (8007e0c <tcp_process+0x7dc>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	687a      	ldr	r2, [r7, #4]
 8007d3c:	429a      	cmp	r2, r3
 8007d3e:	d105      	bne.n	8007d4c <tcp_process+0x71c>
 8007d40:	4b32      	ldr	r3, [pc, #200]	; (8007e0c <tcp_process+0x7dc>)
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	68db      	ldr	r3, [r3, #12]
 8007d46:	4a31      	ldr	r2, [pc, #196]	; (8007e0c <tcp_process+0x7dc>)
 8007d48:	6013      	str	r3, [r2, #0]
 8007d4a:	e013      	b.n	8007d74 <tcp_process+0x744>
 8007d4c:	4b2f      	ldr	r3, [pc, #188]	; (8007e0c <tcp_process+0x7dc>)
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	60fb      	str	r3, [r7, #12]
 8007d52:	e00c      	b.n	8007d6e <tcp_process+0x73e>
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	68db      	ldr	r3, [r3, #12]
 8007d58:	687a      	ldr	r2, [r7, #4]
 8007d5a:	429a      	cmp	r2, r3
 8007d5c:	d104      	bne.n	8007d68 <tcp_process+0x738>
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	68da      	ldr	r2, [r3, #12]
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	60da      	str	r2, [r3, #12]
 8007d66:	e005      	b.n	8007d74 <tcp_process+0x744>
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	68db      	ldr	r3, [r3, #12]
 8007d6c:	60fb      	str	r3, [r7, #12]
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d1ef      	bne.n	8007d54 <tcp_process+0x724>
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2200      	movs	r2, #0
 8007d78:	60da      	str	r2, [r3, #12]
 8007d7a:	4b1f      	ldr	r3, [pc, #124]	; (8007df8 <tcp_process+0x7c8>)
 8007d7c:	2201      	movs	r2, #1
 8007d7e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	220a      	movs	r2, #10
 8007d84:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8007d86:	4b1d      	ldr	r3, [pc, #116]	; (8007dfc <tcp_process+0x7cc>)
 8007d88:	681a      	ldr	r2, [r3, #0]
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	60da      	str	r2, [r3, #12]
 8007d8e:	4a1b      	ldr	r2, [pc, #108]	; (8007dfc <tcp_process+0x7cc>)
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	6013      	str	r3, [r2, #0]
 8007d94:	f002 f890 	bl	8009eb8 <tcp_timer_needed>
      }
      break;
 8007d98:	e026      	b.n	8007de8 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	f000 f8b4 	bl	8007f08 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8007da0:	4b17      	ldr	r3, [pc, #92]	; (8007e00 <tcp_process+0x7d0>)
 8007da2:	781b      	ldrb	r3, [r3, #0]
 8007da4:	f003 0310 	and.w	r3, r3, #16
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d01f      	beq.n	8007dec <tcp_process+0x7bc>
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007db0:	4b14      	ldr	r3, [pc, #80]	; (8007e04 <tcp_process+0x7d4>)
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	429a      	cmp	r2, r3
 8007db6:	d119      	bne.n	8007dec <tcp_process+0x7bc>
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d115      	bne.n	8007dec <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8007dc0:	4b11      	ldr	r3, [pc, #68]	; (8007e08 <tcp_process+0x7d8>)
 8007dc2:	781b      	ldrb	r3, [r3, #0]
 8007dc4:	f043 0310 	orr.w	r3, r3, #16
 8007dc8:	b2da      	uxtb	r2, r3
 8007dca:	4b0f      	ldr	r3, [pc, #60]	; (8007e08 <tcp_process+0x7d8>)
 8007dcc:	701a      	strb	r2, [r3, #0]
      }
      break;
 8007dce:	e00d      	b.n	8007dec <tcp_process+0x7bc>
    default:
      break;
 8007dd0:	bf00      	nop
 8007dd2:	e00c      	b.n	8007dee <tcp_process+0x7be>
      break;
 8007dd4:	bf00      	nop
 8007dd6:	e00a      	b.n	8007dee <tcp_process+0x7be>
      break;
 8007dd8:	bf00      	nop
 8007dda:	e008      	b.n	8007dee <tcp_process+0x7be>
      break;
 8007ddc:	bf00      	nop
 8007dde:	e006      	b.n	8007dee <tcp_process+0x7be>
      break;
 8007de0:	bf00      	nop
 8007de2:	e004      	b.n	8007dee <tcp_process+0x7be>
      break;
 8007de4:	bf00      	nop
 8007de6:	e002      	b.n	8007dee <tcp_process+0x7be>
      break;
 8007de8:	bf00      	nop
 8007dea:	e000      	b.n	8007dee <tcp_process+0x7be>
      break;
 8007dec:	bf00      	nop
  }
  return ERR_OK;
 8007dee:	2300      	movs	r3, #0
}
 8007df0:	4618      	mov	r0, r3
 8007df2:	3724      	adds	r7, #36	; 0x24
 8007df4:	46bd      	mov	sp, r7
 8007df6:	bd90      	pop	{r4, r7, pc}
 8007df8:	20006870 	.word	0x20006870
 8007dfc:	20006884 	.word	0x20006884
 8007e00:	200000f8 	.word	0x200000f8
 8007e04:	200000f0 	.word	0x200000f0
 8007e08:	200000f9 	.word	0x200000f9
 8007e0c:	20006874 	.word	0x20006874

08007e10 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8007e10:	b5b0      	push	{r4, r5, r7, lr}
 8007e12:	b086      	sub	sp, #24
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	60f8      	str	r0, [r7, #12]
 8007e18:	60b9      	str	r1, [r7, #8]
 8007e1a:	607a      	str	r2, [r7, #4]
 8007e1c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8007e1e:	e03e      	b.n	8007e9e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8007e20:	68bb      	ldr	r3, [r7, #8]
 8007e22:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8007e2a:	697b      	ldr	r3, [r7, #20]
 8007e2c:	685b      	ldr	r3, [r3, #4]
 8007e2e:	4618      	mov	r0, r3
 8007e30:	f7fd f870 	bl	8004f14 <pbuf_clen>
 8007e34:	4603      	mov	r3, r0
 8007e36:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8007e3e:	8a7a      	ldrh	r2, [r7, #18]
 8007e40:	429a      	cmp	r2, r3
 8007e42:	d906      	bls.n	8007e52 <tcp_free_acked_segments+0x42>
 8007e44:	4b2a      	ldr	r3, [pc, #168]	; (8007ef0 <tcp_free_acked_segments+0xe0>)
 8007e46:	f240 4257 	movw	r2, #1111	; 0x457
 8007e4a:	492a      	ldr	r1, [pc, #168]	; (8007ef4 <tcp_free_acked_segments+0xe4>)
 8007e4c:	482a      	ldr	r0, [pc, #168]	; (8007ef8 <tcp_free_acked_segments+0xe8>)
 8007e4e:	f005 fa0b 	bl	800d268 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8007e58:	8a7b      	ldrh	r3, [r7, #18]
 8007e5a:	1ad3      	subs	r3, r2, r3
 8007e5c:	b29a      	uxth	r2, r3
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8007e64:	697b      	ldr	r3, [r7, #20]
 8007e66:	891a      	ldrh	r2, [r3, #8]
 8007e68:	4b24      	ldr	r3, [pc, #144]	; (8007efc <tcp_free_acked_segments+0xec>)
 8007e6a:	881b      	ldrh	r3, [r3, #0]
 8007e6c:	4413      	add	r3, r2
 8007e6e:	b29a      	uxth	r2, r3
 8007e70:	4b22      	ldr	r3, [pc, #136]	; (8007efc <tcp_free_acked_segments+0xec>)
 8007e72:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8007e74:	6978      	ldr	r0, [r7, #20]
 8007e76:	f7fe faba 	bl	80063ee <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d00c      	beq.n	8007e9e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8007e84:	68bb      	ldr	r3, [r7, #8]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d109      	bne.n	8007e9e <tcp_free_acked_segments+0x8e>
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d106      	bne.n	8007e9e <tcp_free_acked_segments+0x8e>
 8007e90:	4b17      	ldr	r3, [pc, #92]	; (8007ef0 <tcp_free_acked_segments+0xe0>)
 8007e92:	f240 4261 	movw	r2, #1121	; 0x461
 8007e96:	491a      	ldr	r1, [pc, #104]	; (8007f00 <tcp_free_acked_segments+0xf0>)
 8007e98:	4817      	ldr	r0, [pc, #92]	; (8007ef8 <tcp_free_acked_segments+0xe8>)
 8007e9a:	f005 f9e5 	bl	800d268 <iprintf>
  while (seg_list != NULL &&
 8007e9e:	68bb      	ldr	r3, [r7, #8]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d020      	beq.n	8007ee6 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8007ea4:	68bb      	ldr	r3, [r7, #8]
 8007ea6:	68db      	ldr	r3, [r3, #12]
 8007ea8:	685b      	ldr	r3, [r3, #4]
 8007eaa:	4618      	mov	r0, r3
 8007eac:	f7fb fd39 	bl	8003922 <lwip_htonl>
 8007eb0:	4604      	mov	r4, r0
 8007eb2:	68bb      	ldr	r3, [r7, #8]
 8007eb4:	891b      	ldrh	r3, [r3, #8]
 8007eb6:	461d      	mov	r5, r3
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	68db      	ldr	r3, [r3, #12]
 8007ebc:	899b      	ldrh	r3, [r3, #12]
 8007ebe:	b29b      	uxth	r3, r3
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	f7fb fd19 	bl	80038f8 <lwip_htons>
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	b2db      	uxtb	r3, r3
 8007eca:	f003 0303 	and.w	r3, r3, #3
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d001      	beq.n	8007ed6 <tcp_free_acked_segments+0xc6>
 8007ed2:	2301      	movs	r3, #1
 8007ed4:	e000      	b.n	8007ed8 <tcp_free_acked_segments+0xc8>
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	442b      	add	r3, r5
 8007eda:	18e2      	adds	r2, r4, r3
 8007edc:	4b09      	ldr	r3, [pc, #36]	; (8007f04 <tcp_free_acked_segments+0xf4>)
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	dd9c      	ble.n	8007e20 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8007ee6:	68bb      	ldr	r3, [r7, #8]
}
 8007ee8:	4618      	mov	r0, r3
 8007eea:	3718      	adds	r7, #24
 8007eec:	46bd      	mov	sp, r7
 8007eee:	bdb0      	pop	{r4, r5, r7, pc}
 8007ef0:	0800f86c 	.word	0x0800f86c
 8007ef4:	0800fb2c 	.word	0x0800fb2c
 8007ef8:	0800f8b8 	.word	0x0800f8b8
 8007efc:	200000f4 	.word	0x200000f4
 8007f00:	0800fb54 	.word	0x0800fb54
 8007f04:	200000f0 	.word	0x200000f0

08007f08 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8007f08:	b590      	push	{r4, r7, lr}
 8007f0a:	b08d      	sub	sp, #52	; 0x34
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8007f10:	2300      	movs	r3, #0
 8007f12:	62bb      	str	r3, [r7, #40]	; 0x28

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d106      	bne.n	8007f28 <tcp_receive+0x20>
 8007f1a:	4ba5      	ldr	r3, [pc, #660]	; (80081b0 <tcp_receive+0x2a8>)
 8007f1c:	f240 427b 	movw	r2, #1147	; 0x47b
 8007f20:	49a4      	ldr	r1, [pc, #656]	; (80081b4 <tcp_receive+0x2ac>)
 8007f22:	48a5      	ldr	r0, [pc, #660]	; (80081b8 <tcp_receive+0x2b0>)
 8007f24:	f005 f9a0 	bl	800d268 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	7d1b      	ldrb	r3, [r3, #20]
 8007f2c:	2b03      	cmp	r3, #3
 8007f2e:	d806      	bhi.n	8007f3e <tcp_receive+0x36>
 8007f30:	4b9f      	ldr	r3, [pc, #636]	; (80081b0 <tcp_receive+0x2a8>)
 8007f32:	f240 427c 	movw	r2, #1148	; 0x47c
 8007f36:	49a1      	ldr	r1, [pc, #644]	; (80081bc <tcp_receive+0x2b4>)
 8007f38:	489f      	ldr	r0, [pc, #636]	; (80081b8 <tcp_receive+0x2b0>)
 8007f3a:	f005 f995 	bl	800d268 <iprintf>

  if (flags & TCP_ACK) {
 8007f3e:	4ba0      	ldr	r3, [pc, #640]	; (80081c0 <tcp_receive+0x2b8>)
 8007f40:	781b      	ldrb	r3, [r3, #0]
 8007f42:	f003 0310 	and.w	r3, r3, #16
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	f000 8258 	beq.w	80083fc <tcp_receive+0x4f4>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007f52:	461a      	mov	r2, r3
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f58:	4413      	add	r3, r2
 8007f5a:	61fb      	str	r3, [r7, #28]

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007f60:	4b98      	ldr	r3, [pc, #608]	; (80081c4 <tcp_receive+0x2bc>)
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	1ad3      	subs	r3, r2, r3
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	db1b      	blt.n	8007fa2 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007f6e:	4b95      	ldr	r3, [pc, #596]	; (80081c4 <tcp_receive+0x2bc>)
 8007f70:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8007f72:	429a      	cmp	r2, r3
 8007f74:	d106      	bne.n	8007f84 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007f7a:	4b93      	ldr	r3, [pc, #588]	; (80081c8 <tcp_receive+0x2c0>)
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	1ad3      	subs	r3, r2, r3
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	db0e      	blt.n	8007fa2 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007f88:	4b8f      	ldr	r3, [pc, #572]	; (80081c8 <tcp_receive+0x2c0>)
 8007f8a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8007f8c:	429a      	cmp	r2, r3
 8007f8e:	d125      	bne.n	8007fdc <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8007f90:	4b8e      	ldr	r3, [pc, #568]	; (80081cc <tcp_receive+0x2c4>)
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	89db      	ldrh	r3, [r3, #14]
 8007f96:	b29a      	uxth	r2, r3
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007f9e:	429a      	cmp	r2, r3
 8007fa0:	d91c      	bls.n	8007fdc <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8007fa2:	4b8a      	ldr	r3, [pc, #552]	; (80081cc <tcp_receive+0x2c4>)
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	89db      	ldrh	r3, [r3, #14]
 8007fa8:	b29a      	uxth	r2, r3
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007fbc:	429a      	cmp	r2, r3
 8007fbe:	d205      	bcs.n	8007fcc <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8007fcc:	4b7d      	ldr	r3, [pc, #500]	; (80081c4 <tcp_receive+0x2bc>)
 8007fce:	681a      	ldr	r2, [r3, #0]
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8007fd4:	4b7c      	ldr	r3, [pc, #496]	; (80081c8 <tcp_receive+0x2c0>)
 8007fd6:	681a      	ldr	r2, [r3, #0]
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8007fdc:	4b7a      	ldr	r3, [pc, #488]	; (80081c8 <tcp_receive+0x2c0>)
 8007fde:	681a      	ldr	r2, [r3, #0]
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fe4:	1ad3      	subs	r3, r2, r3
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	dc58      	bgt.n	800809c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8007fea:	4b79      	ldr	r3, [pc, #484]	; (80081d0 <tcp_receive+0x2c8>)
 8007fec:	881b      	ldrh	r3, [r3, #0]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d14b      	bne.n	800808a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ff6:	687a      	ldr	r2, [r7, #4]
 8007ff8:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8007ffc:	4413      	add	r3, r2
 8007ffe:	69fa      	ldr	r2, [r7, #28]
 8008000:	429a      	cmp	r2, r3
 8008002:	d142      	bne.n	800808a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800800a:	2b00      	cmp	r3, #0
 800800c:	db3d      	blt.n	800808a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008012:	4b6d      	ldr	r3, [pc, #436]	; (80081c8 <tcp_receive+0x2c0>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	429a      	cmp	r2, r3
 8008018:	d137      	bne.n	800808a <tcp_receive+0x182>
              found_dupack = 1;
 800801a:	2301      	movs	r3, #1
 800801c:	62bb      	str	r3, [r7, #40]	; 0x28
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008024:	2bff      	cmp	r3, #255	; 0xff
 8008026:	d007      	beq.n	8008038 <tcp_receive+0x130>
                ++pcb->dupacks;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800802e:	3301      	adds	r3, #1
 8008030:	b2da      	uxtb	r2, r3
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800803e:	2b03      	cmp	r3, #3
 8008040:	d91b      	bls.n	800807a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800804c:	4413      	add	r3, r2
 800804e:	b29a      	uxth	r2, r3
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008056:	429a      	cmp	r2, r3
 8008058:	d30a      	bcc.n	8008070 <tcp_receive+0x168>
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008064:	4413      	add	r3, r2
 8008066:	b29a      	uxth	r2, r3
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800806e:	e004      	b.n	800807a <tcp_receive+0x172>
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008076:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008080:	2b02      	cmp	r3, #2
 8008082:	d902      	bls.n	800808a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	f001 fbb9 	bl	80097fc <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800808a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800808c:	2b00      	cmp	r3, #0
 800808e:	f040 815e 	bne.w	800834e <tcp_receive+0x446>
        pcb->dupacks = 0;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2200      	movs	r2, #0
 8008096:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800809a:	e158      	b.n	800834e <tcp_receive+0x446>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800809c:	4b4a      	ldr	r3, [pc, #296]	; (80081c8 <tcp_receive+0x2c0>)
 800809e:	681a      	ldr	r2, [r3, #0]
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080a4:	1ad3      	subs	r3, r2, r3
 80080a6:	3b01      	subs	r3, #1
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	f2c0 814b 	blt.w	8008344 <tcp_receive+0x43c>
 80080ae:	4b46      	ldr	r3, [pc, #280]	; (80081c8 <tcp_receive+0x2c0>)
 80080b0:	681a      	ldr	r2, [r3, #0]
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080b6:	1ad3      	subs	r3, r2, r3
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	f300 8143 	bgt.w	8008344 <tcp_receive+0x43c>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	8b5b      	ldrh	r3, [r3, #26]
 80080c2:	f003 0304 	and.w	r3, r3, #4
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d010      	beq.n	80080ec <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	8b5b      	ldrh	r3, [r3, #26]
 80080ce:	f023 0304 	bic.w	r3, r3, #4
 80080d2:	b29a      	uxth	r2, r3
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2200      	movs	r2, #0
 80080e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2200      	movs	r2, #0
 80080f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80080fa:	10db      	asrs	r3, r3, #3
 80080fc:	b21b      	sxth	r3, r3
 80080fe:	b29a      	uxth	r2, r3
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008106:	b29b      	uxth	r3, r3
 8008108:	4413      	add	r3, r2
 800810a:	b29b      	uxth	r3, r3
 800810c:	b21a      	sxth	r2, r3
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8008114:	4b2c      	ldr	r3, [pc, #176]	; (80081c8 <tcp_receive+0x2c0>)
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	b29a      	uxth	r2, r3
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800811e:	b29b      	uxth	r3, r3
 8008120:	1ad3      	subs	r3, r2, r3
 8008122:	837b      	strh	r3, [r7, #26]

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2200      	movs	r2, #0
 8008128:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800812c:	4b26      	ldr	r3, [pc, #152]	; (80081c8 <tcp_receive+0x2c0>)
 800812e:	681a      	ldr	r2, [r3, #0]
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	7d1b      	ldrb	r3, [r3, #20]
 8008138:	2b03      	cmp	r3, #3
 800813a:	f240 8094 	bls.w	8008266 <tcp_receive+0x35e>
        if (pcb->cwnd < pcb->ssthresh) {
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800814a:	429a      	cmp	r2, r3
 800814c:	d242      	bcs.n	80081d4 <tcp_receive+0x2cc>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	8b5b      	ldrh	r3, [r3, #26]
 8008152:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008156:	2b00      	cmp	r3, #0
 8008158:	d001      	beq.n	800815e <tcp_receive+0x256>
 800815a:	2301      	movs	r3, #1
 800815c:	e000      	b.n	8008160 <tcp_receive+0x258>
 800815e:	2302      	movs	r3, #2
 8008160:	767b      	strb	r3, [r7, #25]
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8008162:	7e7b      	ldrb	r3, [r7, #25]
 8008164:	b29a      	uxth	r2, r3
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800816a:	fb12 f303 	smulbb	r3, r2, r3
 800816e:	b29b      	uxth	r3, r3
 8008170:	8b7a      	ldrh	r2, [r7, #26]
 8008172:	4293      	cmp	r3, r2
 8008174:	bf28      	it	cs
 8008176:	4613      	movcs	r3, r2
 8008178:	82fb      	strh	r3, [r7, #22]
          TCP_WND_INC(pcb->cwnd, increase);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008180:	8afb      	ldrh	r3, [r7, #22]
 8008182:	4413      	add	r3, r2
 8008184:	b29a      	uxth	r2, r3
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800818c:	429a      	cmp	r2, r3
 800818e:	d309      	bcc.n	80081a4 <tcp_receive+0x29c>
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008196:	8afb      	ldrh	r3, [r7, #22]
 8008198:	4413      	add	r3, r2
 800819a:	b29a      	uxth	r2, r3
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80081a2:	e060      	b.n	8008266 <tcp_receive+0x35e>
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80081aa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80081ae:	e05a      	b.n	8008266 <tcp_receive+0x35e>
 80081b0:	0800f86c 	.word	0x0800f86c
 80081b4:	0800fb74 	.word	0x0800fb74
 80081b8:	0800f8b8 	.word	0x0800f8b8
 80081bc:	0800fb90 	.word	0x0800fb90
 80081c0:	200000f8 	.word	0x200000f8
 80081c4:	200000ec 	.word	0x200000ec
 80081c8:	200000f0 	.word	0x200000f0
 80081cc:	200000dc 	.word	0x200000dc
 80081d0:	200000f6 	.word	0x200000f6
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80081da:	8b7b      	ldrh	r3, [r7, #26]
 80081dc:	4413      	add	r3, r2
 80081de:	b29a      	uxth	r2, r3
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80081e6:	429a      	cmp	r2, r3
 80081e8:	d309      	bcc.n	80081fe <tcp_receive+0x2f6>
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80081f0:	8b7b      	ldrh	r3, [r7, #26]
 80081f2:	4413      	add	r3, r2
 80081f4:	b29a      	uxth	r2, r3
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80081fc:	e004      	b.n	8008208 <tcp_receive+0x300>
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008204:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008214:	429a      	cmp	r2, r3
 8008216:	d326      	bcc.n	8008266 <tcp_receive+0x35e>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008224:	1ad3      	subs	r3, r2, r3
 8008226:	b29a      	uxth	r2, r3
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008238:	4413      	add	r3, r2
 800823a:	b29a      	uxth	r2, r3
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008242:	429a      	cmp	r2, r3
 8008244:	d30a      	bcc.n	800825c <tcp_receive+0x354>
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008250:	4413      	add	r3, r2
 8008252:	b29a      	uxth	r2, r3
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800825a:	e004      	b.n	8008266 <tcp_receive+0x35e>
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008262:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800826e:	4a91      	ldr	r2, [pc, #580]	; (80084b4 <tcp_receive+0x5ac>)
 8008270:	6878      	ldr	r0, [r7, #4]
 8008272:	f7ff fdcd 	bl	8007e10 <tcp_free_acked_segments>
 8008276:	4602      	mov	r2, r0
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008284:	4a8c      	ldr	r2, [pc, #560]	; (80084b8 <tcp_receive+0x5b0>)
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f7ff fdc2 	bl	8007e10 <tcp_free_acked_segments>
 800828c:	4602      	mov	r2, r0
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008296:	2b00      	cmp	r3, #0
 8008298:	d104      	bne.n	80082a4 <tcp_receive+0x39c>
        pcb->rtime = -1;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80082a0:	861a      	strh	r2, [r3, #48]	; 0x30
 80082a2:	e002      	b.n	80082aa <tcp_receive+0x3a2>
      } else {
        pcb->rtime = 0;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2200      	movs	r2, #0
 80082a8:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	2200      	movs	r2, #0
 80082ae:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d103      	bne.n	80082c0 <tcp_receive+0x3b8>
        pcb->unsent_oversize = 0;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2200      	movs	r2, #0
 80082bc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80082c6:	4b7d      	ldr	r3, [pc, #500]	; (80084bc <tcp_receive+0x5b4>)
 80082c8:	881b      	ldrh	r3, [r3, #0]
 80082ca:	4413      	add	r3, r2
 80082cc:	b29a      	uxth	r2, r3
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	8b5b      	ldrh	r3, [r3, #26]
 80082d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d035      	beq.n	800834c <tcp_receive+0x444>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d118      	bne.n	800831a <tcp_receive+0x412>
          if ((pcb->unsent == NULL) ||
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d00c      	beq.n	800830a <tcp_receive+0x402>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80082f8:	68db      	ldr	r3, [r3, #12]
 80082fa:	685b      	ldr	r3, [r3, #4]
 80082fc:	4618      	mov	r0, r3
 80082fe:	f7fb fb10 	bl	8003922 <lwip_htonl>
 8008302:	4603      	mov	r3, r0
 8008304:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8008306:	2b00      	cmp	r3, #0
 8008308:	dc20      	bgt.n	800834c <tcp_receive+0x444>
            tcp_clear_flags(pcb, TF_RTO);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	8b5b      	ldrh	r3, [r3, #26]
 800830e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008312:	b29a      	uxth	r2, r3
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008318:	e018      	b.n	800834c <tcp_receive+0x444>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008322:	68db      	ldr	r3, [r3, #12]
 8008324:	685b      	ldr	r3, [r3, #4]
 8008326:	4618      	mov	r0, r3
 8008328:	f7fb fafb 	bl	8003922 <lwip_htonl>
 800832c:	4603      	mov	r3, r0
 800832e:	1ae3      	subs	r3, r4, r3
 8008330:	2b00      	cmp	r3, #0
 8008332:	dc0b      	bgt.n	800834c <tcp_receive+0x444>
          tcp_clear_flags(pcb, TF_RTO);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	8b5b      	ldrh	r3, [r3, #26]
 8008338:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800833c:	b29a      	uxth	r2, r3
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008342:	e003      	b.n	800834c <tcp_receive+0x444>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	f001 fc47 	bl	8009bd8 <tcp_send_empty_ack>
 800834a:	e000      	b.n	800834e <tcp_receive+0x446>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800834c:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008352:	2b00      	cmp	r3, #0
 8008354:	d052      	beq.n	80083fc <tcp_receive+0x4f4>
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800835a:	4b59      	ldr	r3, [pc, #356]	; (80084c0 <tcp_receive+0x5b8>)
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	1ad3      	subs	r3, r2, r3
 8008360:	2b00      	cmp	r3, #0
 8008362:	da4b      	bge.n	80083fc <tcp_receive+0x4f4>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8008364:	4b57      	ldr	r3, [pc, #348]	; (80084c4 <tcp_receive+0x5bc>)
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	b29a      	uxth	r2, r3
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800836e:	b29b      	uxth	r3, r3
 8008370:	1ad3      	subs	r3, r2, r3
 8008372:	b29b      	uxth	r3, r3
 8008374:	85fb      	strh	r3, [r7, #46]	; 0x2e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8008376:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800837e:	10db      	asrs	r3, r3, #3
 8008380:	b21b      	sxth	r3, r3
 8008382:	b29b      	uxth	r3, r3
 8008384:	1ad3      	subs	r3, r2, r3
 8008386:	b29b      	uxth	r3, r3
 8008388:	85fb      	strh	r3, [r7, #46]	; 0x2e
      pcb->sa = (s16_t)(pcb->sa + m);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8008390:	b29a      	uxth	r2, r3
 8008392:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008394:	4413      	add	r3, r2
 8008396:	b29b      	uxth	r3, r3
 8008398:	b21a      	sxth	r2, r3
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800839e:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	da03      	bge.n	80083ae <tcp_receive+0x4a6>
        m = (s16_t) - m;
 80083a6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80083a8:	425b      	negs	r3, r3
 80083aa:	b29b      	uxth	r3, r3
 80083ac:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 80083ae:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80083b6:	109b      	asrs	r3, r3, #2
 80083b8:	b21b      	sxth	r3, r3
 80083ba:	b29b      	uxth	r3, r3
 80083bc:	1ad3      	subs	r3, r2, r3
 80083be:	b29b      	uxth	r3, r3
 80083c0:	85fb      	strh	r3, [r7, #46]	; 0x2e
      pcb->sv = (s16_t)(pcb->sv + m);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80083c8:	b29a      	uxth	r2, r3
 80083ca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80083cc:	4413      	add	r3, r2
 80083ce:	b29b      	uxth	r3, r3
 80083d0:	b21a      	sxth	r2, r3
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80083dc:	10db      	asrs	r3, r3, #3
 80083de:	b21b      	sxth	r3, r3
 80083e0:	b29a      	uxth	r2, r3
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80083e8:	b29b      	uxth	r3, r3
 80083ea:	4413      	add	r3, r2
 80083ec:	b29b      	uxth	r3, r3
 80083ee:	b21a      	sxth	r2, r3
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	2200      	movs	r2, #0
 80083fa:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80083fc:	4b32      	ldr	r3, [pc, #200]	; (80084c8 <tcp_receive+0x5c0>)
 80083fe:	881b      	ldrh	r3, [r3, #0]
 8008400:	2b00      	cmp	r3, #0
 8008402:	f000 81c7 	beq.w	8008794 <tcp_receive+0x88c>
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	7d1b      	ldrb	r3, [r3, #20]
 800840a:	2b06      	cmp	r3, #6
 800840c:	f200 81c2 	bhi.w	8008794 <tcp_receive+0x88c>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008414:	4b2d      	ldr	r3, [pc, #180]	; (80084cc <tcp_receive+0x5c4>)
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	1ad3      	subs	r3, r2, r3
 800841a:	3b01      	subs	r3, #1
 800841c:	2b00      	cmp	r3, #0
 800841e:	f2c0 8085 	blt.w	800852c <tcp_receive+0x624>
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008426:	4b28      	ldr	r3, [pc, #160]	; (80084c8 <tcp_receive+0x5c0>)
 8008428:	881b      	ldrh	r3, [r3, #0]
 800842a:	4619      	mov	r1, r3
 800842c:	4b27      	ldr	r3, [pc, #156]	; (80084cc <tcp_receive+0x5c4>)
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	440b      	add	r3, r1
 8008432:	1ad3      	subs	r3, r2, r3
 8008434:	3301      	adds	r3, #1
 8008436:	2b00      	cmp	r3, #0
 8008438:	dc78      	bgt.n	800852c <tcp_receive+0x624>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800843a:	4b25      	ldr	r3, [pc, #148]	; (80084d0 <tcp_receive+0x5c8>)
 800843c:	685b      	ldr	r3, [r3, #4]
 800843e:	627b      	str	r3, [r7, #36]	; 0x24
      u32_t off32 = pcb->rcv_nxt - seqno;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008444:	4b21      	ldr	r3, [pc, #132]	; (80084cc <tcp_receive+0x5c4>)
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	1ad3      	subs	r3, r2, r3
 800844a:	613b      	str	r3, [r7, #16]
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800844c:	4b20      	ldr	r3, [pc, #128]	; (80084d0 <tcp_receive+0x5c8>)
 800844e:	685b      	ldr	r3, [r3, #4]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d106      	bne.n	8008462 <tcp_receive+0x55a>
 8008454:	4b1f      	ldr	r3, [pc, #124]	; (80084d4 <tcp_receive+0x5cc>)
 8008456:	f240 5294 	movw	r2, #1428	; 0x594
 800845a:	491f      	ldr	r1, [pc, #124]	; (80084d8 <tcp_receive+0x5d0>)
 800845c:	481f      	ldr	r0, [pc, #124]	; (80084dc <tcp_receive+0x5d4>)
 800845e:	f004 ff03 	bl	800d268 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8008462:	693b      	ldr	r3, [r7, #16]
 8008464:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008468:	4293      	cmp	r3, r2
 800846a:	d906      	bls.n	800847a <tcp_receive+0x572>
 800846c:	4b19      	ldr	r3, [pc, #100]	; (80084d4 <tcp_receive+0x5cc>)
 800846e:	f240 5295 	movw	r2, #1429	; 0x595
 8008472:	491b      	ldr	r1, [pc, #108]	; (80084e0 <tcp_receive+0x5d8>)
 8008474:	4819      	ldr	r0, [pc, #100]	; (80084dc <tcp_receive+0x5d4>)
 8008476:	f004 fef7 	bl	800d268 <iprintf>
      off = (u16_t)off32;
 800847a:	693b      	ldr	r3, [r7, #16]
 800847c:	847b      	strh	r3, [r7, #34]	; 0x22
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800847e:	4b14      	ldr	r3, [pc, #80]	; (80084d0 <tcp_receive+0x5c8>)
 8008480:	685b      	ldr	r3, [r3, #4]
 8008482:	891b      	ldrh	r3, [r3, #8]
 8008484:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8008486:	429a      	cmp	r2, r3
 8008488:	d906      	bls.n	8008498 <tcp_receive+0x590>
 800848a:	4b12      	ldr	r3, [pc, #72]	; (80084d4 <tcp_receive+0x5cc>)
 800848c:	f240 5297 	movw	r2, #1431	; 0x597
 8008490:	4914      	ldr	r1, [pc, #80]	; (80084e4 <tcp_receive+0x5dc>)
 8008492:	4812      	ldr	r0, [pc, #72]	; (80084dc <tcp_receive+0x5d4>)
 8008494:	f004 fee8 	bl	800d268 <iprintf>
      inseg.len -= off;
 8008498:	4b0d      	ldr	r3, [pc, #52]	; (80084d0 <tcp_receive+0x5c8>)
 800849a:	891a      	ldrh	r2, [r3, #8]
 800849c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800849e:	1ad3      	subs	r3, r2, r3
 80084a0:	b29a      	uxth	r2, r3
 80084a2:	4b0b      	ldr	r3, [pc, #44]	; (80084d0 <tcp_receive+0x5c8>)
 80084a4:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80084a6:	4b0a      	ldr	r3, [pc, #40]	; (80084d0 <tcp_receive+0x5c8>)
 80084a8:	685b      	ldr	r3, [r3, #4]
 80084aa:	891a      	ldrh	r2, [r3, #8]
 80084ac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80084ae:	1ad3      	subs	r3, r2, r3
 80084b0:	81fb      	strh	r3, [r7, #14]
      while (p->len < off) {
 80084b2:	e027      	b.n	8008504 <tcp_receive+0x5fc>
 80084b4:	0800fbac 	.word	0x0800fbac
 80084b8:	0800fbb4 	.word	0x0800fbb4
 80084bc:	200000f4 	.word	0x200000f4
 80084c0:	200000f0 	.word	0x200000f0
 80084c4:	20006878 	.word	0x20006878
 80084c8:	200000f6 	.word	0x200000f6
 80084cc:	200000ec 	.word	0x200000ec
 80084d0:	200000cc 	.word	0x200000cc
 80084d4:	0800f86c 	.word	0x0800f86c
 80084d8:	0800fbbc 	.word	0x0800fbbc
 80084dc:	0800f8b8 	.word	0x0800f8b8
 80084e0:	0800fbcc 	.word	0x0800fbcc
 80084e4:	0800fbdc 	.word	0x0800fbdc
        off -= p->len;
 80084e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ea:	895b      	ldrh	r3, [r3, #10]
 80084ec:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80084ee:	1ad3      	subs	r3, r2, r3
 80084f0:	847b      	strh	r3, [r7, #34]	; 0x22
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80084f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084f4:	89fa      	ldrh	r2, [r7, #14]
 80084f6:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80084f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084fa:	2200      	movs	r2, #0
 80084fc:	815a      	strh	r2, [r3, #10]
        p = p->next;
 80084fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	627b      	str	r3, [r7, #36]	; 0x24
      while (p->len < off) {
 8008504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008506:	895b      	ldrh	r3, [r3, #10]
 8008508:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800850a:	429a      	cmp	r2, r3
 800850c:	d8ec      	bhi.n	80084e8 <tcp_receive+0x5e0>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800850e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008510:	4619      	mov	r1, r3
 8008512:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008514:	f7fc fbf0 	bl	8004cf8 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800851c:	4a94      	ldr	r2, [pc, #592]	; (8008770 <tcp_receive+0x868>)
 800851e:	6013      	str	r3, [r2, #0]
 8008520:	4b94      	ldr	r3, [pc, #592]	; (8008774 <tcp_receive+0x86c>)
 8008522:	68db      	ldr	r3, [r3, #12]
 8008524:	4a92      	ldr	r2, [pc, #584]	; (8008770 <tcp_receive+0x868>)
 8008526:	6812      	ldr	r2, [r2, #0]
 8008528:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800852a:	e00d      	b.n	8008548 <tcp_receive+0x640>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800852c:	4b90      	ldr	r3, [pc, #576]	; (8008770 <tcp_receive+0x868>)
 800852e:	681a      	ldr	r2, [r3, #0]
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008534:	1ad3      	subs	r3, r2, r3
 8008536:	2b00      	cmp	r3, #0
 8008538:	da06      	bge.n	8008548 <tcp_receive+0x640>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	8b5b      	ldrh	r3, [r3, #26]
 800853e:	f043 0302 	orr.w	r3, r3, #2
 8008542:	b29a      	uxth	r2, r3
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8008548:	4b89      	ldr	r3, [pc, #548]	; (8008770 <tcp_receive+0x868>)
 800854a:	681a      	ldr	r2, [r3, #0]
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008550:	1ad3      	subs	r3, r2, r3
 8008552:	2b00      	cmp	r3, #0
 8008554:	f2c0 8106 	blt.w	8008764 <tcp_receive+0x85c>
 8008558:	4b85      	ldr	r3, [pc, #532]	; (8008770 <tcp_receive+0x868>)
 800855a:	681a      	ldr	r2, [r3, #0]
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008560:	6879      	ldr	r1, [r7, #4]
 8008562:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008564:	440b      	add	r3, r1
 8008566:	1ad3      	subs	r3, r2, r3
 8008568:	3301      	adds	r3, #1
 800856a:	2b00      	cmp	r3, #0
 800856c:	f300 80fa 	bgt.w	8008764 <tcp_receive+0x85c>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008574:	4b7e      	ldr	r3, [pc, #504]	; (8008770 <tcp_receive+0x868>)
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	429a      	cmp	r2, r3
 800857a:	f040 80ef 	bne.w	800875c <tcp_receive+0x854>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800857e:	4b7d      	ldr	r3, [pc, #500]	; (8008774 <tcp_receive+0x86c>)
 8008580:	891c      	ldrh	r4, [r3, #8]
 8008582:	4b7c      	ldr	r3, [pc, #496]	; (8008774 <tcp_receive+0x86c>)
 8008584:	68db      	ldr	r3, [r3, #12]
 8008586:	899b      	ldrh	r3, [r3, #12]
 8008588:	b29b      	uxth	r3, r3
 800858a:	4618      	mov	r0, r3
 800858c:	f7fb f9b4 	bl	80038f8 <lwip_htons>
 8008590:	4603      	mov	r3, r0
 8008592:	b2db      	uxtb	r3, r3
 8008594:	f003 0303 	and.w	r3, r3, #3
 8008598:	2b00      	cmp	r3, #0
 800859a:	d001      	beq.n	80085a0 <tcp_receive+0x698>
 800859c:	2301      	movs	r3, #1
 800859e:	e000      	b.n	80085a2 <tcp_receive+0x69a>
 80085a0:	2300      	movs	r3, #0
 80085a2:	4423      	add	r3, r4
 80085a4:	b29a      	uxth	r2, r3
 80085a6:	4b74      	ldr	r3, [pc, #464]	; (8008778 <tcp_receive+0x870>)
 80085a8:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80085ae:	4b72      	ldr	r3, [pc, #456]	; (8008778 <tcp_receive+0x870>)
 80085b0:	881b      	ldrh	r3, [r3, #0]
 80085b2:	429a      	cmp	r2, r3
 80085b4:	d275      	bcs.n	80086a2 <tcp_receive+0x79a>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80085b6:	4b6f      	ldr	r3, [pc, #444]	; (8008774 <tcp_receive+0x86c>)
 80085b8:	68db      	ldr	r3, [r3, #12]
 80085ba:	899b      	ldrh	r3, [r3, #12]
 80085bc:	b29b      	uxth	r3, r3
 80085be:	4618      	mov	r0, r3
 80085c0:	f7fb f99a 	bl	80038f8 <lwip_htons>
 80085c4:	4603      	mov	r3, r0
 80085c6:	b2db      	uxtb	r3, r3
 80085c8:	f003 0301 	and.w	r3, r3, #1
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d01f      	beq.n	8008610 <tcp_receive+0x708>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80085d0:	4b68      	ldr	r3, [pc, #416]	; (8008774 <tcp_receive+0x86c>)
 80085d2:	68db      	ldr	r3, [r3, #12]
 80085d4:	899b      	ldrh	r3, [r3, #12]
 80085d6:	b29b      	uxth	r3, r3
 80085d8:	b21b      	sxth	r3, r3
 80085da:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80085de:	b21c      	sxth	r4, r3
 80085e0:	4b64      	ldr	r3, [pc, #400]	; (8008774 <tcp_receive+0x86c>)
 80085e2:	68db      	ldr	r3, [r3, #12]
 80085e4:	899b      	ldrh	r3, [r3, #12]
 80085e6:	b29b      	uxth	r3, r3
 80085e8:	4618      	mov	r0, r3
 80085ea:	f7fb f985 	bl	80038f8 <lwip_htons>
 80085ee:	4603      	mov	r3, r0
 80085f0:	b2db      	uxtb	r3, r3
 80085f2:	b29b      	uxth	r3, r3
 80085f4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80085f8:	b29b      	uxth	r3, r3
 80085fa:	4618      	mov	r0, r3
 80085fc:	f7fb f97c 	bl	80038f8 <lwip_htons>
 8008600:	4603      	mov	r3, r0
 8008602:	b21b      	sxth	r3, r3
 8008604:	4323      	orrs	r3, r4
 8008606:	b21a      	sxth	r2, r3
 8008608:	4b5a      	ldr	r3, [pc, #360]	; (8008774 <tcp_receive+0x86c>)
 800860a:	68db      	ldr	r3, [r3, #12]
 800860c:	b292      	uxth	r2, r2
 800860e:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008614:	4b57      	ldr	r3, [pc, #348]	; (8008774 <tcp_receive+0x86c>)
 8008616:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8008618:	4b56      	ldr	r3, [pc, #344]	; (8008774 <tcp_receive+0x86c>)
 800861a:	68db      	ldr	r3, [r3, #12]
 800861c:	899b      	ldrh	r3, [r3, #12]
 800861e:	b29b      	uxth	r3, r3
 8008620:	4618      	mov	r0, r3
 8008622:	f7fb f969 	bl	80038f8 <lwip_htons>
 8008626:	4603      	mov	r3, r0
 8008628:	b2db      	uxtb	r3, r3
 800862a:	f003 0302 	and.w	r3, r3, #2
 800862e:	2b00      	cmp	r3, #0
 8008630:	d005      	beq.n	800863e <tcp_receive+0x736>
            inseg.len -= 1;
 8008632:	4b50      	ldr	r3, [pc, #320]	; (8008774 <tcp_receive+0x86c>)
 8008634:	891b      	ldrh	r3, [r3, #8]
 8008636:	3b01      	subs	r3, #1
 8008638:	b29a      	uxth	r2, r3
 800863a:	4b4e      	ldr	r3, [pc, #312]	; (8008774 <tcp_receive+0x86c>)
 800863c:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800863e:	4b4d      	ldr	r3, [pc, #308]	; (8008774 <tcp_receive+0x86c>)
 8008640:	685b      	ldr	r3, [r3, #4]
 8008642:	4a4c      	ldr	r2, [pc, #304]	; (8008774 <tcp_receive+0x86c>)
 8008644:	8912      	ldrh	r2, [r2, #8]
 8008646:	4611      	mov	r1, r2
 8008648:	4618      	mov	r0, r3
 800864a:	f7fc fa55 	bl	8004af8 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800864e:	4b49      	ldr	r3, [pc, #292]	; (8008774 <tcp_receive+0x86c>)
 8008650:	891c      	ldrh	r4, [r3, #8]
 8008652:	4b48      	ldr	r3, [pc, #288]	; (8008774 <tcp_receive+0x86c>)
 8008654:	68db      	ldr	r3, [r3, #12]
 8008656:	899b      	ldrh	r3, [r3, #12]
 8008658:	b29b      	uxth	r3, r3
 800865a:	4618      	mov	r0, r3
 800865c:	f7fb f94c 	bl	80038f8 <lwip_htons>
 8008660:	4603      	mov	r3, r0
 8008662:	b2db      	uxtb	r3, r3
 8008664:	f003 0303 	and.w	r3, r3, #3
 8008668:	2b00      	cmp	r3, #0
 800866a:	d001      	beq.n	8008670 <tcp_receive+0x768>
 800866c:	2301      	movs	r3, #1
 800866e:	e000      	b.n	8008672 <tcp_receive+0x76a>
 8008670:	2300      	movs	r3, #0
 8008672:	4423      	add	r3, r4
 8008674:	b29a      	uxth	r2, r3
 8008676:	4b40      	ldr	r3, [pc, #256]	; (8008778 <tcp_receive+0x870>)
 8008678:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800867a:	4b3f      	ldr	r3, [pc, #252]	; (8008778 <tcp_receive+0x870>)
 800867c:	881b      	ldrh	r3, [r3, #0]
 800867e:	461a      	mov	r2, r3
 8008680:	4b3b      	ldr	r3, [pc, #236]	; (8008770 <tcp_receive+0x868>)
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	441a      	add	r2, r3
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800868a:	6879      	ldr	r1, [r7, #4]
 800868c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800868e:	440b      	add	r3, r1
 8008690:	429a      	cmp	r2, r3
 8008692:	d006      	beq.n	80086a2 <tcp_receive+0x79a>
 8008694:	4b39      	ldr	r3, [pc, #228]	; (800877c <tcp_receive+0x874>)
 8008696:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800869a:	4939      	ldr	r1, [pc, #228]	; (8008780 <tcp_receive+0x878>)
 800869c:	4839      	ldr	r0, [pc, #228]	; (8008784 <tcp_receive+0x87c>)
 800869e:	f004 fde3 	bl	800d268 <iprintf>
            pcb->ooseq = next;
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80086a2:	4b35      	ldr	r3, [pc, #212]	; (8008778 <tcp_receive+0x870>)
 80086a4:	881b      	ldrh	r3, [r3, #0]
 80086a6:	461a      	mov	r2, r3
 80086a8:	4b31      	ldr	r3, [pc, #196]	; (8008770 <tcp_receive+0x868>)
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	441a      	add	r2, r3
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80086b6:	4b30      	ldr	r3, [pc, #192]	; (8008778 <tcp_receive+0x870>)
 80086b8:	881b      	ldrh	r3, [r3, #0]
 80086ba:	429a      	cmp	r2, r3
 80086bc:	d206      	bcs.n	80086cc <tcp_receive+0x7c4>
 80086be:	4b2f      	ldr	r3, [pc, #188]	; (800877c <tcp_receive+0x874>)
 80086c0:	f240 6207 	movw	r2, #1543	; 0x607
 80086c4:	4930      	ldr	r1, [pc, #192]	; (8008788 <tcp_receive+0x880>)
 80086c6:	482f      	ldr	r0, [pc, #188]	; (8008784 <tcp_receive+0x87c>)
 80086c8:	f004 fdce 	bl	800d268 <iprintf>
        pcb->rcv_wnd -= tcplen;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80086d0:	4b29      	ldr	r3, [pc, #164]	; (8008778 <tcp_receive+0x870>)
 80086d2:	881b      	ldrh	r3, [r3, #0]
 80086d4:	1ad3      	subs	r3, r2, r3
 80086d6:	b29a      	uxth	r2, r3
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80086dc:	6878      	ldr	r0, [r7, #4]
 80086de:	f7fd f9bd 	bl	8005a5c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80086e2:	4b24      	ldr	r3, [pc, #144]	; (8008774 <tcp_receive+0x86c>)
 80086e4:	685b      	ldr	r3, [r3, #4]
 80086e6:	891b      	ldrh	r3, [r3, #8]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d006      	beq.n	80086fa <tcp_receive+0x7f2>
          recv_data = inseg.p;
 80086ec:	4b21      	ldr	r3, [pc, #132]	; (8008774 <tcp_receive+0x86c>)
 80086ee:	685b      	ldr	r3, [r3, #4]
 80086f0:	4a26      	ldr	r2, [pc, #152]	; (800878c <tcp_receive+0x884>)
 80086f2:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80086f4:	4b1f      	ldr	r3, [pc, #124]	; (8008774 <tcp_receive+0x86c>)
 80086f6:	2200      	movs	r2, #0
 80086f8:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80086fa:	4b1e      	ldr	r3, [pc, #120]	; (8008774 <tcp_receive+0x86c>)
 80086fc:	68db      	ldr	r3, [r3, #12]
 80086fe:	899b      	ldrh	r3, [r3, #12]
 8008700:	b29b      	uxth	r3, r3
 8008702:	4618      	mov	r0, r3
 8008704:	f7fb f8f8 	bl	80038f8 <lwip_htons>
 8008708:	4603      	mov	r3, r0
 800870a:	b2db      	uxtb	r3, r3
 800870c:	f003 0301 	and.w	r3, r3, #1
 8008710:	2b00      	cmp	r3, #0
 8008712:	d006      	beq.n	8008722 <tcp_receive+0x81a>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8008714:	4b1e      	ldr	r3, [pc, #120]	; (8008790 <tcp_receive+0x888>)
 8008716:	781b      	ldrb	r3, [r3, #0]
 8008718:	f043 0320 	orr.w	r3, r3, #32
 800871c:	b2da      	uxtb	r2, r3
 800871e:	4b1c      	ldr	r3, [pc, #112]	; (8008790 <tcp_receive+0x888>)
 8008720:	701a      	strb	r2, [r3, #0]
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	8b5b      	ldrh	r3, [r3, #26]
 8008726:	f003 0301 	and.w	r3, r3, #1
 800872a:	2b00      	cmp	r3, #0
 800872c:	d00e      	beq.n	800874c <tcp_receive+0x844>
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	8b5b      	ldrh	r3, [r3, #26]
 8008732:	f023 0301 	bic.w	r3, r3, #1
 8008736:	b29a      	uxth	r2, r3
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	835a      	strh	r2, [r3, #26]
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	8b5b      	ldrh	r3, [r3, #26]
 8008740:	f043 0302 	orr.w	r3, r3, #2
 8008744:	b29a      	uxth	r2, r3
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800874a:	e00f      	b.n	800876c <tcp_receive+0x864>
        tcp_ack(pcb);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	8b5b      	ldrh	r3, [r3, #26]
 8008750:	f043 0301 	orr.w	r3, r3, #1
 8008754:	b29a      	uxth	r2, r3
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800875a:	e007      	b.n	800876c <tcp_receive+0x864>
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800875c:	6878      	ldr	r0, [r7, #4]
 800875e:	f001 fa3b 	bl	8009bd8 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8008762:	e003      	b.n	800876c <tcp_receive+0x864>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8008764:	6878      	ldr	r0, [r7, #4]
 8008766:	f001 fa37 	bl	8009bd8 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800876a:	e02d      	b.n	80087c8 <tcp_receive+0x8c0>
 800876c:	e02c      	b.n	80087c8 <tcp_receive+0x8c0>
 800876e:	bf00      	nop
 8008770:	200000ec 	.word	0x200000ec
 8008774:	200000cc 	.word	0x200000cc
 8008778:	200000f6 	.word	0x200000f6
 800877c:	0800f86c 	.word	0x0800f86c
 8008780:	0800fbec 	.word	0x0800fbec
 8008784:	0800f8b8 	.word	0x0800f8b8
 8008788:	0800fc24 	.word	0x0800fc24
 800878c:	200000fc 	.word	0x200000fc
 8008790:	200000f9 	.word	0x200000f9
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8008794:	4b0e      	ldr	r3, [pc, #56]	; (80087d0 <tcp_receive+0x8c8>)
 8008796:	681a      	ldr	r2, [r3, #0]
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800879c:	1ad3      	subs	r3, r2, r3
 800879e:	2b00      	cmp	r3, #0
 80087a0:	db0a      	blt.n	80087b8 <tcp_receive+0x8b0>
 80087a2:	4b0b      	ldr	r3, [pc, #44]	; (80087d0 <tcp_receive+0x8c8>)
 80087a4:	681a      	ldr	r2, [r3, #0]
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087aa:	6879      	ldr	r1, [r7, #4]
 80087ac:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80087ae:	440b      	add	r3, r1
 80087b0:	1ad3      	subs	r3, r2, r3
 80087b2:	3301      	adds	r3, #1
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	dd07      	ble.n	80087c8 <tcp_receive+0x8c0>
      tcp_ack_now(pcb);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	8b5b      	ldrh	r3, [r3, #26]
 80087bc:	f043 0302 	orr.w	r3, r3, #2
 80087c0:	b29a      	uxth	r2, r3
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	835a      	strh	r2, [r3, #26]
    }
  }
}
 80087c6:	e7ff      	b.n	80087c8 <tcp_receive+0x8c0>
 80087c8:	bf00      	nop
 80087ca:	3734      	adds	r7, #52	; 0x34
 80087cc:	46bd      	mov	sp, r7
 80087ce:	bd90      	pop	{r4, r7, pc}
 80087d0:	200000ec 	.word	0x200000ec

080087d4 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80087d4:	b480      	push	{r7}
 80087d6:	b083      	sub	sp, #12
 80087d8:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 80087da:	4b15      	ldr	r3, [pc, #84]	; (8008830 <tcp_get_next_optbyte+0x5c>)
 80087dc:	881b      	ldrh	r3, [r3, #0]
 80087de:	1c5a      	adds	r2, r3, #1
 80087e0:	b291      	uxth	r1, r2
 80087e2:	4a13      	ldr	r2, [pc, #76]	; (8008830 <tcp_get_next_optbyte+0x5c>)
 80087e4:	8011      	strh	r1, [r2, #0]
 80087e6:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80087e8:	4b12      	ldr	r3, [pc, #72]	; (8008834 <tcp_get_next_optbyte+0x60>)
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d004      	beq.n	80087fa <tcp_get_next_optbyte+0x26>
 80087f0:	4b11      	ldr	r3, [pc, #68]	; (8008838 <tcp_get_next_optbyte+0x64>)
 80087f2:	881b      	ldrh	r3, [r3, #0]
 80087f4:	88fa      	ldrh	r2, [r7, #6]
 80087f6:	429a      	cmp	r2, r3
 80087f8:	d208      	bcs.n	800880c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80087fa:	4b10      	ldr	r3, [pc, #64]	; (800883c <tcp_get_next_optbyte+0x68>)
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	3314      	adds	r3, #20
 8008800:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8008802:	88fb      	ldrh	r3, [r7, #6]
 8008804:	683a      	ldr	r2, [r7, #0]
 8008806:	4413      	add	r3, r2
 8008808:	781b      	ldrb	r3, [r3, #0]
 800880a:	e00b      	b.n	8008824 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800880c:	88fb      	ldrh	r3, [r7, #6]
 800880e:	b2da      	uxtb	r2, r3
 8008810:	4b09      	ldr	r3, [pc, #36]	; (8008838 <tcp_get_next_optbyte+0x64>)
 8008812:	881b      	ldrh	r3, [r3, #0]
 8008814:	b2db      	uxtb	r3, r3
 8008816:	1ad3      	subs	r3, r2, r3
 8008818:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800881a:	4b06      	ldr	r3, [pc, #24]	; (8008834 <tcp_get_next_optbyte+0x60>)
 800881c:	681a      	ldr	r2, [r3, #0]
 800881e:	797b      	ldrb	r3, [r7, #5]
 8008820:	4413      	add	r3, r2
 8008822:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008824:	4618      	mov	r0, r3
 8008826:	370c      	adds	r7, #12
 8008828:	46bd      	mov	sp, r7
 800882a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882e:	4770      	bx	lr
 8008830:	200000e8 	.word	0x200000e8
 8008834:	200000e4 	.word	0x200000e4
 8008838:	200000e2 	.word	0x200000e2
 800883c:	200000dc 	.word	0x200000dc

08008840 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8008840:	b580      	push	{r7, lr}
 8008842:	b084      	sub	sp, #16
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d106      	bne.n	800885c <tcp_parseopt+0x1c>
 800884e:	4b32      	ldr	r3, [pc, #200]	; (8008918 <tcp_parseopt+0xd8>)
 8008850:	f240 727d 	movw	r2, #1917	; 0x77d
 8008854:	4931      	ldr	r1, [pc, #196]	; (800891c <tcp_parseopt+0xdc>)
 8008856:	4832      	ldr	r0, [pc, #200]	; (8008920 <tcp_parseopt+0xe0>)
 8008858:	f004 fd06 	bl	800d268 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800885c:	4b31      	ldr	r3, [pc, #196]	; (8008924 <tcp_parseopt+0xe4>)
 800885e:	881b      	ldrh	r3, [r3, #0]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d055      	beq.n	8008910 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8008864:	4b30      	ldr	r3, [pc, #192]	; (8008928 <tcp_parseopt+0xe8>)
 8008866:	2200      	movs	r2, #0
 8008868:	801a      	strh	r2, [r3, #0]
 800886a:	e045      	b.n	80088f8 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800886c:	f7ff ffb2 	bl	80087d4 <tcp_get_next_optbyte>
 8008870:	4603      	mov	r3, r0
 8008872:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8008874:	7bfb      	ldrb	r3, [r7, #15]
 8008876:	2b02      	cmp	r3, #2
 8008878:	d006      	beq.n	8008888 <tcp_parseopt+0x48>
 800887a:	2b02      	cmp	r3, #2
 800887c:	dc2b      	bgt.n	80088d6 <tcp_parseopt+0x96>
 800887e:	2b00      	cmp	r3, #0
 8008880:	d041      	beq.n	8008906 <tcp_parseopt+0xc6>
 8008882:	2b01      	cmp	r3, #1
 8008884:	d127      	bne.n	80088d6 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8008886:	e037      	b.n	80088f8 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8008888:	f7ff ffa4 	bl	80087d4 <tcp_get_next_optbyte>
 800888c:	4603      	mov	r3, r0
 800888e:	2b04      	cmp	r3, #4
 8008890:	d13b      	bne.n	800890a <tcp_parseopt+0xca>
 8008892:	4b25      	ldr	r3, [pc, #148]	; (8008928 <tcp_parseopt+0xe8>)
 8008894:	881b      	ldrh	r3, [r3, #0]
 8008896:	3301      	adds	r3, #1
 8008898:	4a22      	ldr	r2, [pc, #136]	; (8008924 <tcp_parseopt+0xe4>)
 800889a:	8812      	ldrh	r2, [r2, #0]
 800889c:	4293      	cmp	r3, r2
 800889e:	da34      	bge.n	800890a <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80088a0:	f7ff ff98 	bl	80087d4 <tcp_get_next_optbyte>
 80088a4:	4603      	mov	r3, r0
 80088a6:	b29b      	uxth	r3, r3
 80088a8:	021b      	lsls	r3, r3, #8
 80088aa:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 80088ac:	f7ff ff92 	bl	80087d4 <tcp_get_next_optbyte>
 80088b0:	4603      	mov	r3, r0
 80088b2:	b29a      	uxth	r2, r3
 80088b4:	89bb      	ldrh	r3, [r7, #12]
 80088b6:	4313      	orrs	r3, r2
 80088b8:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80088ba:	89bb      	ldrh	r3, [r7, #12]
 80088bc:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80088c0:	d804      	bhi.n	80088cc <tcp_parseopt+0x8c>
 80088c2:	89bb      	ldrh	r3, [r7, #12]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d001      	beq.n	80088cc <tcp_parseopt+0x8c>
 80088c8:	89ba      	ldrh	r2, [r7, #12]
 80088ca:	e001      	b.n	80088d0 <tcp_parseopt+0x90>
 80088cc:	f44f 7206 	mov.w	r2, #536	; 0x218
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 80088d4:	e010      	b.n	80088f8 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 80088d6:	f7ff ff7d 	bl	80087d4 <tcp_get_next_optbyte>
 80088da:	4603      	mov	r3, r0
 80088dc:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 80088de:	7afb      	ldrb	r3, [r7, #11]
 80088e0:	2b01      	cmp	r3, #1
 80088e2:	d914      	bls.n	800890e <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 80088e4:	7afb      	ldrb	r3, [r7, #11]
 80088e6:	b29a      	uxth	r2, r3
 80088e8:	4b0f      	ldr	r3, [pc, #60]	; (8008928 <tcp_parseopt+0xe8>)
 80088ea:	881b      	ldrh	r3, [r3, #0]
 80088ec:	4413      	add	r3, r2
 80088ee:	b29b      	uxth	r3, r3
 80088f0:	3b02      	subs	r3, #2
 80088f2:	b29a      	uxth	r2, r3
 80088f4:	4b0c      	ldr	r3, [pc, #48]	; (8008928 <tcp_parseopt+0xe8>)
 80088f6:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80088f8:	4b0b      	ldr	r3, [pc, #44]	; (8008928 <tcp_parseopt+0xe8>)
 80088fa:	881a      	ldrh	r2, [r3, #0]
 80088fc:	4b09      	ldr	r3, [pc, #36]	; (8008924 <tcp_parseopt+0xe4>)
 80088fe:	881b      	ldrh	r3, [r3, #0]
 8008900:	429a      	cmp	r2, r3
 8008902:	d3b3      	bcc.n	800886c <tcp_parseopt+0x2c>
 8008904:	e004      	b.n	8008910 <tcp_parseopt+0xd0>
          return;
 8008906:	bf00      	nop
 8008908:	e002      	b.n	8008910 <tcp_parseopt+0xd0>
            return;
 800890a:	bf00      	nop
 800890c:	e000      	b.n	8008910 <tcp_parseopt+0xd0>
            return;
 800890e:	bf00      	nop
      }
    }
  }
}
 8008910:	3710      	adds	r7, #16
 8008912:	46bd      	mov	sp, r7
 8008914:	bd80      	pop	{r7, pc}
 8008916:	bf00      	nop
 8008918:	0800f86c 	.word	0x0800f86c
 800891c:	0800fc44 	.word	0x0800fc44
 8008920:	0800f8b8 	.word	0x0800f8b8
 8008924:	200000e0 	.word	0x200000e0
 8008928:	200000e8 	.word	0x200000e8

0800892c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800892c:	b480      	push	{r7}
 800892e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8008930:	4b05      	ldr	r3, [pc, #20]	; (8008948 <tcp_trigger_input_pcb_close+0x1c>)
 8008932:	781b      	ldrb	r3, [r3, #0]
 8008934:	f043 0310 	orr.w	r3, r3, #16
 8008938:	b2da      	uxtb	r2, r3
 800893a:	4b03      	ldr	r3, [pc, #12]	; (8008948 <tcp_trigger_input_pcb_close+0x1c>)
 800893c:	701a      	strb	r2, [r3, #0]
}
 800893e:	bf00      	nop
 8008940:	46bd      	mov	sp, r7
 8008942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008946:	4770      	bx	lr
 8008948:	200000f9 	.word	0x200000f9

0800894c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b084      	sub	sp, #16
 8008950:	af00      	add	r7, sp, #0
 8008952:	60f8      	str	r0, [r7, #12]
 8008954:	60b9      	str	r1, [r7, #8]
 8008956:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d00a      	beq.n	8008974 <tcp_route+0x28>
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	7a1b      	ldrb	r3, [r3, #8]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d006      	beq.n	8008974 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	7a1b      	ldrb	r3, [r3, #8]
 800896a:	4618      	mov	r0, r3
 800896c:	f7fb ff18 	bl	80047a0 <netif_get_by_index>
 8008970:	4603      	mov	r3, r0
 8008972:	e003      	b.n	800897c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8008974:	6878      	ldr	r0, [r7, #4]
 8008976:	f003 fa2f 	bl	800bdd8 <ip4_route>
 800897a:	4603      	mov	r3, r0
  }
}
 800897c:	4618      	mov	r0, r3
 800897e:	3710      	adds	r7, #16
 8008980:	46bd      	mov	sp, r7
 8008982:	bd80      	pop	{r7, pc}

08008984 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8008984:	b590      	push	{r4, r7, lr}
 8008986:	b087      	sub	sp, #28
 8008988:	af00      	add	r7, sp, #0
 800898a:	60f8      	str	r0, [r7, #12]
 800898c:	60b9      	str	r1, [r7, #8]
 800898e:	603b      	str	r3, [r7, #0]
 8008990:	4613      	mov	r3, r2
 8008992:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d105      	bne.n	80089a6 <tcp_create_segment+0x22>
 800899a:	4b44      	ldr	r3, [pc, #272]	; (8008aac <tcp_create_segment+0x128>)
 800899c:	22a3      	movs	r2, #163	; 0xa3
 800899e:	4944      	ldr	r1, [pc, #272]	; (8008ab0 <tcp_create_segment+0x12c>)
 80089a0:	4844      	ldr	r0, [pc, #272]	; (8008ab4 <tcp_create_segment+0x130>)
 80089a2:	f004 fc61 	bl	800d268 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80089a6:	68bb      	ldr	r3, [r7, #8]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d105      	bne.n	80089b8 <tcp_create_segment+0x34>
 80089ac:	4b3f      	ldr	r3, [pc, #252]	; (8008aac <tcp_create_segment+0x128>)
 80089ae:	22a4      	movs	r2, #164	; 0xa4
 80089b0:	4941      	ldr	r1, [pc, #260]	; (8008ab8 <tcp_create_segment+0x134>)
 80089b2:	4840      	ldr	r0, [pc, #256]	; (8008ab4 <tcp_create_segment+0x130>)
 80089b4:	f004 fc58 	bl	800d268 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80089b8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80089bc:	009b      	lsls	r3, r3, #2
 80089be:	b2db      	uxtb	r3, r3
 80089c0:	f003 0304 	and.w	r3, r3, #4
 80089c4:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80089c6:	2003      	movs	r0, #3
 80089c8:	f7fb fbec 	bl	80041a4 <memp_malloc>
 80089cc:	6138      	str	r0, [r7, #16]
 80089ce:	693b      	ldr	r3, [r7, #16]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d104      	bne.n	80089de <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80089d4:	68b8      	ldr	r0, [r7, #8]
 80089d6:	f7fc fa15 	bl	8004e04 <pbuf_free>
    return NULL;
 80089da:	2300      	movs	r3, #0
 80089dc:	e061      	b.n	8008aa2 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 80089de:	693b      	ldr	r3, [r7, #16]
 80089e0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80089e4:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 80089e6:	693b      	ldr	r3, [r7, #16]
 80089e8:	2200      	movs	r2, #0
 80089ea:	601a      	str	r2, [r3, #0]
  seg->p = p;
 80089ec:	693b      	ldr	r3, [r7, #16]
 80089ee:	68ba      	ldr	r2, [r7, #8]
 80089f0:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80089f2:	68bb      	ldr	r3, [r7, #8]
 80089f4:	891a      	ldrh	r2, [r3, #8]
 80089f6:	7dfb      	ldrb	r3, [r7, #23]
 80089f8:	b29b      	uxth	r3, r3
 80089fa:	429a      	cmp	r2, r3
 80089fc:	d205      	bcs.n	8008a0a <tcp_create_segment+0x86>
 80089fe:	4b2b      	ldr	r3, [pc, #172]	; (8008aac <tcp_create_segment+0x128>)
 8008a00:	22b0      	movs	r2, #176	; 0xb0
 8008a02:	492e      	ldr	r1, [pc, #184]	; (8008abc <tcp_create_segment+0x138>)
 8008a04:	482b      	ldr	r0, [pc, #172]	; (8008ab4 <tcp_create_segment+0x130>)
 8008a06:	f004 fc2f 	bl	800d268 <iprintf>
  seg->len = p->tot_len - optlen;
 8008a0a:	68bb      	ldr	r3, [r7, #8]
 8008a0c:	891a      	ldrh	r2, [r3, #8]
 8008a0e:	7dfb      	ldrb	r3, [r7, #23]
 8008a10:	b29b      	uxth	r3, r3
 8008a12:	1ad3      	subs	r3, r2, r3
 8008a14:	b29a      	uxth	r2, r3
 8008a16:	693b      	ldr	r3, [r7, #16]
 8008a18:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8008a1a:	2114      	movs	r1, #20
 8008a1c:	68b8      	ldr	r0, [r7, #8]
 8008a1e:	f7fc f95b 	bl	8004cd8 <pbuf_add_header>
 8008a22:	4603      	mov	r3, r0
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d004      	beq.n	8008a32 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8008a28:	6938      	ldr	r0, [r7, #16]
 8008a2a:	f7fd fce0 	bl	80063ee <tcp_seg_free>
    return NULL;
 8008a2e:	2300      	movs	r3, #0
 8008a30:	e037      	b.n	8008aa2 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8008a32:	693b      	ldr	r3, [r7, #16]
 8008a34:	685b      	ldr	r3, [r3, #4]
 8008a36:	685a      	ldr	r2, [r3, #4]
 8008a38:	693b      	ldr	r3, [r7, #16]
 8008a3a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	8ada      	ldrh	r2, [r3, #22]
 8008a40:	693b      	ldr	r3, [r7, #16]
 8008a42:	68dc      	ldr	r4, [r3, #12]
 8008a44:	4610      	mov	r0, r2
 8008a46:	f7fa ff57 	bl	80038f8 <lwip_htons>
 8008a4a:	4603      	mov	r3, r0
 8008a4c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	8b1a      	ldrh	r2, [r3, #24]
 8008a52:	693b      	ldr	r3, [r7, #16]
 8008a54:	68dc      	ldr	r4, [r3, #12]
 8008a56:	4610      	mov	r0, r2
 8008a58:	f7fa ff4e 	bl	80038f8 <lwip_htons>
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8008a60:	693b      	ldr	r3, [r7, #16]
 8008a62:	68dc      	ldr	r4, [r3, #12]
 8008a64:	6838      	ldr	r0, [r7, #0]
 8008a66:	f7fa ff5c 	bl	8003922 <lwip_htonl>
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8008a6e:	7dfb      	ldrb	r3, [r7, #23]
 8008a70:	089b      	lsrs	r3, r3, #2
 8008a72:	b2db      	uxtb	r3, r3
 8008a74:	b29b      	uxth	r3, r3
 8008a76:	3305      	adds	r3, #5
 8008a78:	b29b      	uxth	r3, r3
 8008a7a:	031b      	lsls	r3, r3, #12
 8008a7c:	b29a      	uxth	r2, r3
 8008a7e:	79fb      	ldrb	r3, [r7, #7]
 8008a80:	b29b      	uxth	r3, r3
 8008a82:	4313      	orrs	r3, r2
 8008a84:	b29a      	uxth	r2, r3
 8008a86:	693b      	ldr	r3, [r7, #16]
 8008a88:	68dc      	ldr	r4, [r3, #12]
 8008a8a:	4610      	mov	r0, r2
 8008a8c:	f7fa ff34 	bl	80038f8 <lwip_htons>
 8008a90:	4603      	mov	r3, r0
 8008a92:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8008a94:	693b      	ldr	r3, [r7, #16]
 8008a96:	68db      	ldr	r3, [r3, #12]
 8008a98:	2200      	movs	r2, #0
 8008a9a:	749a      	strb	r2, [r3, #18]
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	74da      	strb	r2, [r3, #19]
  return seg;
 8008aa0:	693b      	ldr	r3, [r7, #16]
}
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	371c      	adds	r7, #28
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	bd90      	pop	{r4, r7, pc}
 8008aaa:	bf00      	nop
 8008aac:	0800fc60 	.word	0x0800fc60
 8008ab0:	0800fc94 	.word	0x0800fc94
 8008ab4:	0800fcb4 	.word	0x0800fcb4
 8008ab8:	0800fcdc 	.word	0x0800fcdc
 8008abc:	0800fd00 	.word	0x0800fd00

08008ac0 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8008ac0:	b590      	push	{r4, r7, lr}
 8008ac2:	b08b      	sub	sp, #44	; 0x2c
 8008ac4:	af02      	add	r7, sp, #8
 8008ac6:	6078      	str	r0, [r7, #4]
 8008ac8:	460b      	mov	r3, r1
 8008aca:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8008acc:	2300      	movs	r3, #0
 8008ace:	61fb      	str	r3, [r7, #28]
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d106      	bne.n	8008aec <tcp_split_unsent_seg+0x2c>
 8008ade:	4b95      	ldr	r3, [pc, #596]	; (8008d34 <tcp_split_unsent_seg+0x274>)
 8008ae0:	f240 324b 	movw	r2, #843	; 0x34b
 8008ae4:	4994      	ldr	r1, [pc, #592]	; (8008d38 <tcp_split_unsent_seg+0x278>)
 8008ae6:	4895      	ldr	r0, [pc, #596]	; (8008d3c <tcp_split_unsent_seg+0x27c>)
 8008ae8:	f004 fbbe 	bl	800d268 <iprintf>

  useg = pcb->unsent;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008af0:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8008af2:	697b      	ldr	r3, [r7, #20]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d102      	bne.n	8008afe <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8008af8:	f04f 33ff 	mov.w	r3, #4294967295
 8008afc:	e116      	b.n	8008d2c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8008afe:	887b      	ldrh	r3, [r7, #2]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d109      	bne.n	8008b18 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8008b04:	4b8b      	ldr	r3, [pc, #556]	; (8008d34 <tcp_split_unsent_seg+0x274>)
 8008b06:	f240 3253 	movw	r2, #851	; 0x353
 8008b0a:	498d      	ldr	r1, [pc, #564]	; (8008d40 <tcp_split_unsent_seg+0x280>)
 8008b0c:	488b      	ldr	r0, [pc, #556]	; (8008d3c <tcp_split_unsent_seg+0x27c>)
 8008b0e:	f004 fbab 	bl	800d268 <iprintf>
    return ERR_VAL;
 8008b12:	f06f 0305 	mvn.w	r3, #5
 8008b16:	e109      	b.n	8008d2c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8008b18:	697b      	ldr	r3, [r7, #20]
 8008b1a:	891b      	ldrh	r3, [r3, #8]
 8008b1c:	887a      	ldrh	r2, [r7, #2]
 8008b1e:	429a      	cmp	r2, r3
 8008b20:	d301      	bcc.n	8008b26 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8008b22:	2300      	movs	r3, #0
 8008b24:	e102      	b.n	8008d2c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008b2a:	887a      	ldrh	r2, [r7, #2]
 8008b2c:	429a      	cmp	r2, r3
 8008b2e:	d906      	bls.n	8008b3e <tcp_split_unsent_seg+0x7e>
 8008b30:	4b80      	ldr	r3, [pc, #512]	; (8008d34 <tcp_split_unsent_seg+0x274>)
 8008b32:	f240 325b 	movw	r2, #859	; 0x35b
 8008b36:	4983      	ldr	r1, [pc, #524]	; (8008d44 <tcp_split_unsent_seg+0x284>)
 8008b38:	4880      	ldr	r0, [pc, #512]	; (8008d3c <tcp_split_unsent_seg+0x27c>)
 8008b3a:	f004 fb95 	bl	800d268 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8008b3e:	697b      	ldr	r3, [r7, #20]
 8008b40:	891b      	ldrh	r3, [r3, #8]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d106      	bne.n	8008b54 <tcp_split_unsent_seg+0x94>
 8008b46:	4b7b      	ldr	r3, [pc, #492]	; (8008d34 <tcp_split_unsent_seg+0x274>)
 8008b48:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8008b4c:	497e      	ldr	r1, [pc, #504]	; (8008d48 <tcp_split_unsent_seg+0x288>)
 8008b4e:	487b      	ldr	r0, [pc, #492]	; (8008d3c <tcp_split_unsent_seg+0x27c>)
 8008b50:	f004 fb8a 	bl	800d268 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8008b54:	697b      	ldr	r3, [r7, #20]
 8008b56:	7a9b      	ldrb	r3, [r3, #10]
 8008b58:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8008b5a:	7bfb      	ldrb	r3, [r7, #15]
 8008b5c:	009b      	lsls	r3, r3, #2
 8008b5e:	b2db      	uxtb	r3, r3
 8008b60:	f003 0304 	and.w	r3, r3, #4
 8008b64:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8008b66:	697b      	ldr	r3, [r7, #20]
 8008b68:	891a      	ldrh	r2, [r3, #8]
 8008b6a:	887b      	ldrh	r3, [r7, #2]
 8008b6c:	1ad3      	subs	r3, r2, r3
 8008b6e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8008b70:	7bbb      	ldrb	r3, [r7, #14]
 8008b72:	b29a      	uxth	r2, r3
 8008b74:	89bb      	ldrh	r3, [r7, #12]
 8008b76:	4413      	add	r3, r2
 8008b78:	b29b      	uxth	r3, r3
 8008b7a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8008b7e:	4619      	mov	r1, r3
 8008b80:	2036      	movs	r0, #54	; 0x36
 8008b82:	f7fb fe5d 	bl	8004840 <pbuf_alloc>
 8008b86:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8008b88:	693b      	ldr	r3, [r7, #16]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	f000 80b7 	beq.w	8008cfe <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8008b90:	697b      	ldr	r3, [r7, #20]
 8008b92:	685b      	ldr	r3, [r3, #4]
 8008b94:	891a      	ldrh	r2, [r3, #8]
 8008b96:	697b      	ldr	r3, [r7, #20]
 8008b98:	891b      	ldrh	r3, [r3, #8]
 8008b9a:	1ad3      	subs	r3, r2, r3
 8008b9c:	b29a      	uxth	r2, r3
 8008b9e:	887b      	ldrh	r3, [r7, #2]
 8008ba0:	4413      	add	r3, r2
 8008ba2:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8008ba4:	697b      	ldr	r3, [r7, #20]
 8008ba6:	6858      	ldr	r0, [r3, #4]
 8008ba8:	693b      	ldr	r3, [r7, #16]
 8008baa:	685a      	ldr	r2, [r3, #4]
 8008bac:	7bbb      	ldrb	r3, [r7, #14]
 8008bae:	18d1      	adds	r1, r2, r3
 8008bb0:	897b      	ldrh	r3, [r7, #10]
 8008bb2:	89ba      	ldrh	r2, [r7, #12]
 8008bb4:	f7fc fb20 	bl	80051f8 <pbuf_copy_partial>
 8008bb8:	4603      	mov	r3, r0
 8008bba:	461a      	mov	r2, r3
 8008bbc:	89bb      	ldrh	r3, [r7, #12]
 8008bbe:	4293      	cmp	r3, r2
 8008bc0:	f040 809f 	bne.w	8008d02 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8008bc4:	697b      	ldr	r3, [r7, #20]
 8008bc6:	68db      	ldr	r3, [r3, #12]
 8008bc8:	899b      	ldrh	r3, [r3, #12]
 8008bca:	b29b      	uxth	r3, r3
 8008bcc:	4618      	mov	r0, r3
 8008bce:	f7fa fe93 	bl	80038f8 <lwip_htons>
 8008bd2:	4603      	mov	r3, r0
 8008bd4:	b2db      	uxtb	r3, r3
 8008bd6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008bda:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8008bdc:	2300      	movs	r3, #0
 8008bde:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8008be0:	7efb      	ldrb	r3, [r7, #27]
 8008be2:	f003 0308 	and.w	r3, r3, #8
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d007      	beq.n	8008bfa <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8008bea:	7efb      	ldrb	r3, [r7, #27]
 8008bec:	f023 0308 	bic.w	r3, r3, #8
 8008bf0:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8008bf2:	7ebb      	ldrb	r3, [r7, #26]
 8008bf4:	f043 0308 	orr.w	r3, r3, #8
 8008bf8:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8008bfa:	7efb      	ldrb	r3, [r7, #27]
 8008bfc:	f003 0301 	and.w	r3, r3, #1
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d007      	beq.n	8008c14 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8008c04:	7efb      	ldrb	r3, [r7, #27]
 8008c06:	f023 0301 	bic.w	r3, r3, #1
 8008c0a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8008c0c:	7ebb      	ldrb	r3, [r7, #26]
 8008c0e:	f043 0301 	orr.w	r3, r3, #1
 8008c12:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8008c14:	697b      	ldr	r3, [r7, #20]
 8008c16:	68db      	ldr	r3, [r3, #12]
 8008c18:	685b      	ldr	r3, [r3, #4]
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	f7fa fe81 	bl	8003922 <lwip_htonl>
 8008c20:	4602      	mov	r2, r0
 8008c22:	887b      	ldrh	r3, [r7, #2]
 8008c24:	18d1      	adds	r1, r2, r3
 8008c26:	7eba      	ldrb	r2, [r7, #26]
 8008c28:	7bfb      	ldrb	r3, [r7, #15]
 8008c2a:	9300      	str	r3, [sp, #0]
 8008c2c:	460b      	mov	r3, r1
 8008c2e:	6939      	ldr	r1, [r7, #16]
 8008c30:	6878      	ldr	r0, [r7, #4]
 8008c32:	f7ff fea7 	bl	8008984 <tcp_create_segment>
 8008c36:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8008c38:	69fb      	ldr	r3, [r7, #28]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d063      	beq.n	8008d06 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8008c3e:	697b      	ldr	r3, [r7, #20]
 8008c40:	685b      	ldr	r3, [r3, #4]
 8008c42:	4618      	mov	r0, r3
 8008c44:	f7fc f966 	bl	8004f14 <pbuf_clen>
 8008c48:	4603      	mov	r3, r0
 8008c4a:	461a      	mov	r2, r3
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8008c52:	1a9b      	subs	r3, r3, r2
 8008c54:	b29a      	uxth	r2, r3
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8008c5c:	697b      	ldr	r3, [r7, #20]
 8008c5e:	6858      	ldr	r0, [r3, #4]
 8008c60:	697b      	ldr	r3, [r7, #20]
 8008c62:	685b      	ldr	r3, [r3, #4]
 8008c64:	891a      	ldrh	r2, [r3, #8]
 8008c66:	89bb      	ldrh	r3, [r7, #12]
 8008c68:	1ad3      	subs	r3, r2, r3
 8008c6a:	b29b      	uxth	r3, r3
 8008c6c:	4619      	mov	r1, r3
 8008c6e:	f7fb ff43 	bl	8004af8 <pbuf_realloc>
  useg->len -= remainder;
 8008c72:	697b      	ldr	r3, [r7, #20]
 8008c74:	891a      	ldrh	r2, [r3, #8]
 8008c76:	89bb      	ldrh	r3, [r7, #12]
 8008c78:	1ad3      	subs	r3, r2, r3
 8008c7a:	b29a      	uxth	r2, r3
 8008c7c:	697b      	ldr	r3, [r7, #20]
 8008c7e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8008c80:	697b      	ldr	r3, [r7, #20]
 8008c82:	68db      	ldr	r3, [r3, #12]
 8008c84:	899b      	ldrh	r3, [r3, #12]
 8008c86:	b29c      	uxth	r4, r3
 8008c88:	7efb      	ldrb	r3, [r7, #27]
 8008c8a:	b29b      	uxth	r3, r3
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	f7fa fe33 	bl	80038f8 <lwip_htons>
 8008c92:	4603      	mov	r3, r0
 8008c94:	461a      	mov	r2, r3
 8008c96:	697b      	ldr	r3, [r7, #20]
 8008c98:	68db      	ldr	r3, [r3, #12]
 8008c9a:	4322      	orrs	r2, r4
 8008c9c:	b292      	uxth	r2, r2
 8008c9e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8008ca0:	697b      	ldr	r3, [r7, #20]
 8008ca2:	685b      	ldr	r3, [r3, #4]
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	f7fc f935 	bl	8004f14 <pbuf_clen>
 8008caa:	4603      	mov	r3, r0
 8008cac:	461a      	mov	r2, r3
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8008cb4:	4413      	add	r3, r2
 8008cb6:	b29a      	uxth	r2, r3
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8008cbe:	69fb      	ldr	r3, [r7, #28]
 8008cc0:	685b      	ldr	r3, [r3, #4]
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	f7fc f926 	bl	8004f14 <pbuf_clen>
 8008cc8:	4603      	mov	r3, r0
 8008cca:	461a      	mov	r2, r3
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8008cd2:	4413      	add	r3, r2
 8008cd4:	b29a      	uxth	r2, r3
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8008cdc:	697b      	ldr	r3, [r7, #20]
 8008cde:	681a      	ldr	r2, [r3, #0]
 8008ce0:	69fb      	ldr	r3, [r7, #28]
 8008ce2:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8008ce4:	697b      	ldr	r3, [r7, #20]
 8008ce6:	69fa      	ldr	r2, [r7, #28]
 8008ce8:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8008cea:	69fb      	ldr	r3, [r7, #28]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d103      	bne.n	8008cfa <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	e016      	b.n	8008d2c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8008cfe:	bf00      	nop
 8008d00:	e002      	b.n	8008d08 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8008d02:	bf00      	nop
 8008d04:	e000      	b.n	8008d08 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8008d06:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8008d08:	69fb      	ldr	r3, [r7, #28]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d006      	beq.n	8008d1c <tcp_split_unsent_seg+0x25c>
 8008d0e:	4b09      	ldr	r3, [pc, #36]	; (8008d34 <tcp_split_unsent_seg+0x274>)
 8008d10:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8008d14:	490d      	ldr	r1, [pc, #52]	; (8008d4c <tcp_split_unsent_seg+0x28c>)
 8008d16:	4809      	ldr	r0, [pc, #36]	; (8008d3c <tcp_split_unsent_seg+0x27c>)
 8008d18:	f004 faa6 	bl	800d268 <iprintf>
  if (p != NULL) {
 8008d1c:	693b      	ldr	r3, [r7, #16]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d002      	beq.n	8008d28 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8008d22:	6938      	ldr	r0, [r7, #16]
 8008d24:	f7fc f86e 	bl	8004e04 <pbuf_free>
  }

  return ERR_MEM;
 8008d28:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	3724      	adds	r7, #36	; 0x24
 8008d30:	46bd      	mov	sp, r7
 8008d32:	bd90      	pop	{r4, r7, pc}
 8008d34:	0800fc60 	.word	0x0800fc60
 8008d38:	0800fff4 	.word	0x0800fff4
 8008d3c:	0800fcb4 	.word	0x0800fcb4
 8008d40:	08010018 	.word	0x08010018
 8008d44:	0801003c 	.word	0x0801003c
 8008d48:	0801004c 	.word	0x0801004c
 8008d4c:	0801005c 	.word	0x0801005c

08008d50 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8008d50:	b590      	push	{r4, r7, lr}
 8008d52:	b085      	sub	sp, #20
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d106      	bne.n	8008d6c <tcp_send_fin+0x1c>
 8008d5e:	4b21      	ldr	r3, [pc, #132]	; (8008de4 <tcp_send_fin+0x94>)
 8008d60:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8008d64:	4920      	ldr	r1, [pc, #128]	; (8008de8 <tcp_send_fin+0x98>)
 8008d66:	4821      	ldr	r0, [pc, #132]	; (8008dec <tcp_send_fin+0x9c>)
 8008d68:	f004 fa7e 	bl	800d268 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d02e      	beq.n	8008dd2 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d78:	60fb      	str	r3, [r7, #12]
 8008d7a:	e002      	b.n	8008d82 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d1f8      	bne.n	8008d7c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	68db      	ldr	r3, [r3, #12]
 8008d8e:	899b      	ldrh	r3, [r3, #12]
 8008d90:	b29b      	uxth	r3, r3
 8008d92:	4618      	mov	r0, r3
 8008d94:	f7fa fdb0 	bl	80038f8 <lwip_htons>
 8008d98:	4603      	mov	r3, r0
 8008d9a:	b2db      	uxtb	r3, r3
 8008d9c:	f003 0307 	and.w	r3, r3, #7
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d116      	bne.n	8008dd2 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	68db      	ldr	r3, [r3, #12]
 8008da8:	899b      	ldrh	r3, [r3, #12]
 8008daa:	b29c      	uxth	r4, r3
 8008dac:	2001      	movs	r0, #1
 8008dae:	f7fa fda3 	bl	80038f8 <lwip_htons>
 8008db2:	4603      	mov	r3, r0
 8008db4:	461a      	mov	r2, r3
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	68db      	ldr	r3, [r3, #12]
 8008dba:	4322      	orrs	r2, r4
 8008dbc:	b292      	uxth	r2, r2
 8008dbe:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	8b5b      	ldrh	r3, [r3, #26]
 8008dc4:	f043 0320 	orr.w	r3, r3, #32
 8008dc8:	b29a      	uxth	r2, r3
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8008dce:	2300      	movs	r3, #0
 8008dd0:	e004      	b.n	8008ddc <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8008dd2:	2101      	movs	r1, #1
 8008dd4:	6878      	ldr	r0, [r7, #4]
 8008dd6:	f000 f80b 	bl	8008df0 <tcp_enqueue_flags>
 8008dda:	4603      	mov	r3, r0
}
 8008ddc:	4618      	mov	r0, r3
 8008dde:	3714      	adds	r7, #20
 8008de0:	46bd      	mov	sp, r7
 8008de2:	bd90      	pop	{r4, r7, pc}
 8008de4:	0800fc60 	.word	0x0800fc60
 8008de8:	08010068 	.word	0x08010068
 8008dec:	0800fcb4 	.word	0x0800fcb4

08008df0 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b08a      	sub	sp, #40	; 0x28
 8008df4:	af02      	add	r7, sp, #8
 8008df6:	6078      	str	r0, [r7, #4]
 8008df8:	460b      	mov	r3, r1
 8008dfa:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8008e00:	2300      	movs	r3, #0
 8008e02:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8008e04:	78fb      	ldrb	r3, [r7, #3]
 8008e06:	f003 0303 	and.w	r3, r3, #3
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d106      	bne.n	8008e1c <tcp_enqueue_flags+0x2c>
 8008e0e:	4b67      	ldr	r3, [pc, #412]	; (8008fac <tcp_enqueue_flags+0x1bc>)
 8008e10:	f240 4211 	movw	r2, #1041	; 0x411
 8008e14:	4966      	ldr	r1, [pc, #408]	; (8008fb0 <tcp_enqueue_flags+0x1c0>)
 8008e16:	4867      	ldr	r0, [pc, #412]	; (8008fb4 <tcp_enqueue_flags+0x1c4>)
 8008e18:	f004 fa26 	bl	800d268 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d106      	bne.n	8008e30 <tcp_enqueue_flags+0x40>
 8008e22:	4b62      	ldr	r3, [pc, #392]	; (8008fac <tcp_enqueue_flags+0x1bc>)
 8008e24:	f240 4213 	movw	r2, #1043	; 0x413
 8008e28:	4963      	ldr	r1, [pc, #396]	; (8008fb8 <tcp_enqueue_flags+0x1c8>)
 8008e2a:	4862      	ldr	r0, [pc, #392]	; (8008fb4 <tcp_enqueue_flags+0x1c4>)
 8008e2c:	f004 fa1c 	bl	800d268 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8008e30:	78fb      	ldrb	r3, [r7, #3]
 8008e32:	f003 0302 	and.w	r3, r3, #2
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d001      	beq.n	8008e3e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8008e3a:	2301      	movs	r3, #1
 8008e3c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8008e3e:	7ffb      	ldrb	r3, [r7, #31]
 8008e40:	009b      	lsls	r3, r3, #2
 8008e42:	b2db      	uxtb	r3, r3
 8008e44:	f003 0304 	and.w	r3, r3, #4
 8008e48:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8008e4a:	7dfb      	ldrb	r3, [r7, #23]
 8008e4c:	b29b      	uxth	r3, r3
 8008e4e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8008e52:	4619      	mov	r1, r3
 8008e54:	2036      	movs	r0, #54	; 0x36
 8008e56:	f7fb fcf3 	bl	8004840 <pbuf_alloc>
 8008e5a:	6138      	str	r0, [r7, #16]
 8008e5c:	693b      	ldr	r3, [r7, #16]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d109      	bne.n	8008e76 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	8b5b      	ldrh	r3, [r3, #26]
 8008e66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e6a:	b29a      	uxth	r2, r3
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8008e70:	f04f 33ff 	mov.w	r3, #4294967295
 8008e74:	e095      	b.n	8008fa2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8008e76:	693b      	ldr	r3, [r7, #16]
 8008e78:	895a      	ldrh	r2, [r3, #10]
 8008e7a:	7dfb      	ldrb	r3, [r7, #23]
 8008e7c:	b29b      	uxth	r3, r3
 8008e7e:	429a      	cmp	r2, r3
 8008e80:	d206      	bcs.n	8008e90 <tcp_enqueue_flags+0xa0>
 8008e82:	4b4a      	ldr	r3, [pc, #296]	; (8008fac <tcp_enqueue_flags+0x1bc>)
 8008e84:	f240 4239 	movw	r2, #1081	; 0x439
 8008e88:	494c      	ldr	r1, [pc, #304]	; (8008fbc <tcp_enqueue_flags+0x1cc>)
 8008e8a:	484a      	ldr	r0, [pc, #296]	; (8008fb4 <tcp_enqueue_flags+0x1c4>)
 8008e8c:	f004 f9ec 	bl	800d268 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8008e94:	78fa      	ldrb	r2, [r7, #3]
 8008e96:	7ffb      	ldrb	r3, [r7, #31]
 8008e98:	9300      	str	r3, [sp, #0]
 8008e9a:	460b      	mov	r3, r1
 8008e9c:	6939      	ldr	r1, [r7, #16]
 8008e9e:	6878      	ldr	r0, [r7, #4]
 8008ea0:	f7ff fd70 	bl	8008984 <tcp_create_segment>
 8008ea4:	60f8      	str	r0, [r7, #12]
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d109      	bne.n	8008ec0 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	8b5b      	ldrh	r3, [r3, #26]
 8008eb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008eb4:	b29a      	uxth	r2, r3
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8008eba:	f04f 33ff 	mov.w	r3, #4294967295
 8008ebe:	e070      	b.n	8008fa2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	68db      	ldr	r3, [r3, #12]
 8008ec4:	f003 0303 	and.w	r3, r3, #3
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d006      	beq.n	8008eda <tcp_enqueue_flags+0xea>
 8008ecc:	4b37      	ldr	r3, [pc, #220]	; (8008fac <tcp_enqueue_flags+0x1bc>)
 8008ece:	f240 4242 	movw	r2, #1090	; 0x442
 8008ed2:	493b      	ldr	r1, [pc, #236]	; (8008fc0 <tcp_enqueue_flags+0x1d0>)
 8008ed4:	4837      	ldr	r0, [pc, #220]	; (8008fb4 <tcp_enqueue_flags+0x1c4>)
 8008ed6:	f004 f9c7 	bl	800d268 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	891b      	ldrh	r3, [r3, #8]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d006      	beq.n	8008ef0 <tcp_enqueue_flags+0x100>
 8008ee2:	4b32      	ldr	r3, [pc, #200]	; (8008fac <tcp_enqueue_flags+0x1bc>)
 8008ee4:	f240 4243 	movw	r2, #1091	; 0x443
 8008ee8:	4936      	ldr	r1, [pc, #216]	; (8008fc4 <tcp_enqueue_flags+0x1d4>)
 8008eea:	4832      	ldr	r0, [pc, #200]	; (8008fb4 <tcp_enqueue_flags+0x1c4>)
 8008eec:	f004 f9bc 	bl	800d268 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d103      	bne.n	8008f00 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	68fa      	ldr	r2, [r7, #12]
 8008efc:	66da      	str	r2, [r3, #108]	; 0x6c
 8008efe:	e00d      	b.n	8008f1c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f04:	61bb      	str	r3, [r7, #24]
 8008f06:	e002      	b.n	8008f0e <tcp_enqueue_flags+0x11e>
 8008f08:	69bb      	ldr	r3, [r7, #24]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	61bb      	str	r3, [r7, #24]
 8008f0e:	69bb      	ldr	r3, [r7, #24]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d1f8      	bne.n	8008f08 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8008f16:	69bb      	ldr	r3, [r7, #24]
 8008f18:	68fa      	ldr	r2, [r7, #12]
 8008f1a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2200      	movs	r2, #0
 8008f20:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8008f24:	78fb      	ldrb	r3, [r7, #3]
 8008f26:	f003 0302 	and.w	r3, r3, #2
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d104      	bne.n	8008f38 <tcp_enqueue_flags+0x148>
 8008f2e:	78fb      	ldrb	r3, [r7, #3]
 8008f30:	f003 0301 	and.w	r3, r3, #1
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d004      	beq.n	8008f42 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f3c:	1c5a      	adds	r2, r3, #1
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8008f42:	78fb      	ldrb	r3, [r7, #3]
 8008f44:	f003 0301 	and.w	r3, r3, #1
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d006      	beq.n	8008f5a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	8b5b      	ldrh	r3, [r3, #26]
 8008f50:	f043 0320 	orr.w	r3, r3, #32
 8008f54:	b29a      	uxth	r2, r3
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	685b      	ldr	r3, [r3, #4]
 8008f5e:	4618      	mov	r0, r3
 8008f60:	f7fb ffd8 	bl	8004f14 <pbuf_clen>
 8008f64:	4603      	mov	r3, r0
 8008f66:	461a      	mov	r2, r3
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8008f6e:	4413      	add	r3, r2
 8008f70:	b29a      	uxth	r2, r3
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d00e      	beq.n	8008fa0 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d10a      	bne.n	8008fa0 <tcp_enqueue_flags+0x1b0>
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d106      	bne.n	8008fa0 <tcp_enqueue_flags+0x1b0>
 8008f92:	4b06      	ldr	r3, [pc, #24]	; (8008fac <tcp_enqueue_flags+0x1bc>)
 8008f94:	f240 4265 	movw	r2, #1125	; 0x465
 8008f98:	490b      	ldr	r1, [pc, #44]	; (8008fc8 <tcp_enqueue_flags+0x1d8>)
 8008f9a:	4806      	ldr	r0, [pc, #24]	; (8008fb4 <tcp_enqueue_flags+0x1c4>)
 8008f9c:	f004 f964 	bl	800d268 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8008fa0:	2300      	movs	r3, #0
}
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	3720      	adds	r7, #32
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	bd80      	pop	{r7, pc}
 8008faa:	bf00      	nop
 8008fac:	0800fc60 	.word	0x0800fc60
 8008fb0:	08010084 	.word	0x08010084
 8008fb4:	0800fcb4 	.word	0x0800fcb4
 8008fb8:	080100dc 	.word	0x080100dc
 8008fbc:	080100fc 	.word	0x080100fc
 8008fc0:	08010138 	.word	0x08010138
 8008fc4:	08010150 	.word	0x08010150
 8008fc8:	0801017c 	.word	0x0801017c

08008fcc <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8008fcc:	b5b0      	push	{r4, r5, r7, lr}
 8008fce:	b08a      	sub	sp, #40	; 0x28
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d106      	bne.n	8008fe8 <tcp_output+0x1c>
 8008fda:	4b9e      	ldr	r3, [pc, #632]	; (8009254 <tcp_output+0x288>)
 8008fdc:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8008fe0:	499d      	ldr	r1, [pc, #628]	; (8009258 <tcp_output+0x28c>)
 8008fe2:	489e      	ldr	r0, [pc, #632]	; (800925c <tcp_output+0x290>)
 8008fe4:	f004 f940 	bl	800d268 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	7d1b      	ldrb	r3, [r3, #20]
 8008fec:	2b01      	cmp	r3, #1
 8008fee:	d106      	bne.n	8008ffe <tcp_output+0x32>
 8008ff0:	4b98      	ldr	r3, [pc, #608]	; (8009254 <tcp_output+0x288>)
 8008ff2:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8008ff6:	499a      	ldr	r1, [pc, #616]	; (8009260 <tcp_output+0x294>)
 8008ff8:	4898      	ldr	r0, [pc, #608]	; (800925c <tcp_output+0x290>)
 8008ffa:	f004 f935 	bl	800d268 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8008ffe:	4b99      	ldr	r3, [pc, #612]	; (8009264 <tcp_output+0x298>)
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	687a      	ldr	r2, [r7, #4]
 8009004:	429a      	cmp	r2, r3
 8009006:	d101      	bne.n	800900c <tcp_output+0x40>
    return ERR_OK;
 8009008:	2300      	movs	r3, #0
 800900a:	e1ce      	b.n	80093aa <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009018:	4293      	cmp	r3, r2
 800901a:	bf28      	it	cs
 800901c:	4613      	movcs	r3, r2
 800901e:	b29b      	uxth	r3, r3
 8009020:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009026:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8009028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800902a:	2b00      	cmp	r3, #0
 800902c:	d10b      	bne.n	8009046 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	8b5b      	ldrh	r3, [r3, #26]
 8009032:	f003 0302 	and.w	r3, r3, #2
 8009036:	2b00      	cmp	r3, #0
 8009038:	f000 81aa 	beq.w	8009390 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800903c:	6878      	ldr	r0, [r7, #4]
 800903e:	f000 fdcb 	bl	8009bd8 <tcp_send_empty_ack>
 8009042:	4603      	mov	r3, r0
 8009044:	e1b1      	b.n	80093aa <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8009046:	6879      	ldr	r1, [r7, #4]
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	3304      	adds	r3, #4
 800904c:	461a      	mov	r2, r3
 800904e:	6878      	ldr	r0, [r7, #4]
 8009050:	f7ff fc7c 	bl	800894c <tcp_route>
 8009054:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8009056:	697b      	ldr	r3, [r7, #20]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d102      	bne.n	8009062 <tcp_output+0x96>
    return ERR_RTE;
 800905c:	f06f 0303 	mvn.w	r3, #3
 8009060:	e1a3      	b.n	80093aa <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d003      	beq.n	8009070 <tcp_output+0xa4>
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d111      	bne.n	8009094 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8009070:	697b      	ldr	r3, [r7, #20]
 8009072:	2b00      	cmp	r3, #0
 8009074:	d002      	beq.n	800907c <tcp_output+0xb0>
 8009076:	697b      	ldr	r3, [r7, #20]
 8009078:	3304      	adds	r3, #4
 800907a:	e000      	b.n	800907e <tcp_output+0xb2>
 800907c:	2300      	movs	r3, #0
 800907e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8009080:	693b      	ldr	r3, [r7, #16]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d102      	bne.n	800908c <tcp_output+0xc0>
      return ERR_RTE;
 8009086:	f06f 0303 	mvn.w	r3, #3
 800908a:	e18e      	b.n	80093aa <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800908c:	693b      	ldr	r3, [r7, #16]
 800908e:	681a      	ldr	r2, [r3, #0]
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8009094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009096:	68db      	ldr	r3, [r3, #12]
 8009098:	685b      	ldr	r3, [r3, #4]
 800909a:	4618      	mov	r0, r3
 800909c:	f7fa fc41 	bl	8003922 <lwip_htonl>
 80090a0:	4602      	mov	r2, r0
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090a6:	1ad3      	subs	r3, r2, r3
 80090a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090aa:	8912      	ldrh	r2, [r2, #8]
 80090ac:	4413      	add	r3, r2
 80090ae:	69ba      	ldr	r2, [r7, #24]
 80090b0:	429a      	cmp	r2, r3
 80090b2:	d227      	bcs.n	8009104 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80090ba:	461a      	mov	r2, r3
 80090bc:	69bb      	ldr	r3, [r7, #24]
 80090be:	4293      	cmp	r3, r2
 80090c0:	d114      	bne.n	80090ec <tcp_output+0x120>
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d110      	bne.n	80090ec <tcp_output+0x120>
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d10b      	bne.n	80090ec <tcp_output+0x120>
      pcb->persist_cnt = 0;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2200      	movs	r2, #0
 80090d8:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
      pcb->persist_backoff = 1;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2201      	movs	r2, #1
 80090e0:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
      pcb->persist_probe = 0;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	2200      	movs	r2, #0
 80090e8:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	8b5b      	ldrh	r3, [r3, #26]
 80090f0:	f003 0302 	and.w	r3, r3, #2
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	f000 814d 	beq.w	8009394 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 80090fa:	6878      	ldr	r0, [r7, #4]
 80090fc:	f000 fd6c 	bl	8009bd8 <tcp_send_empty_ack>
 8009100:	4603      	mov	r3, r0
 8009102:	e152      	b.n	80093aa <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2200      	movs	r2, #0
 8009108:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009110:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8009112:	6a3b      	ldr	r3, [r7, #32]
 8009114:	2b00      	cmp	r3, #0
 8009116:	f000 811c 	beq.w	8009352 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800911a:	e002      	b.n	8009122 <tcp_output+0x156>
 800911c:	6a3b      	ldr	r3, [r7, #32]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	623b      	str	r3, [r7, #32]
 8009122:	6a3b      	ldr	r3, [r7, #32]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d1f8      	bne.n	800911c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800912a:	e112      	b.n	8009352 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800912c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800912e:	68db      	ldr	r3, [r3, #12]
 8009130:	899b      	ldrh	r3, [r3, #12]
 8009132:	b29b      	uxth	r3, r3
 8009134:	4618      	mov	r0, r3
 8009136:	f7fa fbdf 	bl	80038f8 <lwip_htons>
 800913a:	4603      	mov	r3, r0
 800913c:	b2db      	uxtb	r3, r3
 800913e:	f003 0304 	and.w	r3, r3, #4
 8009142:	2b00      	cmp	r3, #0
 8009144:	d006      	beq.n	8009154 <tcp_output+0x188>
 8009146:	4b43      	ldr	r3, [pc, #268]	; (8009254 <tcp_output+0x288>)
 8009148:	f240 5236 	movw	r2, #1334	; 0x536
 800914c:	4946      	ldr	r1, [pc, #280]	; (8009268 <tcp_output+0x29c>)
 800914e:	4843      	ldr	r0, [pc, #268]	; (800925c <tcp_output+0x290>)
 8009150:	f004 f88a 	bl	800d268 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009158:	2b00      	cmp	r3, #0
 800915a:	d01f      	beq.n	800919c <tcp_output+0x1d0>
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	8b5b      	ldrh	r3, [r3, #26]
 8009160:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8009164:	2b00      	cmp	r3, #0
 8009166:	d119      	bne.n	800919c <tcp_output+0x1d0>
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800916c:	2b00      	cmp	r3, #0
 800916e:	d00b      	beq.n	8009188 <tcp_output+0x1bc>
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d110      	bne.n	800919c <tcp_output+0x1d0>
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800917e:	891a      	ldrh	r2, [r3, #8]
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009184:	429a      	cmp	r2, r3
 8009186:	d209      	bcs.n	800919c <tcp_output+0x1d0>
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800918e:	2b00      	cmp	r3, #0
 8009190:	d004      	beq.n	800919c <tcp_output+0x1d0>
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009198:	2b08      	cmp	r3, #8
 800919a:	d901      	bls.n	80091a0 <tcp_output+0x1d4>
 800919c:	2301      	movs	r3, #1
 800919e:	e000      	b.n	80091a2 <tcp_output+0x1d6>
 80091a0:	2300      	movs	r3, #0
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d106      	bne.n	80091b4 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	8b5b      	ldrh	r3, [r3, #26]
 80091aa:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	f000 80e4 	beq.w	800937c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	7d1b      	ldrb	r3, [r3, #20]
 80091b8:	2b02      	cmp	r3, #2
 80091ba:	d00d      	beq.n	80091d8 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80091bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091be:	68db      	ldr	r3, [r3, #12]
 80091c0:	899b      	ldrh	r3, [r3, #12]
 80091c2:	b29c      	uxth	r4, r3
 80091c4:	2010      	movs	r0, #16
 80091c6:	f7fa fb97 	bl	80038f8 <lwip_htons>
 80091ca:	4603      	mov	r3, r0
 80091cc:	461a      	mov	r2, r3
 80091ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091d0:	68db      	ldr	r3, [r3, #12]
 80091d2:	4322      	orrs	r2, r4
 80091d4:	b292      	uxth	r2, r2
 80091d6:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 80091d8:	697a      	ldr	r2, [r7, #20]
 80091da:	6879      	ldr	r1, [r7, #4]
 80091dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80091de:	f000 f909 	bl	80093f4 <tcp_output_segment>
 80091e2:	4603      	mov	r3, r0
 80091e4:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80091e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d009      	beq.n	8009202 <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	8b5b      	ldrh	r3, [r3, #26]
 80091f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091f6:	b29a      	uxth	r2, r3
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	835a      	strh	r2, [r3, #26]
      return err;
 80091fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009200:	e0d3      	b.n	80093aa <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8009202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009204:	681a      	ldr	r2, [r3, #0]
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	7d1b      	ldrb	r3, [r3, #20]
 800920e:	2b02      	cmp	r3, #2
 8009210:	d006      	beq.n	8009220 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	8b5b      	ldrh	r3, [r3, #26]
 8009216:	f023 0303 	bic.w	r3, r3, #3
 800921a:	b29a      	uxth	r2, r3
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8009220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009222:	68db      	ldr	r3, [r3, #12]
 8009224:	685b      	ldr	r3, [r3, #4]
 8009226:	4618      	mov	r0, r3
 8009228:	f7fa fb7b 	bl	8003922 <lwip_htonl>
 800922c:	4604      	mov	r4, r0
 800922e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009230:	891b      	ldrh	r3, [r3, #8]
 8009232:	461d      	mov	r5, r3
 8009234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009236:	68db      	ldr	r3, [r3, #12]
 8009238:	899b      	ldrh	r3, [r3, #12]
 800923a:	b29b      	uxth	r3, r3
 800923c:	4618      	mov	r0, r3
 800923e:	f7fa fb5b 	bl	80038f8 <lwip_htons>
 8009242:	4603      	mov	r3, r0
 8009244:	b2db      	uxtb	r3, r3
 8009246:	f003 0303 	and.w	r3, r3, #3
 800924a:	2b00      	cmp	r3, #0
 800924c:	d00e      	beq.n	800926c <tcp_output+0x2a0>
 800924e:	2301      	movs	r3, #1
 8009250:	e00d      	b.n	800926e <tcp_output+0x2a2>
 8009252:	bf00      	nop
 8009254:	0800fc60 	.word	0x0800fc60
 8009258:	080101a4 	.word	0x080101a4
 800925c:	0800fcb4 	.word	0x0800fcb4
 8009260:	080101bc 	.word	0x080101bc
 8009264:	20006888 	.word	0x20006888
 8009268:	080101e4 	.word	0x080101e4
 800926c:	2300      	movs	r3, #0
 800926e:	442b      	add	r3, r5
 8009270:	4423      	add	r3, r4
 8009272:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009278:	68bb      	ldr	r3, [r7, #8]
 800927a:	1ad3      	subs	r3, r2, r3
 800927c:	2b00      	cmp	r3, #0
 800927e:	da02      	bge.n	8009286 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	68ba      	ldr	r2, [r7, #8]
 8009284:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8009286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009288:	891b      	ldrh	r3, [r3, #8]
 800928a:	461c      	mov	r4, r3
 800928c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800928e:	68db      	ldr	r3, [r3, #12]
 8009290:	899b      	ldrh	r3, [r3, #12]
 8009292:	b29b      	uxth	r3, r3
 8009294:	4618      	mov	r0, r3
 8009296:	f7fa fb2f 	bl	80038f8 <lwip_htons>
 800929a:	4603      	mov	r3, r0
 800929c:	b2db      	uxtb	r3, r3
 800929e:	f003 0303 	and.w	r3, r3, #3
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d001      	beq.n	80092aa <tcp_output+0x2de>
 80092a6:	2301      	movs	r3, #1
 80092a8:	e000      	b.n	80092ac <tcp_output+0x2e0>
 80092aa:	2300      	movs	r3, #0
 80092ac:	4423      	add	r3, r4
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d049      	beq.n	8009346 <tcp_output+0x37a>
      seg->next = NULL;
 80092b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092b4:	2200      	movs	r2, #0
 80092b6:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d105      	bne.n	80092cc <tcp_output+0x300>
        pcb->unacked = seg;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092c4:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 80092c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092c8:	623b      	str	r3, [r7, #32]
 80092ca:	e03f      	b.n	800934c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80092cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ce:	68db      	ldr	r3, [r3, #12]
 80092d0:	685b      	ldr	r3, [r3, #4]
 80092d2:	4618      	mov	r0, r3
 80092d4:	f7fa fb25 	bl	8003922 <lwip_htonl>
 80092d8:	4604      	mov	r4, r0
 80092da:	6a3b      	ldr	r3, [r7, #32]
 80092dc:	68db      	ldr	r3, [r3, #12]
 80092de:	685b      	ldr	r3, [r3, #4]
 80092e0:	4618      	mov	r0, r3
 80092e2:	f7fa fb1e 	bl	8003922 <lwip_htonl>
 80092e6:	4603      	mov	r3, r0
 80092e8:	1ae3      	subs	r3, r4, r3
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	da24      	bge.n	8009338 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	3370      	adds	r3, #112	; 0x70
 80092f2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80092f4:	e002      	b.n	80092fc <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 80092f6:	69fb      	ldr	r3, [r7, #28]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80092fc:	69fb      	ldr	r3, [r7, #28]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d011      	beq.n	8009328 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8009304:	69fb      	ldr	r3, [r7, #28]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	68db      	ldr	r3, [r3, #12]
 800930a:	685b      	ldr	r3, [r3, #4]
 800930c:	4618      	mov	r0, r3
 800930e:	f7fa fb08 	bl	8003922 <lwip_htonl>
 8009312:	4604      	mov	r4, r0
 8009314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009316:	68db      	ldr	r3, [r3, #12]
 8009318:	685b      	ldr	r3, [r3, #4]
 800931a:	4618      	mov	r0, r3
 800931c:	f7fa fb01 	bl	8003922 <lwip_htonl>
 8009320:	4603      	mov	r3, r0
 8009322:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8009324:	2b00      	cmp	r3, #0
 8009326:	dbe6      	blt.n	80092f6 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8009328:	69fb      	ldr	r3, [r7, #28]
 800932a:	681a      	ldr	r2, [r3, #0]
 800932c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800932e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8009330:	69fb      	ldr	r3, [r7, #28]
 8009332:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009334:	601a      	str	r2, [r3, #0]
 8009336:	e009      	b.n	800934c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8009338:	6a3b      	ldr	r3, [r7, #32]
 800933a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800933c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800933e:	6a3b      	ldr	r3, [r7, #32]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	623b      	str	r3, [r7, #32]
 8009344:	e002      	b.n	800934c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8009346:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009348:	f7fd f851 	bl	80063ee <tcp_seg_free>
    }
    seg = pcb->unsent;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009350:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8009352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009354:	2b00      	cmp	r3, #0
 8009356:	d012      	beq.n	800937e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8009358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800935a:	68db      	ldr	r3, [r3, #12]
 800935c:	685b      	ldr	r3, [r3, #4]
 800935e:	4618      	mov	r0, r3
 8009360:	f7fa fadf 	bl	8003922 <lwip_htonl>
 8009364:	4602      	mov	r2, r0
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800936a:	1ad3      	subs	r3, r2, r3
 800936c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800936e:	8912      	ldrh	r2, [r2, #8]
 8009370:	4413      	add	r3, r2
  while (seg != NULL &&
 8009372:	69ba      	ldr	r2, [r7, #24]
 8009374:	429a      	cmp	r2, r3
 8009376:	f4bf aed9 	bcs.w	800912c <tcp_output+0x160>
 800937a:	e000      	b.n	800937e <tcp_output+0x3b2>
      break;
 800937c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009382:	2b00      	cmp	r3, #0
 8009384:	d108      	bne.n	8009398 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	2200      	movs	r2, #0
 800938a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800938e:	e004      	b.n	800939a <tcp_output+0x3ce>
    goto output_done;
 8009390:	bf00      	nop
 8009392:	e002      	b.n	800939a <tcp_output+0x3ce>
    goto output_done;
 8009394:	bf00      	nop
 8009396:	e000      	b.n	800939a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8009398:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	8b5b      	ldrh	r3, [r3, #26]
 800939e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80093a2:	b29a      	uxth	r2, r3
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 80093a8:	2300      	movs	r3, #0
}
 80093aa:	4618      	mov	r0, r3
 80093ac:	3728      	adds	r7, #40	; 0x28
 80093ae:	46bd      	mov	sp, r7
 80093b0:	bdb0      	pop	{r4, r5, r7, pc}
 80093b2:	bf00      	nop

080093b4 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b082      	sub	sp, #8
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d106      	bne.n	80093d0 <tcp_output_segment_busy+0x1c>
 80093c2:	4b09      	ldr	r3, [pc, #36]	; (80093e8 <tcp_output_segment_busy+0x34>)
 80093c4:	f240 529a 	movw	r2, #1434	; 0x59a
 80093c8:	4908      	ldr	r1, [pc, #32]	; (80093ec <tcp_output_segment_busy+0x38>)
 80093ca:	4809      	ldr	r0, [pc, #36]	; (80093f0 <tcp_output_segment_busy+0x3c>)
 80093cc:	f003 ff4c 	bl	800d268 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	685b      	ldr	r3, [r3, #4]
 80093d4:	7b9b      	ldrb	r3, [r3, #14]
 80093d6:	2b01      	cmp	r3, #1
 80093d8:	d001      	beq.n	80093de <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 80093da:	2301      	movs	r3, #1
 80093dc:	e000      	b.n	80093e0 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 80093de:	2300      	movs	r3, #0
}
 80093e0:	4618      	mov	r0, r3
 80093e2:	3708      	adds	r7, #8
 80093e4:	46bd      	mov	sp, r7
 80093e6:	bd80      	pop	{r7, pc}
 80093e8:	0800fc60 	.word	0x0800fc60
 80093ec:	080101fc 	.word	0x080101fc
 80093f0:	0800fcb4 	.word	0x0800fcb4

080093f4 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80093f4:	b5b0      	push	{r4, r5, r7, lr}
 80093f6:	b08c      	sub	sp, #48	; 0x30
 80093f8:	af04      	add	r7, sp, #16
 80093fa:	60f8      	str	r0, [r7, #12]
 80093fc:	60b9      	str	r1, [r7, #8]
 80093fe:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d106      	bne.n	8009414 <tcp_output_segment+0x20>
 8009406:	4b63      	ldr	r3, [pc, #396]	; (8009594 <tcp_output_segment+0x1a0>)
 8009408:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800940c:	4962      	ldr	r1, [pc, #392]	; (8009598 <tcp_output_segment+0x1a4>)
 800940e:	4863      	ldr	r0, [pc, #396]	; (800959c <tcp_output_segment+0x1a8>)
 8009410:	f003 ff2a 	bl	800d268 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8009414:	68bb      	ldr	r3, [r7, #8]
 8009416:	2b00      	cmp	r3, #0
 8009418:	d106      	bne.n	8009428 <tcp_output_segment+0x34>
 800941a:	4b5e      	ldr	r3, [pc, #376]	; (8009594 <tcp_output_segment+0x1a0>)
 800941c:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8009420:	495f      	ldr	r1, [pc, #380]	; (80095a0 <tcp_output_segment+0x1ac>)
 8009422:	485e      	ldr	r0, [pc, #376]	; (800959c <tcp_output_segment+0x1a8>)
 8009424:	f003 ff20 	bl	800d268 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d106      	bne.n	800943c <tcp_output_segment+0x48>
 800942e:	4b59      	ldr	r3, [pc, #356]	; (8009594 <tcp_output_segment+0x1a0>)
 8009430:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8009434:	495b      	ldr	r1, [pc, #364]	; (80095a4 <tcp_output_segment+0x1b0>)
 8009436:	4859      	ldr	r0, [pc, #356]	; (800959c <tcp_output_segment+0x1a8>)
 8009438:	f003 ff16 	bl	800d268 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800943c:	68f8      	ldr	r0, [r7, #12]
 800943e:	f7ff ffb9 	bl	80093b4 <tcp_output_segment_busy>
 8009442:	4603      	mov	r3, r0
 8009444:	2b00      	cmp	r3, #0
 8009446:	d001      	beq.n	800944c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8009448:	2300      	movs	r3, #0
 800944a:	e09f      	b.n	800958c <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800944c:	68bb      	ldr	r3, [r7, #8]
 800944e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	68dc      	ldr	r4, [r3, #12]
 8009454:	4610      	mov	r0, r2
 8009456:	f7fa fa64 	bl	8003922 <lwip_htonl>
 800945a:	4603      	mov	r3, r0
 800945c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800945e:	68bb      	ldr	r3, [r7, #8]
 8009460:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	68dc      	ldr	r4, [r3, #12]
 8009466:	4610      	mov	r0, r2
 8009468:	f7fa fa46 	bl	80038f8 <lwip_htons>
 800946c:	4603      	mov	r3, r0
 800946e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8009470:	68bb      	ldr	r3, [r7, #8]
 8009472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009474:	68ba      	ldr	r2, [r7, #8]
 8009476:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8009478:	441a      	add	r2, r3
 800947a:	68bb      	ldr	r3, [r7, #8]
 800947c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	68db      	ldr	r3, [r3, #12]
 8009482:	3314      	adds	r3, #20
 8009484:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	7a9b      	ldrb	r3, [r3, #10]
 800948a:	f003 0301 	and.w	r3, r3, #1
 800948e:	2b00      	cmp	r3, #0
 8009490:	d015      	beq.n	80094be <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8009492:	68bb      	ldr	r3, [r7, #8]
 8009494:	3304      	adds	r3, #4
 8009496:	461a      	mov	r2, r3
 8009498:	6879      	ldr	r1, [r7, #4]
 800949a:	f44f 7006 	mov.w	r0, #536	; 0x218
 800949e:	f7fd fa5d 	bl	800695c <tcp_eff_send_mss_netif>
 80094a2:	4603      	mov	r3, r0
 80094a4:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80094a6:	8b7b      	ldrh	r3, [r7, #26]
 80094a8:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 80094ac:	4618      	mov	r0, r3
 80094ae:	f7fa fa38 	bl	8003922 <lwip_htonl>
 80094b2:	4602      	mov	r2, r0
 80094b4:	69fb      	ldr	r3, [r7, #28]
 80094b6:	601a      	str	r2, [r3, #0]
    opts += 1;
 80094b8:	69fb      	ldr	r3, [r7, #28]
 80094ba:	3304      	adds	r3, #4
 80094bc:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80094be:	68bb      	ldr	r3, [r7, #8]
 80094c0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	da02      	bge.n	80094ce <tcp_output_segment+0xda>
    pcb->rtime = 0;
 80094c8:	68bb      	ldr	r3, [r7, #8]
 80094ca:	2200      	movs	r2, #0
 80094cc:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 80094ce:	68bb      	ldr	r3, [r7, #8]
 80094d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d10c      	bne.n	80094f0 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 80094d6:	4b34      	ldr	r3, [pc, #208]	; (80095a8 <tcp_output_segment+0x1b4>)
 80094d8:	681a      	ldr	r2, [r3, #0]
 80094da:	68bb      	ldr	r3, [r7, #8]
 80094dc:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	68db      	ldr	r3, [r3, #12]
 80094e2:	685b      	ldr	r3, [r3, #4]
 80094e4:	4618      	mov	r0, r3
 80094e6:	f7fa fa1c 	bl	8003922 <lwip_htonl>
 80094ea:	4602      	mov	r2, r0
 80094ec:	68bb      	ldr	r3, [r7, #8]
 80094ee:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	68da      	ldr	r2, [r3, #12]
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	685b      	ldr	r3, [r3, #4]
 80094f8:	685b      	ldr	r3, [r3, #4]
 80094fa:	1ad3      	subs	r3, r2, r3
 80094fc:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	685b      	ldr	r3, [r3, #4]
 8009502:	8959      	ldrh	r1, [r3, #10]
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	685b      	ldr	r3, [r3, #4]
 8009508:	8b3a      	ldrh	r2, [r7, #24]
 800950a:	1a8a      	subs	r2, r1, r2
 800950c:	b292      	uxth	r2, r2
 800950e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	685b      	ldr	r3, [r3, #4]
 8009514:	8919      	ldrh	r1, [r3, #8]
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	685b      	ldr	r3, [r3, #4]
 800951a:	8b3a      	ldrh	r2, [r7, #24]
 800951c:	1a8a      	subs	r2, r1, r2
 800951e:	b292      	uxth	r2, r2
 8009520:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	685b      	ldr	r3, [r3, #4]
 8009526:	68fa      	ldr	r2, [r7, #12]
 8009528:	68d2      	ldr	r2, [r2, #12]
 800952a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	68db      	ldr	r3, [r3, #12]
 8009530:	2200      	movs	r2, #0
 8009532:	741a      	strb	r2, [r3, #16]
 8009534:	2200      	movs	r2, #0
 8009536:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	68db      	ldr	r3, [r3, #12]
 800953c:	f103 0214 	add.w	r2, r3, #20
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	7a9b      	ldrb	r3, [r3, #10]
 8009544:	009b      	lsls	r3, r3, #2
 8009546:	f003 0304 	and.w	r3, r3, #4
 800954a:	4413      	add	r3, r2
 800954c:	69fa      	ldr	r2, [r7, #28]
 800954e:	429a      	cmp	r2, r3
 8009550:	d006      	beq.n	8009560 <tcp_output_segment+0x16c>
 8009552:	4b10      	ldr	r3, [pc, #64]	; (8009594 <tcp_output_segment+0x1a0>)
 8009554:	f240 621c 	movw	r2, #1564	; 0x61c
 8009558:	4914      	ldr	r1, [pc, #80]	; (80095ac <tcp_output_segment+0x1b8>)
 800955a:	4810      	ldr	r0, [pc, #64]	; (800959c <tcp_output_segment+0x1a8>)
 800955c:	f003 fe84 	bl	800d268 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	6858      	ldr	r0, [r3, #4]
 8009564:	68b9      	ldr	r1, [r7, #8]
 8009566:	68bb      	ldr	r3, [r7, #8]
 8009568:	1d1c      	adds	r4, r3, #4
 800956a:	68bb      	ldr	r3, [r7, #8]
 800956c:	7add      	ldrb	r5, [r3, #11]
 800956e:	68bb      	ldr	r3, [r7, #8]
 8009570:	7a9b      	ldrb	r3, [r3, #10]
 8009572:	687a      	ldr	r2, [r7, #4]
 8009574:	9202      	str	r2, [sp, #8]
 8009576:	2206      	movs	r2, #6
 8009578:	9201      	str	r2, [sp, #4]
 800957a:	9300      	str	r3, [sp, #0]
 800957c:	462b      	mov	r3, r5
 800957e:	4622      	mov	r2, r4
 8009580:	f002 fde8 	bl	800c154 <ip4_output_if>
 8009584:	4603      	mov	r3, r0
 8009586:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8009588:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800958c:	4618      	mov	r0, r3
 800958e:	3720      	adds	r7, #32
 8009590:	46bd      	mov	sp, r7
 8009592:	bdb0      	pop	{r4, r5, r7, pc}
 8009594:	0800fc60 	.word	0x0800fc60
 8009598:	08010224 	.word	0x08010224
 800959c:	0800fcb4 	.word	0x0800fcb4
 80095a0:	08010244 	.word	0x08010244
 80095a4:	08010264 	.word	0x08010264
 80095a8:	20006878 	.word	0x20006878
 80095ac:	08010288 	.word	0x08010288

080095b0 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80095b0:	b5b0      	push	{r4, r5, r7, lr}
 80095b2:	b084      	sub	sp, #16
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d106      	bne.n	80095cc <tcp_rexmit_rto_prepare+0x1c>
 80095be:	4b31      	ldr	r3, [pc, #196]	; (8009684 <tcp_rexmit_rto_prepare+0xd4>)
 80095c0:	f240 6263 	movw	r2, #1635	; 0x663
 80095c4:	4930      	ldr	r1, [pc, #192]	; (8009688 <tcp_rexmit_rto_prepare+0xd8>)
 80095c6:	4831      	ldr	r0, [pc, #196]	; (800968c <tcp_rexmit_rto_prepare+0xdc>)
 80095c8:	f003 fe4e 	bl	800d268 <iprintf>

  if (pcb->unacked == NULL) {
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d102      	bne.n	80095da <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80095d4:	f06f 0305 	mvn.w	r3, #5
 80095d8:	e050      	b.n	800967c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095de:	60fb      	str	r3, [r7, #12]
 80095e0:	e00b      	b.n	80095fa <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80095e2:	68f8      	ldr	r0, [r7, #12]
 80095e4:	f7ff fee6 	bl	80093b4 <tcp_output_segment_busy>
 80095e8:	4603      	mov	r3, r0
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d002      	beq.n	80095f4 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 80095ee:	f06f 0305 	mvn.w	r3, #5
 80095f2:	e043      	b.n	800967c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	60fb      	str	r3, [r7, #12]
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d1ef      	bne.n	80095e2 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8009602:	68f8      	ldr	r0, [r7, #12]
 8009604:	f7ff fed6 	bl	80093b4 <tcp_output_segment_busy>
 8009608:	4603      	mov	r3, r0
 800960a:	2b00      	cmp	r3, #0
 800960c:	d002      	beq.n	8009614 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800960e:	f06f 0305 	mvn.w	r3, #5
 8009612:	e033      	b.n	800967c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	2200      	movs	r2, #0
 8009628:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	8b5b      	ldrh	r3, [r3, #26]
 800962e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009632:	b29a      	uxth	r2, r3
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	68db      	ldr	r3, [r3, #12]
 800963c:	685b      	ldr	r3, [r3, #4]
 800963e:	4618      	mov	r0, r3
 8009640:	f7fa f96f 	bl	8003922 <lwip_htonl>
 8009644:	4604      	mov	r4, r0
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	891b      	ldrh	r3, [r3, #8]
 800964a:	461d      	mov	r5, r3
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	68db      	ldr	r3, [r3, #12]
 8009650:	899b      	ldrh	r3, [r3, #12]
 8009652:	b29b      	uxth	r3, r3
 8009654:	4618      	mov	r0, r3
 8009656:	f7fa f94f 	bl	80038f8 <lwip_htons>
 800965a:	4603      	mov	r3, r0
 800965c:	b2db      	uxtb	r3, r3
 800965e:	f003 0303 	and.w	r3, r3, #3
 8009662:	2b00      	cmp	r3, #0
 8009664:	d001      	beq.n	800966a <tcp_rexmit_rto_prepare+0xba>
 8009666:	2301      	movs	r3, #1
 8009668:	e000      	b.n	800966c <tcp_rexmit_rto_prepare+0xbc>
 800966a:	2300      	movs	r3, #0
 800966c:	442b      	add	r3, r5
 800966e:	18e2      	adds	r2, r4, r3
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2200      	movs	r2, #0
 8009678:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800967a:	2300      	movs	r3, #0
}
 800967c:	4618      	mov	r0, r3
 800967e:	3710      	adds	r7, #16
 8009680:	46bd      	mov	sp, r7
 8009682:	bdb0      	pop	{r4, r5, r7, pc}
 8009684:	0800fc60 	.word	0x0800fc60
 8009688:	0801029c 	.word	0x0801029c
 800968c:	0800fcb4 	.word	0x0800fcb4

08009690 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b082      	sub	sp, #8
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	2b00      	cmp	r3, #0
 800969c:	d106      	bne.n	80096ac <tcp_rexmit_rto_commit+0x1c>
 800969e:	4b0d      	ldr	r3, [pc, #52]	; (80096d4 <tcp_rexmit_rto_commit+0x44>)
 80096a0:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80096a4:	490c      	ldr	r1, [pc, #48]	; (80096d8 <tcp_rexmit_rto_commit+0x48>)
 80096a6:	480d      	ldr	r0, [pc, #52]	; (80096dc <tcp_rexmit_rto_commit+0x4c>)
 80096a8:	f003 fdde 	bl	800d268 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80096b2:	2bff      	cmp	r3, #255	; 0xff
 80096b4:	d007      	beq.n	80096c6 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80096bc:	3301      	adds	r3, #1
 80096be:	b2da      	uxtb	r2, r3
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80096c6:	6878      	ldr	r0, [r7, #4]
 80096c8:	f7ff fc80 	bl	8008fcc <tcp_output>
}
 80096cc:	bf00      	nop
 80096ce:	3708      	adds	r7, #8
 80096d0:	46bd      	mov	sp, r7
 80096d2:	bd80      	pop	{r7, pc}
 80096d4:	0800fc60 	.word	0x0800fc60
 80096d8:	080102c0 	.word	0x080102c0
 80096dc:	0800fcb4 	.word	0x0800fcb4

080096e0 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b082      	sub	sp, #8
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d106      	bne.n	80096fc <tcp_rexmit_rto+0x1c>
 80096ee:	4b0a      	ldr	r3, [pc, #40]	; (8009718 <tcp_rexmit_rto+0x38>)
 80096f0:	f240 62ad 	movw	r2, #1709	; 0x6ad
 80096f4:	4909      	ldr	r1, [pc, #36]	; (800971c <tcp_rexmit_rto+0x3c>)
 80096f6:	480a      	ldr	r0, [pc, #40]	; (8009720 <tcp_rexmit_rto+0x40>)
 80096f8:	f003 fdb6 	bl	800d268 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80096fc:	6878      	ldr	r0, [r7, #4]
 80096fe:	f7ff ff57 	bl	80095b0 <tcp_rexmit_rto_prepare>
 8009702:	4603      	mov	r3, r0
 8009704:	2b00      	cmp	r3, #0
 8009706:	d102      	bne.n	800970e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8009708:	6878      	ldr	r0, [r7, #4]
 800970a:	f7ff ffc1 	bl	8009690 <tcp_rexmit_rto_commit>
  }
}
 800970e:	bf00      	nop
 8009710:	3708      	adds	r7, #8
 8009712:	46bd      	mov	sp, r7
 8009714:	bd80      	pop	{r7, pc}
 8009716:	bf00      	nop
 8009718:	0800fc60 	.word	0x0800fc60
 800971c:	080102e4 	.word	0x080102e4
 8009720:	0800fcb4 	.word	0x0800fcb4

08009724 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8009724:	b590      	push	{r4, r7, lr}
 8009726:	b085      	sub	sp, #20
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d106      	bne.n	8009740 <tcp_rexmit+0x1c>
 8009732:	4b2f      	ldr	r3, [pc, #188]	; (80097f0 <tcp_rexmit+0xcc>)
 8009734:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8009738:	492e      	ldr	r1, [pc, #184]	; (80097f4 <tcp_rexmit+0xd0>)
 800973a:	482f      	ldr	r0, [pc, #188]	; (80097f8 <tcp_rexmit+0xd4>)
 800973c:	f003 fd94 	bl	800d268 <iprintf>

  if (pcb->unacked == NULL) {
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009744:	2b00      	cmp	r3, #0
 8009746:	d102      	bne.n	800974e <tcp_rexmit+0x2a>
    return ERR_VAL;
 8009748:	f06f 0305 	mvn.w	r3, #5
 800974c:	e04c      	b.n	80097e8 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009752:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8009754:	68b8      	ldr	r0, [r7, #8]
 8009756:	f7ff fe2d 	bl	80093b4 <tcp_output_segment_busy>
 800975a:	4603      	mov	r3, r0
 800975c:	2b00      	cmp	r3, #0
 800975e:	d002      	beq.n	8009766 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8009760:	f06f 0305 	mvn.w	r3, #5
 8009764:	e040      	b.n	80097e8 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8009766:	68bb      	ldr	r3, [r7, #8]
 8009768:	681a      	ldr	r2, [r3, #0]
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	336c      	adds	r3, #108	; 0x6c
 8009772:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8009774:	e002      	b.n	800977c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d011      	beq.n	80097a8 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	68db      	ldr	r3, [r3, #12]
 800978a:	685b      	ldr	r3, [r3, #4]
 800978c:	4618      	mov	r0, r3
 800978e:	f7fa f8c8 	bl	8003922 <lwip_htonl>
 8009792:	4604      	mov	r4, r0
 8009794:	68bb      	ldr	r3, [r7, #8]
 8009796:	68db      	ldr	r3, [r3, #12]
 8009798:	685b      	ldr	r3, [r3, #4]
 800979a:	4618      	mov	r0, r3
 800979c:	f7fa f8c1 	bl	8003922 <lwip_htonl>
 80097a0:	4603      	mov	r3, r0
 80097a2:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	dbe6      	blt.n	8009776 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	681a      	ldr	r2, [r3, #0]
 80097ac:	68bb      	ldr	r3, [r7, #8]
 80097ae:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	68ba      	ldr	r2, [r7, #8]
 80097b4:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80097b6:	68bb      	ldr	r3, [r7, #8]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d103      	bne.n	80097c6 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	2200      	movs	r2, #0
 80097c2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80097cc:	2bff      	cmp	r3, #255	; 0xff
 80097ce:	d007      	beq.n	80097e0 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80097d6:	3301      	adds	r3, #1
 80097d8:	b2da      	uxtb	r2, r3
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	2200      	movs	r2, #0
 80097e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 80097e6:	2300      	movs	r3, #0
}
 80097e8:	4618      	mov	r0, r3
 80097ea:	3714      	adds	r7, #20
 80097ec:	46bd      	mov	sp, r7
 80097ee:	bd90      	pop	{r4, r7, pc}
 80097f0:	0800fc60 	.word	0x0800fc60
 80097f4:	08010300 	.word	0x08010300
 80097f8:	0800fcb4 	.word	0x0800fcb4

080097fc <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80097fc:	b580      	push	{r7, lr}
 80097fe:	b082      	sub	sp, #8
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	2b00      	cmp	r3, #0
 8009808:	d106      	bne.n	8009818 <tcp_rexmit_fast+0x1c>
 800980a:	4b2a      	ldr	r3, [pc, #168]	; (80098b4 <tcp_rexmit_fast+0xb8>)
 800980c:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8009810:	4929      	ldr	r1, [pc, #164]	; (80098b8 <tcp_rexmit_fast+0xbc>)
 8009812:	482a      	ldr	r0, [pc, #168]	; (80098bc <tcp_rexmit_fast+0xc0>)
 8009814:	f003 fd28 	bl	800d268 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800981c:	2b00      	cmp	r3, #0
 800981e:	d044      	beq.n	80098aa <tcp_rexmit_fast+0xae>
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	8b5b      	ldrh	r3, [r3, #26]
 8009824:	f003 0304 	and.w	r3, r3, #4
 8009828:	2b00      	cmp	r3, #0
 800982a:	d13e      	bne.n	80098aa <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800982c:	6878      	ldr	r0, [r7, #4]
 800982e:	f7ff ff79 	bl	8009724 <tcp_rexmit>
 8009832:	4603      	mov	r3, r0
 8009834:	2b00      	cmp	r3, #0
 8009836:	d138      	bne.n	80098aa <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009844:	4293      	cmp	r3, r2
 8009846:	bf28      	it	cs
 8009848:	4613      	movcs	r3, r2
 800984a:	b29b      	uxth	r3, r3
 800984c:	0fda      	lsrs	r2, r3, #31
 800984e:	4413      	add	r3, r2
 8009850:	105b      	asrs	r3, r3, #1
 8009852:	b29a      	uxth	r2, r3
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8009860:	461a      	mov	r2, r3
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009866:	005b      	lsls	r3, r3, #1
 8009868:	429a      	cmp	r2, r3
 800986a:	d206      	bcs.n	800987a <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009870:	005b      	lsls	r3, r3, #1
 8009872:	b29a      	uxth	r2, r3
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009884:	4619      	mov	r1, r3
 8009886:	0049      	lsls	r1, r1, #1
 8009888:	440b      	add	r3, r1
 800988a:	b29b      	uxth	r3, r3
 800988c:	4413      	add	r3, r2
 800988e:	b29a      	uxth	r2, r3
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	8b5b      	ldrh	r3, [r3, #26]
 800989a:	f043 0304 	orr.w	r3, r3, #4
 800989e:	b29a      	uxth	r2, r3
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	2200      	movs	r2, #0
 80098a8:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 80098aa:	bf00      	nop
 80098ac:	3708      	adds	r7, #8
 80098ae:	46bd      	mov	sp, r7
 80098b0:	bd80      	pop	{r7, pc}
 80098b2:	bf00      	nop
 80098b4:	0800fc60 	.word	0x0800fc60
 80098b8:	08010318 	.word	0x08010318
 80098bc:	0800fcb4 	.word	0x0800fcb4

080098c0 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 80098c0:	b580      	push	{r7, lr}
 80098c2:	b086      	sub	sp, #24
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	60f8      	str	r0, [r7, #12]
 80098c8:	607b      	str	r3, [r7, #4]
 80098ca:	460b      	mov	r3, r1
 80098cc:	817b      	strh	r3, [r7, #10]
 80098ce:	4613      	mov	r3, r2
 80098d0:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80098d2:	897a      	ldrh	r2, [r7, #10]
 80098d4:	893b      	ldrh	r3, [r7, #8]
 80098d6:	4413      	add	r3, r2
 80098d8:	b29b      	uxth	r3, r3
 80098da:	3314      	adds	r3, #20
 80098dc:	b29b      	uxth	r3, r3
 80098de:	f44f 7220 	mov.w	r2, #640	; 0x280
 80098e2:	4619      	mov	r1, r3
 80098e4:	2022      	movs	r0, #34	; 0x22
 80098e6:	f7fa ffab 	bl	8004840 <pbuf_alloc>
 80098ea:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80098ec:	697b      	ldr	r3, [r7, #20]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d04d      	beq.n	800998e <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80098f2:	897b      	ldrh	r3, [r7, #10]
 80098f4:	3313      	adds	r3, #19
 80098f6:	697a      	ldr	r2, [r7, #20]
 80098f8:	8952      	ldrh	r2, [r2, #10]
 80098fa:	4293      	cmp	r3, r2
 80098fc:	db06      	blt.n	800990c <tcp_output_alloc_header_common+0x4c>
 80098fe:	4b26      	ldr	r3, [pc, #152]	; (8009998 <tcp_output_alloc_header_common+0xd8>)
 8009900:	f240 7223 	movw	r2, #1827	; 0x723
 8009904:	4925      	ldr	r1, [pc, #148]	; (800999c <tcp_output_alloc_header_common+0xdc>)
 8009906:	4826      	ldr	r0, [pc, #152]	; (80099a0 <tcp_output_alloc_header_common+0xe0>)
 8009908:	f003 fcae 	bl	800d268 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800990c:	697b      	ldr	r3, [r7, #20]
 800990e:	685b      	ldr	r3, [r3, #4]
 8009910:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8009912:	8c3b      	ldrh	r3, [r7, #32]
 8009914:	4618      	mov	r0, r3
 8009916:	f7f9 ffef 	bl	80038f8 <lwip_htons>
 800991a:	4603      	mov	r3, r0
 800991c:	461a      	mov	r2, r3
 800991e:	693b      	ldr	r3, [r7, #16]
 8009920:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8009922:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009924:	4618      	mov	r0, r3
 8009926:	f7f9 ffe7 	bl	80038f8 <lwip_htons>
 800992a:	4603      	mov	r3, r0
 800992c:	461a      	mov	r2, r3
 800992e:	693b      	ldr	r3, [r7, #16]
 8009930:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8009932:	693b      	ldr	r3, [r7, #16]
 8009934:	687a      	ldr	r2, [r7, #4]
 8009936:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8009938:	68f8      	ldr	r0, [r7, #12]
 800993a:	f7f9 fff2 	bl	8003922 <lwip_htonl>
 800993e:	4602      	mov	r2, r0
 8009940:	693b      	ldr	r3, [r7, #16]
 8009942:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8009944:	897b      	ldrh	r3, [r7, #10]
 8009946:	089b      	lsrs	r3, r3, #2
 8009948:	b29b      	uxth	r3, r3
 800994a:	3305      	adds	r3, #5
 800994c:	b29b      	uxth	r3, r3
 800994e:	031b      	lsls	r3, r3, #12
 8009950:	b29a      	uxth	r2, r3
 8009952:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009956:	b29b      	uxth	r3, r3
 8009958:	4313      	orrs	r3, r2
 800995a:	b29b      	uxth	r3, r3
 800995c:	4618      	mov	r0, r3
 800995e:	f7f9 ffcb 	bl	80038f8 <lwip_htons>
 8009962:	4603      	mov	r3, r0
 8009964:	461a      	mov	r2, r3
 8009966:	693b      	ldr	r3, [r7, #16]
 8009968:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800996a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800996c:	4618      	mov	r0, r3
 800996e:	f7f9 ffc3 	bl	80038f8 <lwip_htons>
 8009972:	4603      	mov	r3, r0
 8009974:	461a      	mov	r2, r3
 8009976:	693b      	ldr	r3, [r7, #16]
 8009978:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800997a:	693b      	ldr	r3, [r7, #16]
 800997c:	2200      	movs	r2, #0
 800997e:	741a      	strb	r2, [r3, #16]
 8009980:	2200      	movs	r2, #0
 8009982:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8009984:	693b      	ldr	r3, [r7, #16]
 8009986:	2200      	movs	r2, #0
 8009988:	749a      	strb	r2, [r3, #18]
 800998a:	2200      	movs	r2, #0
 800998c:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800998e:	697b      	ldr	r3, [r7, #20]
}
 8009990:	4618      	mov	r0, r3
 8009992:	3718      	adds	r7, #24
 8009994:	46bd      	mov	sp, r7
 8009996:	bd80      	pop	{r7, pc}
 8009998:	0800fc60 	.word	0x0800fc60
 800999c:	08010338 	.word	0x08010338
 80099a0:	0800fcb4 	.word	0x0800fcb4

080099a4 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 80099a4:	b5b0      	push	{r4, r5, r7, lr}
 80099a6:	b08a      	sub	sp, #40	; 0x28
 80099a8:	af04      	add	r7, sp, #16
 80099aa:	60f8      	str	r0, [r7, #12]
 80099ac:	607b      	str	r3, [r7, #4]
 80099ae:	460b      	mov	r3, r1
 80099b0:	817b      	strh	r3, [r7, #10]
 80099b2:	4613      	mov	r3, r2
 80099b4:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d106      	bne.n	80099ca <tcp_output_alloc_header+0x26>
 80099bc:	4b15      	ldr	r3, [pc, #84]	; (8009a14 <tcp_output_alloc_header+0x70>)
 80099be:	f240 7242 	movw	r2, #1858	; 0x742
 80099c2:	4915      	ldr	r1, [pc, #84]	; (8009a18 <tcp_output_alloc_header+0x74>)
 80099c4:	4815      	ldr	r0, [pc, #84]	; (8009a1c <tcp_output_alloc_header+0x78>)
 80099c6:	f003 fc4f 	bl	800d268 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	8adb      	ldrh	r3, [r3, #22]
 80099d2:	68fa      	ldr	r2, [r7, #12]
 80099d4:	8b12      	ldrh	r2, [r2, #24]
 80099d6:	68f9      	ldr	r1, [r7, #12]
 80099d8:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 80099da:	893d      	ldrh	r5, [r7, #8]
 80099dc:	897c      	ldrh	r4, [r7, #10]
 80099de:	9103      	str	r1, [sp, #12]
 80099e0:	2110      	movs	r1, #16
 80099e2:	9102      	str	r1, [sp, #8]
 80099e4:	9201      	str	r2, [sp, #4]
 80099e6:	9300      	str	r3, [sp, #0]
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	462a      	mov	r2, r5
 80099ec:	4621      	mov	r1, r4
 80099ee:	f7ff ff67 	bl	80098c0 <tcp_output_alloc_header_common>
 80099f2:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 80099f4:	697b      	ldr	r3, [r7, #20]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d006      	beq.n	8009a08 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099fe:	68fa      	ldr	r2, [r7, #12]
 8009a00:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8009a02:	441a      	add	r2, r3
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8009a08:	697b      	ldr	r3, [r7, #20]
}
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	3718      	adds	r7, #24
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	bdb0      	pop	{r4, r5, r7, pc}
 8009a12:	bf00      	nop
 8009a14:	0800fc60 	.word	0x0800fc60
 8009a18:	08010368 	.word	0x08010368
 8009a1c:	0800fcb4 	.word	0x0800fcb4

08009a20 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b088      	sub	sp, #32
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	60f8      	str	r0, [r7, #12]
 8009a28:	60b9      	str	r1, [r7, #8]
 8009a2a:	4611      	mov	r1, r2
 8009a2c:	461a      	mov	r2, r3
 8009a2e:	460b      	mov	r3, r1
 8009a30:	71fb      	strb	r3, [r7, #7]
 8009a32:	4613      	mov	r3, r2
 8009a34:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8009a36:	2300      	movs	r3, #0
 8009a38:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8009a3a:	68bb      	ldr	r3, [r7, #8]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d106      	bne.n	8009a4e <tcp_output_fill_options+0x2e>
 8009a40:	4b13      	ldr	r3, [pc, #76]	; (8009a90 <tcp_output_fill_options+0x70>)
 8009a42:	f240 7256 	movw	r2, #1878	; 0x756
 8009a46:	4913      	ldr	r1, [pc, #76]	; (8009a94 <tcp_output_fill_options+0x74>)
 8009a48:	4813      	ldr	r0, [pc, #76]	; (8009a98 <tcp_output_fill_options+0x78>)
 8009a4a:	f003 fc0d 	bl	800d268 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8009a4e:	68bb      	ldr	r3, [r7, #8]
 8009a50:	685b      	ldr	r3, [r3, #4]
 8009a52:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8009a54:	69bb      	ldr	r3, [r7, #24]
 8009a56:	3314      	adds	r3, #20
 8009a58:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8009a5a:	69bb      	ldr	r3, [r7, #24]
 8009a5c:	f103 0214 	add.w	r2, r3, #20
 8009a60:	8bfb      	ldrh	r3, [r7, #30]
 8009a62:	009b      	lsls	r3, r3, #2
 8009a64:	4619      	mov	r1, r3
 8009a66:	79fb      	ldrb	r3, [r7, #7]
 8009a68:	009b      	lsls	r3, r3, #2
 8009a6a:	f003 0304 	and.w	r3, r3, #4
 8009a6e:	440b      	add	r3, r1
 8009a70:	4413      	add	r3, r2
 8009a72:	697a      	ldr	r2, [r7, #20]
 8009a74:	429a      	cmp	r2, r3
 8009a76:	d006      	beq.n	8009a86 <tcp_output_fill_options+0x66>
 8009a78:	4b05      	ldr	r3, [pc, #20]	; (8009a90 <tcp_output_fill_options+0x70>)
 8009a7a:	f240 7275 	movw	r2, #1909	; 0x775
 8009a7e:	4907      	ldr	r1, [pc, #28]	; (8009a9c <tcp_output_fill_options+0x7c>)
 8009a80:	4805      	ldr	r0, [pc, #20]	; (8009a98 <tcp_output_fill_options+0x78>)
 8009a82:	f003 fbf1 	bl	800d268 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8009a86:	bf00      	nop
 8009a88:	3720      	adds	r7, #32
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	bd80      	pop	{r7, pc}
 8009a8e:	bf00      	nop
 8009a90:	0800fc60 	.word	0x0800fc60
 8009a94:	08010390 	.word	0x08010390
 8009a98:	0800fcb4 	.word	0x0800fcb4
 8009a9c:	08010288 	.word	0x08010288

08009aa0 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b08a      	sub	sp, #40	; 0x28
 8009aa4:	af04      	add	r7, sp, #16
 8009aa6:	60f8      	str	r0, [r7, #12]
 8009aa8:	60b9      	str	r1, [r7, #8]
 8009aaa:	607a      	str	r2, [r7, #4]
 8009aac:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8009aae:	68bb      	ldr	r3, [r7, #8]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d106      	bne.n	8009ac2 <tcp_output_control_segment+0x22>
 8009ab4:	4b1c      	ldr	r3, [pc, #112]	; (8009b28 <tcp_output_control_segment+0x88>)
 8009ab6:	f240 7287 	movw	r2, #1927	; 0x787
 8009aba:	491c      	ldr	r1, [pc, #112]	; (8009b2c <tcp_output_control_segment+0x8c>)
 8009abc:	481c      	ldr	r0, [pc, #112]	; (8009b30 <tcp_output_control_segment+0x90>)
 8009abe:	f003 fbd3 	bl	800d268 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8009ac2:	683a      	ldr	r2, [r7, #0]
 8009ac4:	6879      	ldr	r1, [r7, #4]
 8009ac6:	68f8      	ldr	r0, [r7, #12]
 8009ac8:	f7fe ff40 	bl	800894c <tcp_route>
 8009acc:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8009ace:	693b      	ldr	r3, [r7, #16]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d102      	bne.n	8009ada <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8009ad4:	23fc      	movs	r3, #252	; 0xfc
 8009ad6:	75fb      	strb	r3, [r7, #23]
 8009ad8:	e01c      	b.n	8009b14 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d006      	beq.n	8009aee <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	7adb      	ldrb	r3, [r3, #11]
 8009ae4:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	7a9b      	ldrb	r3, [r3, #10]
 8009aea:	757b      	strb	r3, [r7, #21]
 8009aec:	e003      	b.n	8009af6 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8009aee:	23ff      	movs	r3, #255	; 0xff
 8009af0:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8009af2:	2300      	movs	r3, #0
 8009af4:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8009af6:	7dba      	ldrb	r2, [r7, #22]
 8009af8:	693b      	ldr	r3, [r7, #16]
 8009afa:	9302      	str	r3, [sp, #8]
 8009afc:	2306      	movs	r3, #6
 8009afe:	9301      	str	r3, [sp, #4]
 8009b00:	7d7b      	ldrb	r3, [r7, #21]
 8009b02:	9300      	str	r3, [sp, #0]
 8009b04:	4613      	mov	r3, r2
 8009b06:	683a      	ldr	r2, [r7, #0]
 8009b08:	6879      	ldr	r1, [r7, #4]
 8009b0a:	68b8      	ldr	r0, [r7, #8]
 8009b0c:	f002 fb22 	bl	800c154 <ip4_output_if>
 8009b10:	4603      	mov	r3, r0
 8009b12:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8009b14:	68b8      	ldr	r0, [r7, #8]
 8009b16:	f7fb f975 	bl	8004e04 <pbuf_free>
  return err;
 8009b1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009b1e:	4618      	mov	r0, r3
 8009b20:	3718      	adds	r7, #24
 8009b22:	46bd      	mov	sp, r7
 8009b24:	bd80      	pop	{r7, pc}
 8009b26:	bf00      	nop
 8009b28:	0800fc60 	.word	0x0800fc60
 8009b2c:	080103b8 	.word	0x080103b8
 8009b30:	0800fcb4 	.word	0x0800fcb4

08009b34 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8009b34:	b590      	push	{r4, r7, lr}
 8009b36:	b08b      	sub	sp, #44	; 0x2c
 8009b38:	af04      	add	r7, sp, #16
 8009b3a:	60f8      	str	r0, [r7, #12]
 8009b3c:	60b9      	str	r1, [r7, #8]
 8009b3e:	607a      	str	r2, [r7, #4]
 8009b40:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8009b42:	683b      	ldr	r3, [r7, #0]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d106      	bne.n	8009b56 <tcp_rst+0x22>
 8009b48:	4b1f      	ldr	r3, [pc, #124]	; (8009bc8 <tcp_rst+0x94>)
 8009b4a:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8009b4e:	491f      	ldr	r1, [pc, #124]	; (8009bcc <tcp_rst+0x98>)
 8009b50:	481f      	ldr	r0, [pc, #124]	; (8009bd0 <tcp_rst+0x9c>)
 8009b52:	f003 fb89 	bl	800d268 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8009b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d106      	bne.n	8009b6a <tcp_rst+0x36>
 8009b5c:	4b1a      	ldr	r3, [pc, #104]	; (8009bc8 <tcp_rst+0x94>)
 8009b5e:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8009b62:	491c      	ldr	r1, [pc, #112]	; (8009bd4 <tcp_rst+0xa0>)
 8009b64:	481a      	ldr	r0, [pc, #104]	; (8009bd0 <tcp_rst+0x9c>)
 8009b66:	f003 fb7f 	bl	800d268 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8009b6e:	f246 0308 	movw	r3, #24584	; 0x6008
 8009b72:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8009b74:	7dfb      	ldrb	r3, [r7, #23]
 8009b76:	b29c      	uxth	r4, r3
 8009b78:	68b8      	ldr	r0, [r7, #8]
 8009b7a:	f7f9 fed2 	bl	8003922 <lwip_htonl>
 8009b7e:	4602      	mov	r2, r0
 8009b80:	8abb      	ldrh	r3, [r7, #20]
 8009b82:	9303      	str	r3, [sp, #12]
 8009b84:	2314      	movs	r3, #20
 8009b86:	9302      	str	r3, [sp, #8]
 8009b88:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8009b8a:	9301      	str	r3, [sp, #4]
 8009b8c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009b8e:	9300      	str	r3, [sp, #0]
 8009b90:	4613      	mov	r3, r2
 8009b92:	2200      	movs	r2, #0
 8009b94:	4621      	mov	r1, r4
 8009b96:	6878      	ldr	r0, [r7, #4]
 8009b98:	f7ff fe92 	bl	80098c0 <tcp_output_alloc_header_common>
 8009b9c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8009b9e:	693b      	ldr	r3, [r7, #16]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d00c      	beq.n	8009bbe <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8009ba4:	7dfb      	ldrb	r3, [r7, #23]
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	6939      	ldr	r1, [r7, #16]
 8009baa:	68f8      	ldr	r0, [r7, #12]
 8009bac:	f7ff ff38 	bl	8009a20 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8009bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bb2:	683a      	ldr	r2, [r7, #0]
 8009bb4:	6939      	ldr	r1, [r7, #16]
 8009bb6:	68f8      	ldr	r0, [r7, #12]
 8009bb8:	f7ff ff72 	bl	8009aa0 <tcp_output_control_segment>
 8009bbc:	e000      	b.n	8009bc0 <tcp_rst+0x8c>
    return;
 8009bbe:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8009bc0:	371c      	adds	r7, #28
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	bd90      	pop	{r4, r7, pc}
 8009bc6:	bf00      	nop
 8009bc8:	0800fc60 	.word	0x0800fc60
 8009bcc:	080103e4 	.word	0x080103e4
 8009bd0:	0800fcb4 	.word	0x0800fcb4
 8009bd4:	08010400 	.word	0x08010400

08009bd8 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8009bd8:	b590      	push	{r4, r7, lr}
 8009bda:	b087      	sub	sp, #28
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8009be0:	2300      	movs	r3, #0
 8009be2:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8009be4:	2300      	movs	r3, #0
 8009be6:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d106      	bne.n	8009bfc <tcp_send_empty_ack+0x24>
 8009bee:	4b28      	ldr	r3, [pc, #160]	; (8009c90 <tcp_send_empty_ack+0xb8>)
 8009bf0:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8009bf4:	4927      	ldr	r1, [pc, #156]	; (8009c94 <tcp_send_empty_ack+0xbc>)
 8009bf6:	4828      	ldr	r0, [pc, #160]	; (8009c98 <tcp_send_empty_ack+0xc0>)
 8009bf8:	f003 fb36 	bl	800d268 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8009bfc:	7dfb      	ldrb	r3, [r7, #23]
 8009bfe:	009b      	lsls	r3, r3, #2
 8009c00:	b2db      	uxtb	r3, r3
 8009c02:	f003 0304 	and.w	r3, r3, #4
 8009c06:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8009c08:	7d7b      	ldrb	r3, [r7, #21]
 8009c0a:	b29c      	uxth	r4, r3
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c10:	4618      	mov	r0, r3
 8009c12:	f7f9 fe86 	bl	8003922 <lwip_htonl>
 8009c16:	4603      	mov	r3, r0
 8009c18:	2200      	movs	r2, #0
 8009c1a:	4621      	mov	r1, r4
 8009c1c:	6878      	ldr	r0, [r7, #4]
 8009c1e:	f7ff fec1 	bl	80099a4 <tcp_output_alloc_header>
 8009c22:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8009c24:	693b      	ldr	r3, [r7, #16]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d109      	bne.n	8009c3e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	8b5b      	ldrh	r3, [r3, #26]
 8009c2e:	f043 0303 	orr.w	r3, r3, #3
 8009c32:	b29a      	uxth	r2, r3
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8009c38:	f06f 0301 	mvn.w	r3, #1
 8009c3c:	e023      	b.n	8009c86 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8009c3e:	7dbb      	ldrb	r3, [r7, #22]
 8009c40:	7dfa      	ldrb	r2, [r7, #23]
 8009c42:	6939      	ldr	r1, [r7, #16]
 8009c44:	6878      	ldr	r0, [r7, #4]
 8009c46:	f7ff feeb 	bl	8009a20 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8009c4a:	687a      	ldr	r2, [r7, #4]
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	3304      	adds	r3, #4
 8009c50:	6939      	ldr	r1, [r7, #16]
 8009c52:	6878      	ldr	r0, [r7, #4]
 8009c54:	f7ff ff24 	bl	8009aa0 <tcp_output_control_segment>
 8009c58:	4603      	mov	r3, r0
 8009c5a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8009c5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d007      	beq.n	8009c74 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	8b5b      	ldrh	r3, [r3, #26]
 8009c68:	f043 0303 	orr.w	r3, r3, #3
 8009c6c:	b29a      	uxth	r2, r3
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	835a      	strh	r2, [r3, #26]
 8009c72:	e006      	b.n	8009c82 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	8b5b      	ldrh	r3, [r3, #26]
 8009c78:	f023 0303 	bic.w	r3, r3, #3
 8009c7c:	b29a      	uxth	r2, r3
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8009c82:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009c86:	4618      	mov	r0, r3
 8009c88:	371c      	adds	r7, #28
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	bd90      	pop	{r4, r7, pc}
 8009c8e:	bf00      	nop
 8009c90:	0800fc60 	.word	0x0800fc60
 8009c94:	0801041c 	.word	0x0801041c
 8009c98:	0800fcb4 	.word	0x0800fcb4

08009c9c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8009c9c:	b590      	push	{r4, r7, lr}
 8009c9e:	b087      	sub	sp, #28
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d106      	bne.n	8009cbc <tcp_keepalive+0x20>
 8009cae:	4b18      	ldr	r3, [pc, #96]	; (8009d10 <tcp_keepalive+0x74>)
 8009cb0:	f640 0224 	movw	r2, #2084	; 0x824
 8009cb4:	4917      	ldr	r1, [pc, #92]	; (8009d14 <tcp_keepalive+0x78>)
 8009cb6:	4818      	ldr	r0, [pc, #96]	; (8009d18 <tcp_keepalive+0x7c>)
 8009cb8:	f003 fad6 	bl	800d268 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8009cbc:	7dfb      	ldrb	r3, [r7, #23]
 8009cbe:	b29c      	uxth	r4, r3
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009cc4:	3b01      	subs	r3, #1
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	f7f9 fe2b 	bl	8003922 <lwip_htonl>
 8009ccc:	4603      	mov	r3, r0
 8009cce:	2200      	movs	r2, #0
 8009cd0:	4621      	mov	r1, r4
 8009cd2:	6878      	ldr	r0, [r7, #4]
 8009cd4:	f7ff fe66 	bl	80099a4 <tcp_output_alloc_header>
 8009cd8:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8009cda:	693b      	ldr	r3, [r7, #16]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d102      	bne.n	8009ce6 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8009ce0:	f04f 33ff 	mov.w	r3, #4294967295
 8009ce4:	e010      	b.n	8009d08 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8009ce6:	7dfb      	ldrb	r3, [r7, #23]
 8009ce8:	2200      	movs	r2, #0
 8009cea:	6939      	ldr	r1, [r7, #16]
 8009cec:	6878      	ldr	r0, [r7, #4]
 8009cee:	f7ff fe97 	bl	8009a20 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8009cf2:	687a      	ldr	r2, [r7, #4]
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	3304      	adds	r3, #4
 8009cf8:	6939      	ldr	r1, [r7, #16]
 8009cfa:	6878      	ldr	r0, [r7, #4]
 8009cfc:	f7ff fed0 	bl	8009aa0 <tcp_output_control_segment>
 8009d00:	4603      	mov	r3, r0
 8009d02:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8009d04:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009d08:	4618      	mov	r0, r3
 8009d0a:	371c      	adds	r7, #28
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	bd90      	pop	{r4, r7, pc}
 8009d10:	0800fc60 	.word	0x0800fc60
 8009d14:	0801043c 	.word	0x0801043c
 8009d18:	0800fcb4 	.word	0x0800fcb4

08009d1c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8009d1c:	b590      	push	{r4, r7, lr}
 8009d1e:	b08b      	sub	sp, #44	; 0x2c
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8009d24:	2300      	movs	r3, #0
 8009d26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d106      	bne.n	8009d3e <tcp_zero_window_probe+0x22>
 8009d30:	4b4c      	ldr	r3, [pc, #304]	; (8009e64 <tcp_zero_window_probe+0x148>)
 8009d32:	f640 024f 	movw	r2, #2127	; 0x84f
 8009d36:	494c      	ldr	r1, [pc, #304]	; (8009e68 <tcp_zero_window_probe+0x14c>)
 8009d38:	484c      	ldr	r0, [pc, #304]	; (8009e6c <tcp_zero_window_probe+0x150>)
 8009d3a:	f003 fa95 	bl	800d268 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d42:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8009d44:	6a3b      	ldr	r3, [r7, #32]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d101      	bne.n	8009d4e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	e086      	b.n	8009e5c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8009d54:	2bff      	cmp	r3, #255	; 0xff
 8009d56:	d007      	beq.n	8009d68 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8009d5e:	3301      	adds	r3, #1
 8009d60:	b2da      	uxtb	r2, r3
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8009d68:	6a3b      	ldr	r3, [r7, #32]
 8009d6a:	68db      	ldr	r3, [r3, #12]
 8009d6c:	899b      	ldrh	r3, [r3, #12]
 8009d6e:	b29b      	uxth	r3, r3
 8009d70:	4618      	mov	r0, r3
 8009d72:	f7f9 fdc1 	bl	80038f8 <lwip_htons>
 8009d76:	4603      	mov	r3, r0
 8009d78:	b2db      	uxtb	r3, r3
 8009d7a:	f003 0301 	and.w	r3, r3, #1
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d005      	beq.n	8009d8e <tcp_zero_window_probe+0x72>
 8009d82:	6a3b      	ldr	r3, [r7, #32]
 8009d84:	891b      	ldrh	r3, [r3, #8]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d101      	bne.n	8009d8e <tcp_zero_window_probe+0x72>
 8009d8a:	2301      	movs	r3, #1
 8009d8c:	e000      	b.n	8009d90 <tcp_zero_window_probe+0x74>
 8009d8e:	2300      	movs	r3, #0
 8009d90:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8009d92:	7ffb      	ldrb	r3, [r7, #31]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	bf0c      	ite	eq
 8009d98:	2301      	moveq	r3, #1
 8009d9a:	2300      	movne	r3, #0
 8009d9c:	b2db      	uxtb	r3, r3
 8009d9e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8009da0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009da4:	b299      	uxth	r1, r3
 8009da6:	6a3b      	ldr	r3, [r7, #32]
 8009da8:	68db      	ldr	r3, [r3, #12]
 8009daa:	685b      	ldr	r3, [r3, #4]
 8009dac:	8bba      	ldrh	r2, [r7, #28]
 8009dae:	6878      	ldr	r0, [r7, #4]
 8009db0:	f7ff fdf8 	bl	80099a4 <tcp_output_alloc_header>
 8009db4:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8009db6:	69bb      	ldr	r3, [r7, #24]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d102      	bne.n	8009dc2 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8009dbc:	f04f 33ff 	mov.w	r3, #4294967295
 8009dc0:	e04c      	b.n	8009e5c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8009dc2:	69bb      	ldr	r3, [r7, #24]
 8009dc4:	685b      	ldr	r3, [r3, #4]
 8009dc6:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8009dc8:	7ffb      	ldrb	r3, [r7, #31]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d011      	beq.n	8009df2 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8009dce:	697b      	ldr	r3, [r7, #20]
 8009dd0:	899b      	ldrh	r3, [r3, #12]
 8009dd2:	b29b      	uxth	r3, r3
 8009dd4:	b21b      	sxth	r3, r3
 8009dd6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009dda:	b21c      	sxth	r4, r3
 8009ddc:	2011      	movs	r0, #17
 8009dde:	f7f9 fd8b 	bl	80038f8 <lwip_htons>
 8009de2:	4603      	mov	r3, r0
 8009de4:	b21b      	sxth	r3, r3
 8009de6:	4323      	orrs	r3, r4
 8009de8:	b21b      	sxth	r3, r3
 8009dea:	b29a      	uxth	r2, r3
 8009dec:	697b      	ldr	r3, [r7, #20]
 8009dee:	819a      	strh	r2, [r3, #12]
 8009df0:	e010      	b.n	8009e14 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8009df2:	69bb      	ldr	r3, [r7, #24]
 8009df4:	685b      	ldr	r3, [r3, #4]
 8009df6:	3314      	adds	r3, #20
 8009df8:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8009dfa:	6a3b      	ldr	r3, [r7, #32]
 8009dfc:	6858      	ldr	r0, [r3, #4]
 8009dfe:	6a3b      	ldr	r3, [r7, #32]
 8009e00:	685b      	ldr	r3, [r3, #4]
 8009e02:	891a      	ldrh	r2, [r3, #8]
 8009e04:	6a3b      	ldr	r3, [r7, #32]
 8009e06:	891b      	ldrh	r3, [r3, #8]
 8009e08:	1ad3      	subs	r3, r2, r3
 8009e0a:	b29b      	uxth	r3, r3
 8009e0c:	2201      	movs	r2, #1
 8009e0e:	6939      	ldr	r1, [r7, #16]
 8009e10:	f7fb f9f2 	bl	80051f8 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8009e14:	6a3b      	ldr	r3, [r7, #32]
 8009e16:	68db      	ldr	r3, [r3, #12]
 8009e18:	685b      	ldr	r3, [r3, #4]
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	f7f9 fd81 	bl	8003922 <lwip_htonl>
 8009e20:	4603      	mov	r3, r0
 8009e22:	3301      	adds	r3, #1
 8009e24:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	1ad3      	subs	r3, r2, r3
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	da02      	bge.n	8009e38 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	68fa      	ldr	r2, [r7, #12]
 8009e36:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8009e38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	69b9      	ldr	r1, [r7, #24]
 8009e40:	6878      	ldr	r0, [r7, #4]
 8009e42:	f7ff fded 	bl	8009a20 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8009e46:	687a      	ldr	r2, [r7, #4]
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	3304      	adds	r3, #4
 8009e4c:	69b9      	ldr	r1, [r7, #24]
 8009e4e:	6878      	ldr	r0, [r7, #4]
 8009e50:	f7ff fe26 	bl	8009aa0 <tcp_output_control_segment>
 8009e54:	4603      	mov	r3, r0
 8009e56:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8009e58:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	372c      	adds	r7, #44	; 0x2c
 8009e60:	46bd      	mov	sp, r7
 8009e62:	bd90      	pop	{r4, r7, pc}
 8009e64:	0800fc60 	.word	0x0800fc60
 8009e68:	08010458 	.word	0x08010458
 8009e6c:	0800fcb4 	.word	0x0800fcb4

08009e70 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8009e70:	b580      	push	{r7, lr}
 8009e72:	b082      	sub	sp, #8
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8009e78:	f7fb fb3e 	bl	80054f8 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8009e7c:	4b0a      	ldr	r3, [pc, #40]	; (8009ea8 <tcpip_tcp_timer+0x38>)
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d103      	bne.n	8009e8c <tcpip_tcp_timer+0x1c>
 8009e84:	4b09      	ldr	r3, [pc, #36]	; (8009eac <tcpip_tcp_timer+0x3c>)
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d005      	beq.n	8009e98 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	4908      	ldr	r1, [pc, #32]	; (8009eb0 <tcpip_tcp_timer+0x40>)
 8009e90:	20fa      	movs	r0, #250	; 0xfa
 8009e92:	f000 f8f3 	bl	800a07c <sys_timeout>
 8009e96:	e003      	b.n	8009ea0 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8009e98:	4b06      	ldr	r3, [pc, #24]	; (8009eb4 <tcpip_tcp_timer+0x44>)
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	601a      	str	r2, [r3, #0]
  }
}
 8009e9e:	bf00      	nop
 8009ea0:	bf00      	nop
 8009ea2:	3708      	adds	r7, #8
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	bd80      	pop	{r7, pc}
 8009ea8:	20006874 	.word	0x20006874
 8009eac:	20006884 	.word	0x20006884
 8009eb0:	08009e71 	.word	0x08009e71
 8009eb4:	20000108 	.word	0x20000108

08009eb8 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8009ebc:	4b0a      	ldr	r3, [pc, #40]	; (8009ee8 <tcp_timer_needed+0x30>)
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d10f      	bne.n	8009ee4 <tcp_timer_needed+0x2c>
 8009ec4:	4b09      	ldr	r3, [pc, #36]	; (8009eec <tcp_timer_needed+0x34>)
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d103      	bne.n	8009ed4 <tcp_timer_needed+0x1c>
 8009ecc:	4b08      	ldr	r3, [pc, #32]	; (8009ef0 <tcp_timer_needed+0x38>)
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d007      	beq.n	8009ee4 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8009ed4:	4b04      	ldr	r3, [pc, #16]	; (8009ee8 <tcp_timer_needed+0x30>)
 8009ed6:	2201      	movs	r2, #1
 8009ed8:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8009eda:	2200      	movs	r2, #0
 8009edc:	4905      	ldr	r1, [pc, #20]	; (8009ef4 <tcp_timer_needed+0x3c>)
 8009ede:	20fa      	movs	r0, #250	; 0xfa
 8009ee0:	f000 f8cc 	bl	800a07c <sys_timeout>
  }
}
 8009ee4:	bf00      	nop
 8009ee6:	bd80      	pop	{r7, pc}
 8009ee8:	20000108 	.word	0x20000108
 8009eec:	20006874 	.word	0x20006874
 8009ef0:	20006884 	.word	0x20006884
 8009ef4:	08009e71 	.word	0x08009e71

08009ef8 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b086      	sub	sp, #24
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	60f8      	str	r0, [r7, #12]
 8009f00:	60b9      	str	r1, [r7, #8]
 8009f02:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8009f04:	2006      	movs	r0, #6
 8009f06:	f7fa f94d 	bl	80041a4 <memp_malloc>
 8009f0a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8009f0c:	693b      	ldr	r3, [r7, #16]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d109      	bne.n	8009f26 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8009f12:	693b      	ldr	r3, [r7, #16]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d151      	bne.n	8009fbc <sys_timeout_abs+0xc4>
 8009f18:	4b2a      	ldr	r3, [pc, #168]	; (8009fc4 <sys_timeout_abs+0xcc>)
 8009f1a:	22be      	movs	r2, #190	; 0xbe
 8009f1c:	492a      	ldr	r1, [pc, #168]	; (8009fc8 <sys_timeout_abs+0xd0>)
 8009f1e:	482b      	ldr	r0, [pc, #172]	; (8009fcc <sys_timeout_abs+0xd4>)
 8009f20:	f003 f9a2 	bl	800d268 <iprintf>
    return;
 8009f24:	e04a      	b.n	8009fbc <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8009f26:	693b      	ldr	r3, [r7, #16]
 8009f28:	2200      	movs	r2, #0
 8009f2a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8009f2c:	693b      	ldr	r3, [r7, #16]
 8009f2e:	68ba      	ldr	r2, [r7, #8]
 8009f30:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8009f32:	693b      	ldr	r3, [r7, #16]
 8009f34:	687a      	ldr	r2, [r7, #4]
 8009f36:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8009f38:	693b      	ldr	r3, [r7, #16]
 8009f3a:	68fa      	ldr	r2, [r7, #12]
 8009f3c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8009f3e:	4b24      	ldr	r3, [pc, #144]	; (8009fd0 <sys_timeout_abs+0xd8>)
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d103      	bne.n	8009f4e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8009f46:	4a22      	ldr	r2, [pc, #136]	; (8009fd0 <sys_timeout_abs+0xd8>)
 8009f48:	693b      	ldr	r3, [r7, #16]
 8009f4a:	6013      	str	r3, [r2, #0]
    return;
 8009f4c:	e037      	b.n	8009fbe <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8009f4e:	693b      	ldr	r3, [r7, #16]
 8009f50:	685a      	ldr	r2, [r3, #4]
 8009f52:	4b1f      	ldr	r3, [pc, #124]	; (8009fd0 <sys_timeout_abs+0xd8>)
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	685b      	ldr	r3, [r3, #4]
 8009f58:	1ad3      	subs	r3, r2, r3
 8009f5a:	0fdb      	lsrs	r3, r3, #31
 8009f5c:	f003 0301 	and.w	r3, r3, #1
 8009f60:	b2db      	uxtb	r3, r3
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d007      	beq.n	8009f76 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8009f66:	4b1a      	ldr	r3, [pc, #104]	; (8009fd0 <sys_timeout_abs+0xd8>)
 8009f68:	681a      	ldr	r2, [r3, #0]
 8009f6a:	693b      	ldr	r3, [r7, #16]
 8009f6c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8009f6e:	4a18      	ldr	r2, [pc, #96]	; (8009fd0 <sys_timeout_abs+0xd8>)
 8009f70:	693b      	ldr	r3, [r7, #16]
 8009f72:	6013      	str	r3, [r2, #0]
 8009f74:	e023      	b.n	8009fbe <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8009f76:	4b16      	ldr	r3, [pc, #88]	; (8009fd0 <sys_timeout_abs+0xd8>)
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	617b      	str	r3, [r7, #20]
 8009f7c:	e01a      	b.n	8009fb4 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8009f7e:	697b      	ldr	r3, [r7, #20]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d00b      	beq.n	8009f9e <sys_timeout_abs+0xa6>
 8009f86:	693b      	ldr	r3, [r7, #16]
 8009f88:	685a      	ldr	r2, [r3, #4]
 8009f8a:	697b      	ldr	r3, [r7, #20]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	685b      	ldr	r3, [r3, #4]
 8009f90:	1ad3      	subs	r3, r2, r3
 8009f92:	0fdb      	lsrs	r3, r3, #31
 8009f94:	f003 0301 	and.w	r3, r3, #1
 8009f98:	b2db      	uxtb	r3, r3
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d007      	beq.n	8009fae <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8009f9e:	697b      	ldr	r3, [r7, #20]
 8009fa0:	681a      	ldr	r2, [r3, #0]
 8009fa2:	693b      	ldr	r3, [r7, #16]
 8009fa4:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8009fa6:	697b      	ldr	r3, [r7, #20]
 8009fa8:	693a      	ldr	r2, [r7, #16]
 8009faa:	601a      	str	r2, [r3, #0]
        break;
 8009fac:	e007      	b.n	8009fbe <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8009fae:	697b      	ldr	r3, [r7, #20]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	617b      	str	r3, [r7, #20]
 8009fb4:	697b      	ldr	r3, [r7, #20]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d1e1      	bne.n	8009f7e <sys_timeout_abs+0x86>
 8009fba:	e000      	b.n	8009fbe <sys_timeout_abs+0xc6>
    return;
 8009fbc:	bf00      	nop
      }
    }
  }
}
 8009fbe:	3718      	adds	r7, #24
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	bd80      	pop	{r7, pc}
 8009fc4:	0801047c 	.word	0x0801047c
 8009fc8:	080104b0 	.word	0x080104b0
 8009fcc:	080104f0 	.word	0x080104f0
 8009fd0:	20000100 	.word	0x20000100

08009fd4 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b086      	sub	sp, #24
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8009fe0:	697b      	ldr	r3, [r7, #20]
 8009fe2:	685b      	ldr	r3, [r3, #4]
 8009fe4:	4798      	blx	r3

  now = sys_now();
 8009fe6:	f7f9 fbf9 	bl	80037dc <sys_now>
 8009fea:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8009fec:	697b      	ldr	r3, [r7, #20]
 8009fee:	681a      	ldr	r2, [r3, #0]
 8009ff0:	4b0f      	ldr	r3, [pc, #60]	; (800a030 <lwip_cyclic_timer+0x5c>)
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	4413      	add	r3, r2
 8009ff6:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8009ff8:	68fa      	ldr	r2, [r7, #12]
 8009ffa:	693b      	ldr	r3, [r7, #16]
 8009ffc:	1ad3      	subs	r3, r2, r3
 8009ffe:	0fdb      	lsrs	r3, r3, #31
 800a000:	f003 0301 	and.w	r3, r3, #1
 800a004:	b2db      	uxtb	r3, r3
 800a006:	2b00      	cmp	r3, #0
 800a008:	d009      	beq.n	800a01e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800a00a:	697b      	ldr	r3, [r7, #20]
 800a00c:	681a      	ldr	r2, [r3, #0]
 800a00e:	693b      	ldr	r3, [r7, #16]
 800a010:	4413      	add	r3, r2
 800a012:	687a      	ldr	r2, [r7, #4]
 800a014:	4907      	ldr	r1, [pc, #28]	; (800a034 <lwip_cyclic_timer+0x60>)
 800a016:	4618      	mov	r0, r3
 800a018:	f7ff ff6e 	bl	8009ef8 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800a01c:	e004      	b.n	800a028 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800a01e:	687a      	ldr	r2, [r7, #4]
 800a020:	4904      	ldr	r1, [pc, #16]	; (800a034 <lwip_cyclic_timer+0x60>)
 800a022:	68f8      	ldr	r0, [r7, #12]
 800a024:	f7ff ff68 	bl	8009ef8 <sys_timeout_abs>
}
 800a028:	bf00      	nop
 800a02a:	3718      	adds	r7, #24
 800a02c:	46bd      	mov	sp, r7
 800a02e:	bd80      	pop	{r7, pc}
 800a030:	20000104 	.word	0x20000104
 800a034:	08009fd5 	.word	0x08009fd5

0800a038 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800a038:	b580      	push	{r7, lr}
 800a03a:	b082      	sub	sp, #8
 800a03c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800a03e:	2301      	movs	r3, #1
 800a040:	607b      	str	r3, [r7, #4]
 800a042:	e00e      	b.n	800a062 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800a044:	4a0b      	ldr	r2, [pc, #44]	; (800a074 <sys_timeouts_init+0x3c>)
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	00db      	lsls	r3, r3, #3
 800a050:	4a08      	ldr	r2, [pc, #32]	; (800a074 <sys_timeouts_init+0x3c>)
 800a052:	4413      	add	r3, r2
 800a054:	461a      	mov	r2, r3
 800a056:	4908      	ldr	r1, [pc, #32]	; (800a078 <sys_timeouts_init+0x40>)
 800a058:	f000 f810 	bl	800a07c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	3301      	adds	r3, #1
 800a060:	607b      	str	r3, [r7, #4]
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	2b02      	cmp	r3, #2
 800a066:	d9ed      	bls.n	800a044 <sys_timeouts_init+0xc>
  }
}
 800a068:	bf00      	nop
 800a06a:	bf00      	nop
 800a06c:	3708      	adds	r7, #8
 800a06e:	46bd      	mov	sp, r7
 800a070:	bd80      	pop	{r7, pc}
 800a072:	bf00      	nop
 800a074:	08011054 	.word	0x08011054
 800a078:	08009fd5 	.word	0x08009fd5

0800a07c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800a07c:	b580      	push	{r7, lr}
 800a07e:	b086      	sub	sp, #24
 800a080:	af00      	add	r7, sp, #0
 800a082:	60f8      	str	r0, [r7, #12]
 800a084:	60b9      	str	r1, [r7, #8]
 800a086:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a08e:	d306      	bcc.n	800a09e <sys_timeout+0x22>
 800a090:	4b0a      	ldr	r3, [pc, #40]	; (800a0bc <sys_timeout+0x40>)
 800a092:	f240 1229 	movw	r2, #297	; 0x129
 800a096:	490a      	ldr	r1, [pc, #40]	; (800a0c0 <sys_timeout+0x44>)
 800a098:	480a      	ldr	r0, [pc, #40]	; (800a0c4 <sys_timeout+0x48>)
 800a09a:	f003 f8e5 	bl	800d268 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800a09e:	f7f9 fb9d 	bl	80037dc <sys_now>
 800a0a2:	4602      	mov	r2, r0
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	4413      	add	r3, r2
 800a0a8:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800a0aa:	687a      	ldr	r2, [r7, #4]
 800a0ac:	68b9      	ldr	r1, [r7, #8]
 800a0ae:	6978      	ldr	r0, [r7, #20]
 800a0b0:	f7ff ff22 	bl	8009ef8 <sys_timeout_abs>
#endif
}
 800a0b4:	bf00      	nop
 800a0b6:	3718      	adds	r7, #24
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	bd80      	pop	{r7, pc}
 800a0bc:	0801047c 	.word	0x0801047c
 800a0c0:	08010518 	.word	0x08010518
 800a0c4:	080104f0 	.word	0x080104f0

0800a0c8 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	b084      	sub	sp, #16
 800a0cc:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800a0ce:	f7f9 fb85 	bl	80037dc <sys_now>
 800a0d2:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 800a0d4:	4b17      	ldr	r3, [pc, #92]	; (800a134 <sys_check_timeouts+0x6c>)
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800a0da:	68bb      	ldr	r3, [r7, #8]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d022      	beq.n	800a126 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800a0e0:	68bb      	ldr	r3, [r7, #8]
 800a0e2:	685b      	ldr	r3, [r3, #4]
 800a0e4:	68fa      	ldr	r2, [r7, #12]
 800a0e6:	1ad3      	subs	r3, r2, r3
 800a0e8:	0fdb      	lsrs	r3, r3, #31
 800a0ea:	f003 0301 	and.w	r3, r3, #1
 800a0ee:	b2db      	uxtb	r3, r3
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d11a      	bne.n	800a12a <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800a0f4:	68bb      	ldr	r3, [r7, #8]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	4a0e      	ldr	r2, [pc, #56]	; (800a134 <sys_check_timeouts+0x6c>)
 800a0fa:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800a0fc:	68bb      	ldr	r3, [r7, #8]
 800a0fe:	689b      	ldr	r3, [r3, #8]
 800a100:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800a102:	68bb      	ldr	r3, [r7, #8]
 800a104:	68db      	ldr	r3, [r3, #12]
 800a106:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800a108:	68bb      	ldr	r3, [r7, #8]
 800a10a:	685b      	ldr	r3, [r3, #4]
 800a10c:	4a0a      	ldr	r2, [pc, #40]	; (800a138 <sys_check_timeouts+0x70>)
 800a10e:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800a110:	68b9      	ldr	r1, [r7, #8]
 800a112:	2006      	movs	r0, #6
 800a114:	f7fa f892 	bl	800423c <memp_free>
    if (handler != NULL) {
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d0da      	beq.n	800a0d4 <sys_check_timeouts+0xc>
      handler(arg);
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	6838      	ldr	r0, [r7, #0]
 800a122:	4798      	blx	r3
  do {
 800a124:	e7d6      	b.n	800a0d4 <sys_check_timeouts+0xc>
      return;
 800a126:	bf00      	nop
 800a128:	e000      	b.n	800a12c <sys_check_timeouts+0x64>
      return;
 800a12a:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800a12c:	3710      	adds	r7, #16
 800a12e:	46bd      	mov	sp, r7
 800a130:	bd80      	pop	{r7, pc}
 800a132:	bf00      	nop
 800a134:	20000100 	.word	0x20000100
 800a138:	20000104 	.word	0x20000104

0800a13c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800a13c:	b580      	push	{r7, lr}
 800a13e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800a140:	f003 f8aa 	bl	800d298 <rand>
 800a144:	4603      	mov	r3, r0
 800a146:	b29b      	uxth	r3, r3
 800a148:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800a14c:	b29b      	uxth	r3, r3
 800a14e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800a152:	b29a      	uxth	r2, r3
 800a154:	4b01      	ldr	r3, [pc, #4]	; (800a15c <udp_init+0x20>)
 800a156:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800a158:	bf00      	nop
 800a15a:	bd80      	pop	{r7, pc}
 800a15c:	20000010 	.word	0x20000010

0800a160 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800a160:	b480      	push	{r7}
 800a162:	b083      	sub	sp, #12
 800a164:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800a166:	2300      	movs	r3, #0
 800a168:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800a16a:	4b17      	ldr	r3, [pc, #92]	; (800a1c8 <udp_new_port+0x68>)
 800a16c:	881b      	ldrh	r3, [r3, #0]
 800a16e:	1c5a      	adds	r2, r3, #1
 800a170:	b291      	uxth	r1, r2
 800a172:	4a15      	ldr	r2, [pc, #84]	; (800a1c8 <udp_new_port+0x68>)
 800a174:	8011      	strh	r1, [r2, #0]
 800a176:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a17a:	4293      	cmp	r3, r2
 800a17c:	d103      	bne.n	800a186 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800a17e:	4b12      	ldr	r3, [pc, #72]	; (800a1c8 <udp_new_port+0x68>)
 800a180:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800a184:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800a186:	4b11      	ldr	r3, [pc, #68]	; (800a1cc <udp_new_port+0x6c>)
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	603b      	str	r3, [r7, #0]
 800a18c:	e011      	b.n	800a1b2 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800a18e:	683b      	ldr	r3, [r7, #0]
 800a190:	8a5a      	ldrh	r2, [r3, #18]
 800a192:	4b0d      	ldr	r3, [pc, #52]	; (800a1c8 <udp_new_port+0x68>)
 800a194:	881b      	ldrh	r3, [r3, #0]
 800a196:	429a      	cmp	r2, r3
 800a198:	d108      	bne.n	800a1ac <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800a19a:	88fb      	ldrh	r3, [r7, #6]
 800a19c:	3301      	adds	r3, #1
 800a19e:	80fb      	strh	r3, [r7, #6]
 800a1a0:	88fb      	ldrh	r3, [r7, #6]
 800a1a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a1a6:	d3e0      	bcc.n	800a16a <udp_new_port+0xa>
        return 0;
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	e007      	b.n	800a1bc <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800a1ac:	683b      	ldr	r3, [r7, #0]
 800a1ae:	68db      	ldr	r3, [r3, #12]
 800a1b0:	603b      	str	r3, [r7, #0]
 800a1b2:	683b      	ldr	r3, [r7, #0]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d1ea      	bne.n	800a18e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800a1b8:	4b03      	ldr	r3, [pc, #12]	; (800a1c8 <udp_new_port+0x68>)
 800a1ba:	881b      	ldrh	r3, [r3, #0]
}
 800a1bc:	4618      	mov	r0, r3
 800a1be:	370c      	adds	r7, #12
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c6:	4770      	bx	lr
 800a1c8:	20000010 	.word	0x20000010
 800a1cc:	2000688c 	.word	0x2000688c

0800a1d0 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b084      	sub	sp, #16
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	60f8      	str	r0, [r7, #12]
 800a1d8:	60b9      	str	r1, [r7, #8]
 800a1da:	4613      	mov	r3, r2
 800a1dc:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d105      	bne.n	800a1f0 <udp_input_local_match+0x20>
 800a1e4:	4b27      	ldr	r3, [pc, #156]	; (800a284 <udp_input_local_match+0xb4>)
 800a1e6:	2287      	movs	r2, #135	; 0x87
 800a1e8:	4927      	ldr	r1, [pc, #156]	; (800a288 <udp_input_local_match+0xb8>)
 800a1ea:	4828      	ldr	r0, [pc, #160]	; (800a28c <udp_input_local_match+0xbc>)
 800a1ec:	f003 f83c 	bl	800d268 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800a1f0:	68bb      	ldr	r3, [r7, #8]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d105      	bne.n	800a202 <udp_input_local_match+0x32>
 800a1f6:	4b23      	ldr	r3, [pc, #140]	; (800a284 <udp_input_local_match+0xb4>)
 800a1f8:	2288      	movs	r2, #136	; 0x88
 800a1fa:	4925      	ldr	r1, [pc, #148]	; (800a290 <udp_input_local_match+0xc0>)
 800a1fc:	4823      	ldr	r0, [pc, #140]	; (800a28c <udp_input_local_match+0xbc>)
 800a1fe:	f003 f833 	bl	800d268 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	7a1b      	ldrb	r3, [r3, #8]
 800a206:	2b00      	cmp	r3, #0
 800a208:	d00b      	beq.n	800a222 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	7a1a      	ldrb	r2, [r3, #8]
 800a20e:	4b21      	ldr	r3, [pc, #132]	; (800a294 <udp_input_local_match+0xc4>)
 800a210:	685b      	ldr	r3, [r3, #4]
 800a212:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a216:	3301      	adds	r3, #1
 800a218:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a21a:	429a      	cmp	r2, r3
 800a21c:	d001      	beq.n	800a222 <udp_input_local_match+0x52>
    return 0;
 800a21e:	2300      	movs	r3, #0
 800a220:	e02b      	b.n	800a27a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800a222:	79fb      	ldrb	r3, [r7, #7]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d018      	beq.n	800a25a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d013      	beq.n	800a256 <udp_input_local_match+0x86>
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	2b00      	cmp	r3, #0
 800a234:	d00f      	beq.n	800a256 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800a236:	4b17      	ldr	r3, [pc, #92]	; (800a294 <udp_input_local_match+0xc4>)
 800a238:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800a23a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a23e:	d00a      	beq.n	800a256 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	681a      	ldr	r2, [r3, #0]
 800a244:	4b13      	ldr	r3, [pc, #76]	; (800a294 <udp_input_local_match+0xc4>)
 800a246:	695b      	ldr	r3, [r3, #20]
 800a248:	405a      	eors	r2, r3
 800a24a:	68bb      	ldr	r3, [r7, #8]
 800a24c:	3308      	adds	r3, #8
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800a252:	2b00      	cmp	r3, #0
 800a254:	d110      	bne.n	800a278 <udp_input_local_match+0xa8>
          return 1;
 800a256:	2301      	movs	r3, #1
 800a258:	e00f      	b.n	800a27a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d009      	beq.n	800a274 <udp_input_local_match+0xa4>
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d005      	beq.n	800a274 <udp_input_local_match+0xa4>
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	681a      	ldr	r2, [r3, #0]
 800a26c:	4b09      	ldr	r3, [pc, #36]	; (800a294 <udp_input_local_match+0xc4>)
 800a26e:	695b      	ldr	r3, [r3, #20]
 800a270:	429a      	cmp	r2, r3
 800a272:	d101      	bne.n	800a278 <udp_input_local_match+0xa8>
        return 1;
 800a274:	2301      	movs	r3, #1
 800a276:	e000      	b.n	800a27a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800a278:	2300      	movs	r3, #0
}
 800a27a:	4618      	mov	r0, r3
 800a27c:	3710      	adds	r7, #16
 800a27e:	46bd      	mov	sp, r7
 800a280:	bd80      	pop	{r7, pc}
 800a282:	bf00      	nop
 800a284:	08010564 	.word	0x08010564
 800a288:	08010594 	.word	0x08010594
 800a28c:	080105b8 	.word	0x080105b8
 800a290:	080105e0 	.word	0x080105e0
 800a294:	20003348 	.word	0x20003348

0800a298 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800a298:	b590      	push	{r4, r7, lr}
 800a29a:	b08d      	sub	sp, #52	; 0x34
 800a29c:	af02      	add	r7, sp, #8
 800a29e:	6078      	str	r0, [r7, #4]
 800a2a0:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d105      	bne.n	800a2b8 <udp_input+0x20>
 800a2ac:	4b7c      	ldr	r3, [pc, #496]	; (800a4a0 <udp_input+0x208>)
 800a2ae:	22cf      	movs	r2, #207	; 0xcf
 800a2b0:	497c      	ldr	r1, [pc, #496]	; (800a4a4 <udp_input+0x20c>)
 800a2b2:	487d      	ldr	r0, [pc, #500]	; (800a4a8 <udp_input+0x210>)
 800a2b4:	f002 ffd8 	bl	800d268 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800a2b8:	683b      	ldr	r3, [r7, #0]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d105      	bne.n	800a2ca <udp_input+0x32>
 800a2be:	4b78      	ldr	r3, [pc, #480]	; (800a4a0 <udp_input+0x208>)
 800a2c0:	22d0      	movs	r2, #208	; 0xd0
 800a2c2:	497a      	ldr	r1, [pc, #488]	; (800a4ac <udp_input+0x214>)
 800a2c4:	4878      	ldr	r0, [pc, #480]	; (800a4a8 <udp_input+0x210>)
 800a2c6:	f002 ffcf 	bl	800d268 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	895b      	ldrh	r3, [r3, #10]
 800a2ce:	2b07      	cmp	r3, #7
 800a2d0:	d803      	bhi.n	800a2da <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800a2d2:	6878      	ldr	r0, [r7, #4]
 800a2d4:	f7fa fd96 	bl	8004e04 <pbuf_free>
    goto end;
 800a2d8:	e0de      	b.n	800a498 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	685b      	ldr	r3, [r3, #4]
 800a2de:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800a2e0:	4b73      	ldr	r3, [pc, #460]	; (800a4b0 <udp_input+0x218>)
 800a2e2:	695b      	ldr	r3, [r3, #20]
 800a2e4:	4a72      	ldr	r2, [pc, #456]	; (800a4b0 <udp_input+0x218>)
 800a2e6:	6812      	ldr	r2, [r2, #0]
 800a2e8:	4611      	mov	r1, r2
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	f002 f80a 	bl	800c304 <ip4_addr_isbroadcast_u32>
 800a2f0:	4603      	mov	r3, r0
 800a2f2:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800a2f4:	697b      	ldr	r3, [r7, #20]
 800a2f6:	881b      	ldrh	r3, [r3, #0]
 800a2f8:	b29b      	uxth	r3, r3
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	f7f9 fafc 	bl	80038f8 <lwip_htons>
 800a300:	4603      	mov	r3, r0
 800a302:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800a304:	697b      	ldr	r3, [r7, #20]
 800a306:	885b      	ldrh	r3, [r3, #2]
 800a308:	b29b      	uxth	r3, r3
 800a30a:	4618      	mov	r0, r3
 800a30c:	f7f9 faf4 	bl	80038f8 <lwip_htons>
 800a310:	4603      	mov	r3, r0
 800a312:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800a314:	2300      	movs	r3, #0
 800a316:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800a318:	2300      	movs	r3, #0
 800a31a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800a31c:	2300      	movs	r3, #0
 800a31e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800a320:	4b64      	ldr	r3, [pc, #400]	; (800a4b4 <udp_input+0x21c>)
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	627b      	str	r3, [r7, #36]	; 0x24
 800a326:	e054      	b.n	800a3d2 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800a328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a32a:	8a5b      	ldrh	r3, [r3, #18]
 800a32c:	89fa      	ldrh	r2, [r7, #14]
 800a32e:	429a      	cmp	r2, r3
 800a330:	d14a      	bne.n	800a3c8 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800a332:	7cfb      	ldrb	r3, [r7, #19]
 800a334:	461a      	mov	r2, r3
 800a336:	6839      	ldr	r1, [r7, #0]
 800a338:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a33a:	f7ff ff49 	bl	800a1d0 <udp_input_local_match>
 800a33e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800a340:	2b00      	cmp	r3, #0
 800a342:	d041      	beq.n	800a3c8 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800a344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a346:	7c1b      	ldrb	r3, [r3, #16]
 800a348:	f003 0304 	and.w	r3, r3, #4
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d11d      	bne.n	800a38c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800a350:	69fb      	ldr	r3, [r7, #28]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d102      	bne.n	800a35c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800a356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a358:	61fb      	str	r3, [r7, #28]
 800a35a:	e017      	b.n	800a38c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800a35c:	7cfb      	ldrb	r3, [r7, #19]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d014      	beq.n	800a38c <udp_input+0xf4>
 800a362:	4b53      	ldr	r3, [pc, #332]	; (800a4b0 <udp_input+0x218>)
 800a364:	695b      	ldr	r3, [r3, #20]
 800a366:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a36a:	d10f      	bne.n	800a38c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800a36c:	69fb      	ldr	r3, [r7, #28]
 800a36e:	681a      	ldr	r2, [r3, #0]
 800a370:	683b      	ldr	r3, [r7, #0]
 800a372:	3304      	adds	r3, #4
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	429a      	cmp	r2, r3
 800a378:	d008      	beq.n	800a38c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800a37a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a37c:	681a      	ldr	r2, [r3, #0]
 800a37e:	683b      	ldr	r3, [r7, #0]
 800a380:	3304      	adds	r3, #4
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	429a      	cmp	r2, r3
 800a386:	d101      	bne.n	800a38c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800a388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a38a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800a38c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a38e:	8a9b      	ldrh	r3, [r3, #20]
 800a390:	8a3a      	ldrh	r2, [r7, #16]
 800a392:	429a      	cmp	r2, r3
 800a394:	d118      	bne.n	800a3c8 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800a396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a398:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d005      	beq.n	800a3aa <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800a39e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3a0:	685a      	ldr	r2, [r3, #4]
 800a3a2:	4b43      	ldr	r3, [pc, #268]	; (800a4b0 <udp_input+0x218>)
 800a3a4:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800a3a6:	429a      	cmp	r2, r3
 800a3a8:	d10e      	bne.n	800a3c8 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800a3aa:	6a3b      	ldr	r3, [r7, #32]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d014      	beq.n	800a3da <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800a3b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3b2:	68da      	ldr	r2, [r3, #12]
 800a3b4:	6a3b      	ldr	r3, [r7, #32]
 800a3b6:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800a3b8:	4b3e      	ldr	r3, [pc, #248]	; (800a4b4 <udp_input+0x21c>)
 800a3ba:	681a      	ldr	r2, [r3, #0]
 800a3bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3be:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800a3c0:	4a3c      	ldr	r2, [pc, #240]	; (800a4b4 <udp_input+0x21c>)
 800a3c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3c4:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800a3c6:	e008      	b.n	800a3da <udp_input+0x142>
      }
    }

    prev = pcb;
 800a3c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3ca:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800a3cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3ce:	68db      	ldr	r3, [r3, #12]
 800a3d0:	627b      	str	r3, [r7, #36]	; 0x24
 800a3d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d1a7      	bne.n	800a328 <udp_input+0x90>
 800a3d8:	e000      	b.n	800a3dc <udp_input+0x144>
        break;
 800a3da:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800a3dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d101      	bne.n	800a3e6 <udp_input+0x14e>
    pcb = uncon_pcb;
 800a3e2:	69fb      	ldr	r3, [r7, #28]
 800a3e4:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800a3e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d002      	beq.n	800a3f2 <udp_input+0x15a>
    for_us = 1;
 800a3ec:	2301      	movs	r3, #1
 800a3ee:	76fb      	strb	r3, [r7, #27]
 800a3f0:	e00a      	b.n	800a408 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800a3f2:	683b      	ldr	r3, [r7, #0]
 800a3f4:	3304      	adds	r3, #4
 800a3f6:	681a      	ldr	r2, [r3, #0]
 800a3f8:	4b2d      	ldr	r3, [pc, #180]	; (800a4b0 <udp_input+0x218>)
 800a3fa:	695b      	ldr	r3, [r3, #20]
 800a3fc:	429a      	cmp	r2, r3
 800a3fe:	bf0c      	ite	eq
 800a400:	2301      	moveq	r3, #1
 800a402:	2300      	movne	r3, #0
 800a404:	b2db      	uxtb	r3, r3
 800a406:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800a408:	7efb      	ldrb	r3, [r7, #27]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d041      	beq.n	800a492 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800a40e:	2108      	movs	r1, #8
 800a410:	6878      	ldr	r0, [r7, #4]
 800a412:	f7fa fc71 	bl	8004cf8 <pbuf_remove_header>
 800a416:	4603      	mov	r3, r0
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d00a      	beq.n	800a432 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800a41c:	4b20      	ldr	r3, [pc, #128]	; (800a4a0 <udp_input+0x208>)
 800a41e:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800a422:	4925      	ldr	r1, [pc, #148]	; (800a4b8 <udp_input+0x220>)
 800a424:	4820      	ldr	r0, [pc, #128]	; (800a4a8 <udp_input+0x210>)
 800a426:	f002 ff1f 	bl	800d268 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800a42a:	6878      	ldr	r0, [r7, #4]
 800a42c:	f7fa fcea 	bl	8004e04 <pbuf_free>
      goto end;
 800a430:	e032      	b.n	800a498 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800a432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a434:	2b00      	cmp	r3, #0
 800a436:	d012      	beq.n	800a45e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800a438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a43a:	699b      	ldr	r3, [r3, #24]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d00a      	beq.n	800a456 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800a440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a442:	699c      	ldr	r4, [r3, #24]
 800a444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a446:	69d8      	ldr	r0, [r3, #28]
 800a448:	8a3b      	ldrh	r3, [r7, #16]
 800a44a:	9300      	str	r3, [sp, #0]
 800a44c:	4b1b      	ldr	r3, [pc, #108]	; (800a4bc <udp_input+0x224>)
 800a44e:	687a      	ldr	r2, [r7, #4]
 800a450:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a452:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800a454:	e021      	b.n	800a49a <udp_input+0x202>
        pbuf_free(p);
 800a456:	6878      	ldr	r0, [r7, #4]
 800a458:	f7fa fcd4 	bl	8004e04 <pbuf_free>
        goto end;
 800a45c:	e01c      	b.n	800a498 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800a45e:	7cfb      	ldrb	r3, [r7, #19]
 800a460:	2b00      	cmp	r3, #0
 800a462:	d112      	bne.n	800a48a <udp_input+0x1f2>
 800a464:	4b12      	ldr	r3, [pc, #72]	; (800a4b0 <udp_input+0x218>)
 800a466:	695b      	ldr	r3, [r3, #20]
 800a468:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a46c:	2be0      	cmp	r3, #224	; 0xe0
 800a46e:	d00c      	beq.n	800a48a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800a470:	4b0f      	ldr	r3, [pc, #60]	; (800a4b0 <udp_input+0x218>)
 800a472:	899b      	ldrh	r3, [r3, #12]
 800a474:	3308      	adds	r3, #8
 800a476:	b29b      	uxth	r3, r3
 800a478:	b21b      	sxth	r3, r3
 800a47a:	4619      	mov	r1, r3
 800a47c:	6878      	ldr	r0, [r7, #4]
 800a47e:	f7fa fcae 	bl	8004dde <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800a482:	2103      	movs	r1, #3
 800a484:	6878      	ldr	r0, [r7, #4]
 800a486:	f001 fc1d 	bl	800bcc4 <icmp_dest_unreach>
      pbuf_free(p);
 800a48a:	6878      	ldr	r0, [r7, #4]
 800a48c:	f7fa fcba 	bl	8004e04 <pbuf_free>
  return;
 800a490:	e003      	b.n	800a49a <udp_input+0x202>
    pbuf_free(p);
 800a492:	6878      	ldr	r0, [r7, #4]
 800a494:	f7fa fcb6 	bl	8004e04 <pbuf_free>
  return;
 800a498:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800a49a:	372c      	adds	r7, #44	; 0x2c
 800a49c:	46bd      	mov	sp, r7
 800a49e:	bd90      	pop	{r4, r7, pc}
 800a4a0:	08010564 	.word	0x08010564
 800a4a4:	08010608 	.word	0x08010608
 800a4a8:	080105b8 	.word	0x080105b8
 800a4ac:	08010620 	.word	0x08010620
 800a4b0:	20003348 	.word	0x20003348
 800a4b4:	2000688c 	.word	0x2000688c
 800a4b8:	0801063c 	.word	0x0801063c
 800a4bc:	20003358 	.word	0x20003358

0800a4c0 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 800a4c0:	b580      	push	{r7, lr}
 800a4c2:	b082      	sub	sp, #8
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	6078      	str	r0, [r7, #4]
 800a4c8:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d109      	bne.n	800a4e4 <udp_send+0x24>
 800a4d0:	4b11      	ldr	r3, [pc, #68]	; (800a518 <udp_send+0x58>)
 800a4d2:	f240 12d5 	movw	r2, #469	; 0x1d5
 800a4d6:	4911      	ldr	r1, [pc, #68]	; (800a51c <udp_send+0x5c>)
 800a4d8:	4811      	ldr	r0, [pc, #68]	; (800a520 <udp_send+0x60>)
 800a4da:	f002 fec5 	bl	800d268 <iprintf>
 800a4de:	f06f 030f 	mvn.w	r3, #15
 800a4e2:	e015      	b.n	800a510 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 800a4e4:	683b      	ldr	r3, [r7, #0]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d109      	bne.n	800a4fe <udp_send+0x3e>
 800a4ea:	4b0b      	ldr	r3, [pc, #44]	; (800a518 <udp_send+0x58>)
 800a4ec:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 800a4f0:	490c      	ldr	r1, [pc, #48]	; (800a524 <udp_send+0x64>)
 800a4f2:	480b      	ldr	r0, [pc, #44]	; (800a520 <udp_send+0x60>)
 800a4f4:	f002 feb8 	bl	800d268 <iprintf>
 800a4f8:	f06f 030f 	mvn.w	r3, #15
 800a4fc:	e008      	b.n	800a510 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	1d1a      	adds	r2, r3, #4
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	8a9b      	ldrh	r3, [r3, #20]
 800a506:	6839      	ldr	r1, [r7, #0]
 800a508:	6878      	ldr	r0, [r7, #4]
 800a50a:	f000 f80d 	bl	800a528 <udp_sendto>
 800a50e:	4603      	mov	r3, r0
}
 800a510:	4618      	mov	r0, r3
 800a512:	3708      	adds	r7, #8
 800a514:	46bd      	mov	sp, r7
 800a516:	bd80      	pop	{r7, pc}
 800a518:	08010564 	.word	0x08010564
 800a51c:	08010658 	.word	0x08010658
 800a520:	080105b8 	.word	0x080105b8
 800a524:	08010670 	.word	0x08010670

0800a528 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 800a528:	b580      	push	{r7, lr}
 800a52a:	b088      	sub	sp, #32
 800a52c:	af02      	add	r7, sp, #8
 800a52e:	60f8      	str	r0, [r7, #12]
 800a530:	60b9      	str	r1, [r7, #8]
 800a532:	607a      	str	r2, [r7, #4]
 800a534:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d109      	bne.n	800a550 <udp_sendto+0x28>
 800a53c:	4b23      	ldr	r3, [pc, #140]	; (800a5cc <udp_sendto+0xa4>)
 800a53e:	f44f 7206 	mov.w	r2, #536	; 0x218
 800a542:	4923      	ldr	r1, [pc, #140]	; (800a5d0 <udp_sendto+0xa8>)
 800a544:	4823      	ldr	r0, [pc, #140]	; (800a5d4 <udp_sendto+0xac>)
 800a546:	f002 fe8f 	bl	800d268 <iprintf>
 800a54a:	f06f 030f 	mvn.w	r3, #15
 800a54e:	e038      	b.n	800a5c2 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 800a550:	68bb      	ldr	r3, [r7, #8]
 800a552:	2b00      	cmp	r3, #0
 800a554:	d109      	bne.n	800a56a <udp_sendto+0x42>
 800a556:	4b1d      	ldr	r3, [pc, #116]	; (800a5cc <udp_sendto+0xa4>)
 800a558:	f240 2219 	movw	r2, #537	; 0x219
 800a55c:	491e      	ldr	r1, [pc, #120]	; (800a5d8 <udp_sendto+0xb0>)
 800a55e:	481d      	ldr	r0, [pc, #116]	; (800a5d4 <udp_sendto+0xac>)
 800a560:	f002 fe82 	bl	800d268 <iprintf>
 800a564:	f06f 030f 	mvn.w	r3, #15
 800a568:	e02b      	b.n	800a5c2 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d109      	bne.n	800a584 <udp_sendto+0x5c>
 800a570:	4b16      	ldr	r3, [pc, #88]	; (800a5cc <udp_sendto+0xa4>)
 800a572:	f240 221a 	movw	r2, #538	; 0x21a
 800a576:	4919      	ldr	r1, [pc, #100]	; (800a5dc <udp_sendto+0xb4>)
 800a578:	4816      	ldr	r0, [pc, #88]	; (800a5d4 <udp_sendto+0xac>)
 800a57a:	f002 fe75 	bl	800d268 <iprintf>
 800a57e:	f06f 030f 	mvn.w	r3, #15
 800a582:	e01e      	b.n	800a5c2 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	7a1b      	ldrb	r3, [r3, #8]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d006      	beq.n	800a59a <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	7a1b      	ldrb	r3, [r3, #8]
 800a590:	4618      	mov	r0, r3
 800a592:	f7fa f905 	bl	80047a0 <netif_get_by_index>
 800a596:	6178      	str	r0, [r7, #20]
 800a598:	e003      	b.n	800a5a2 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 800a59a:	6878      	ldr	r0, [r7, #4]
 800a59c:	f001 fc1c 	bl	800bdd8 <ip4_route>
 800a5a0:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 800a5a2:	697b      	ldr	r3, [r7, #20]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d102      	bne.n	800a5ae <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 800a5a8:	f06f 0303 	mvn.w	r3, #3
 800a5ac:	e009      	b.n	800a5c2 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 800a5ae:	887a      	ldrh	r2, [r7, #2]
 800a5b0:	697b      	ldr	r3, [r7, #20]
 800a5b2:	9300      	str	r3, [sp, #0]
 800a5b4:	4613      	mov	r3, r2
 800a5b6:	687a      	ldr	r2, [r7, #4]
 800a5b8:	68b9      	ldr	r1, [r7, #8]
 800a5ba:	68f8      	ldr	r0, [r7, #12]
 800a5bc:	f000 f810 	bl	800a5e0 <udp_sendto_if>
 800a5c0:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	3718      	adds	r7, #24
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	bd80      	pop	{r7, pc}
 800a5ca:	bf00      	nop
 800a5cc:	08010564 	.word	0x08010564
 800a5d0:	08010688 	.word	0x08010688
 800a5d4:	080105b8 	.word	0x080105b8
 800a5d8:	080106a0 	.word	0x080106a0
 800a5dc:	080106bc 	.word	0x080106bc

0800a5e0 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b088      	sub	sp, #32
 800a5e4:	af02      	add	r7, sp, #8
 800a5e6:	60f8      	str	r0, [r7, #12]
 800a5e8:	60b9      	str	r1, [r7, #8]
 800a5ea:	607a      	str	r2, [r7, #4]
 800a5ec:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d109      	bne.n	800a608 <udp_sendto_if+0x28>
 800a5f4:	4b2e      	ldr	r3, [pc, #184]	; (800a6b0 <udp_sendto_if+0xd0>)
 800a5f6:	f44f 7220 	mov.w	r2, #640	; 0x280
 800a5fa:	492e      	ldr	r1, [pc, #184]	; (800a6b4 <udp_sendto_if+0xd4>)
 800a5fc:	482e      	ldr	r0, [pc, #184]	; (800a6b8 <udp_sendto_if+0xd8>)
 800a5fe:	f002 fe33 	bl	800d268 <iprintf>
 800a602:	f06f 030f 	mvn.w	r3, #15
 800a606:	e04f      	b.n	800a6a8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800a608:	68bb      	ldr	r3, [r7, #8]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d109      	bne.n	800a622 <udp_sendto_if+0x42>
 800a60e:	4b28      	ldr	r3, [pc, #160]	; (800a6b0 <udp_sendto_if+0xd0>)
 800a610:	f240 2281 	movw	r2, #641	; 0x281
 800a614:	4929      	ldr	r1, [pc, #164]	; (800a6bc <udp_sendto_if+0xdc>)
 800a616:	4828      	ldr	r0, [pc, #160]	; (800a6b8 <udp_sendto_if+0xd8>)
 800a618:	f002 fe26 	bl	800d268 <iprintf>
 800a61c:	f06f 030f 	mvn.w	r3, #15
 800a620:	e042      	b.n	800a6a8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	2b00      	cmp	r3, #0
 800a626:	d109      	bne.n	800a63c <udp_sendto_if+0x5c>
 800a628:	4b21      	ldr	r3, [pc, #132]	; (800a6b0 <udp_sendto_if+0xd0>)
 800a62a:	f240 2282 	movw	r2, #642	; 0x282
 800a62e:	4924      	ldr	r1, [pc, #144]	; (800a6c0 <udp_sendto_if+0xe0>)
 800a630:	4821      	ldr	r0, [pc, #132]	; (800a6b8 <udp_sendto_if+0xd8>)
 800a632:	f002 fe19 	bl	800d268 <iprintf>
 800a636:	f06f 030f 	mvn.w	r3, #15
 800a63a:	e035      	b.n	800a6a8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800a63c:	6a3b      	ldr	r3, [r7, #32]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d109      	bne.n	800a656 <udp_sendto_if+0x76>
 800a642:	4b1b      	ldr	r3, [pc, #108]	; (800a6b0 <udp_sendto_if+0xd0>)
 800a644:	f240 2283 	movw	r2, #643	; 0x283
 800a648:	491e      	ldr	r1, [pc, #120]	; (800a6c4 <udp_sendto_if+0xe4>)
 800a64a:	481b      	ldr	r0, [pc, #108]	; (800a6b8 <udp_sendto_if+0xd8>)
 800a64c:	f002 fe0c 	bl	800d268 <iprintf>
 800a650:	f06f 030f 	mvn.w	r3, #15
 800a654:	e028      	b.n	800a6a8 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d009      	beq.n	800a670 <udp_sendto_if+0x90>
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	2b00      	cmp	r3, #0
 800a662:	d005      	beq.n	800a670 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800a66c:	2be0      	cmp	r3, #224	; 0xe0
 800a66e:	d103      	bne.n	800a678 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 800a670:	6a3b      	ldr	r3, [r7, #32]
 800a672:	3304      	adds	r3, #4
 800a674:	617b      	str	r3, [r7, #20]
 800a676:	e00b      	b.n	800a690 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	681a      	ldr	r2, [r3, #0]
 800a67c:	6a3b      	ldr	r3, [r7, #32]
 800a67e:	3304      	adds	r3, #4
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	429a      	cmp	r2, r3
 800a684:	d002      	beq.n	800a68c <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 800a686:	f06f 0303 	mvn.w	r3, #3
 800a68a:	e00d      	b.n	800a6a8 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800a690:	887a      	ldrh	r2, [r7, #2]
 800a692:	697b      	ldr	r3, [r7, #20]
 800a694:	9301      	str	r3, [sp, #4]
 800a696:	6a3b      	ldr	r3, [r7, #32]
 800a698:	9300      	str	r3, [sp, #0]
 800a69a:	4613      	mov	r3, r2
 800a69c:	687a      	ldr	r2, [r7, #4]
 800a69e:	68b9      	ldr	r1, [r7, #8]
 800a6a0:	68f8      	ldr	r0, [r7, #12]
 800a6a2:	f000 f811 	bl	800a6c8 <udp_sendto_if_src>
 800a6a6:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	3718      	adds	r7, #24
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	bd80      	pop	{r7, pc}
 800a6b0:	08010564 	.word	0x08010564
 800a6b4:	080106d8 	.word	0x080106d8
 800a6b8:	080105b8 	.word	0x080105b8
 800a6bc:	080106f4 	.word	0x080106f4
 800a6c0:	08010710 	.word	0x08010710
 800a6c4:	08010730 	.word	0x08010730

0800a6c8 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b08c      	sub	sp, #48	; 0x30
 800a6cc:	af04      	add	r7, sp, #16
 800a6ce:	60f8      	str	r0, [r7, #12]
 800a6d0:	60b9      	str	r1, [r7, #8]
 800a6d2:	607a      	str	r2, [r7, #4]
 800a6d4:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d109      	bne.n	800a6f0 <udp_sendto_if_src+0x28>
 800a6dc:	4b65      	ldr	r3, [pc, #404]	; (800a874 <udp_sendto_if_src+0x1ac>)
 800a6de:	f240 22d1 	movw	r2, #721	; 0x2d1
 800a6e2:	4965      	ldr	r1, [pc, #404]	; (800a878 <udp_sendto_if_src+0x1b0>)
 800a6e4:	4865      	ldr	r0, [pc, #404]	; (800a87c <udp_sendto_if_src+0x1b4>)
 800a6e6:	f002 fdbf 	bl	800d268 <iprintf>
 800a6ea:	f06f 030f 	mvn.w	r3, #15
 800a6ee:	e0bc      	b.n	800a86a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800a6f0:	68bb      	ldr	r3, [r7, #8]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d109      	bne.n	800a70a <udp_sendto_if_src+0x42>
 800a6f6:	4b5f      	ldr	r3, [pc, #380]	; (800a874 <udp_sendto_if_src+0x1ac>)
 800a6f8:	f240 22d2 	movw	r2, #722	; 0x2d2
 800a6fc:	4960      	ldr	r1, [pc, #384]	; (800a880 <udp_sendto_if_src+0x1b8>)
 800a6fe:	485f      	ldr	r0, [pc, #380]	; (800a87c <udp_sendto_if_src+0x1b4>)
 800a700:	f002 fdb2 	bl	800d268 <iprintf>
 800a704:	f06f 030f 	mvn.w	r3, #15
 800a708:	e0af      	b.n	800a86a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d109      	bne.n	800a724 <udp_sendto_if_src+0x5c>
 800a710:	4b58      	ldr	r3, [pc, #352]	; (800a874 <udp_sendto_if_src+0x1ac>)
 800a712:	f240 22d3 	movw	r2, #723	; 0x2d3
 800a716:	495b      	ldr	r1, [pc, #364]	; (800a884 <udp_sendto_if_src+0x1bc>)
 800a718:	4858      	ldr	r0, [pc, #352]	; (800a87c <udp_sendto_if_src+0x1b4>)
 800a71a:	f002 fda5 	bl	800d268 <iprintf>
 800a71e:	f06f 030f 	mvn.w	r3, #15
 800a722:	e0a2      	b.n	800a86a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800a724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a726:	2b00      	cmp	r3, #0
 800a728:	d109      	bne.n	800a73e <udp_sendto_if_src+0x76>
 800a72a:	4b52      	ldr	r3, [pc, #328]	; (800a874 <udp_sendto_if_src+0x1ac>)
 800a72c:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800a730:	4955      	ldr	r1, [pc, #340]	; (800a888 <udp_sendto_if_src+0x1c0>)
 800a732:	4852      	ldr	r0, [pc, #328]	; (800a87c <udp_sendto_if_src+0x1b4>)
 800a734:	f002 fd98 	bl	800d268 <iprintf>
 800a738:	f06f 030f 	mvn.w	r3, #15
 800a73c:	e095      	b.n	800a86a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800a73e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a740:	2b00      	cmp	r3, #0
 800a742:	d109      	bne.n	800a758 <udp_sendto_if_src+0x90>
 800a744:	4b4b      	ldr	r3, [pc, #300]	; (800a874 <udp_sendto_if_src+0x1ac>)
 800a746:	f240 22d5 	movw	r2, #725	; 0x2d5
 800a74a:	4950      	ldr	r1, [pc, #320]	; (800a88c <udp_sendto_if_src+0x1c4>)
 800a74c:	484b      	ldr	r0, [pc, #300]	; (800a87c <udp_sendto_if_src+0x1b4>)
 800a74e:	f002 fd8b 	bl	800d268 <iprintf>
 800a752:	f06f 030f 	mvn.w	r3, #15
 800a756:	e088      	b.n	800a86a <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	8a5b      	ldrh	r3, [r3, #18]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d10f      	bne.n	800a780 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800a760:	68f9      	ldr	r1, [r7, #12]
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	8a5b      	ldrh	r3, [r3, #18]
 800a766:	461a      	mov	r2, r3
 800a768:	68f8      	ldr	r0, [r7, #12]
 800a76a:	f000 f893 	bl	800a894 <udp_bind>
 800a76e:	4603      	mov	r3, r0
 800a770:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800a772:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800a776:	2b00      	cmp	r3, #0
 800a778:	d002      	beq.n	800a780 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800a77a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800a77e:	e074      	b.n	800a86a <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800a780:	68bb      	ldr	r3, [r7, #8]
 800a782:	891b      	ldrh	r3, [r3, #8]
 800a784:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 800a788:	4293      	cmp	r3, r2
 800a78a:	d902      	bls.n	800a792 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 800a78c:	f04f 33ff 	mov.w	r3, #4294967295
 800a790:	e06b      	b.n	800a86a <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 800a792:	2108      	movs	r1, #8
 800a794:	68b8      	ldr	r0, [r7, #8]
 800a796:	f7fa fa9f 	bl	8004cd8 <pbuf_add_header>
 800a79a:	4603      	mov	r3, r0
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d015      	beq.n	800a7cc <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800a7a0:	f44f 7220 	mov.w	r2, #640	; 0x280
 800a7a4:	2108      	movs	r1, #8
 800a7a6:	2022      	movs	r0, #34	; 0x22
 800a7a8:	f7fa f84a 	bl	8004840 <pbuf_alloc>
 800a7ac:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800a7ae:	69fb      	ldr	r3, [r7, #28]
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d102      	bne.n	800a7ba <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800a7b4:	f04f 33ff 	mov.w	r3, #4294967295
 800a7b8:	e057      	b.n	800a86a <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 800a7ba:	68bb      	ldr	r3, [r7, #8]
 800a7bc:	891b      	ldrh	r3, [r3, #8]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d006      	beq.n	800a7d0 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800a7c2:	68b9      	ldr	r1, [r7, #8]
 800a7c4:	69f8      	ldr	r0, [r7, #28]
 800a7c6:	f7fa fc35 	bl	8005034 <pbuf_chain>
 800a7ca:	e001      	b.n	800a7d0 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800a7cc:	68bb      	ldr	r3, [r7, #8]
 800a7ce:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800a7d0:	69fb      	ldr	r3, [r7, #28]
 800a7d2:	895b      	ldrh	r3, [r3, #10]
 800a7d4:	2b07      	cmp	r3, #7
 800a7d6:	d806      	bhi.n	800a7e6 <udp_sendto_if_src+0x11e>
 800a7d8:	4b26      	ldr	r3, [pc, #152]	; (800a874 <udp_sendto_if_src+0x1ac>)
 800a7da:	f240 320d 	movw	r2, #781	; 0x30d
 800a7de:	492c      	ldr	r1, [pc, #176]	; (800a890 <udp_sendto_if_src+0x1c8>)
 800a7e0:	4826      	ldr	r0, [pc, #152]	; (800a87c <udp_sendto_if_src+0x1b4>)
 800a7e2:	f002 fd41 	bl	800d268 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800a7e6:	69fb      	ldr	r3, [r7, #28]
 800a7e8:	685b      	ldr	r3, [r3, #4]
 800a7ea:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	8a5b      	ldrh	r3, [r3, #18]
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	f7f9 f881 	bl	80038f8 <lwip_htons>
 800a7f6:	4603      	mov	r3, r0
 800a7f8:	461a      	mov	r2, r3
 800a7fa:	697b      	ldr	r3, [r7, #20]
 800a7fc:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800a7fe:	887b      	ldrh	r3, [r7, #2]
 800a800:	4618      	mov	r0, r3
 800a802:	f7f9 f879 	bl	80038f8 <lwip_htons>
 800a806:	4603      	mov	r3, r0
 800a808:	461a      	mov	r2, r3
 800a80a:	697b      	ldr	r3, [r7, #20]
 800a80c:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800a80e:	697b      	ldr	r3, [r7, #20]
 800a810:	2200      	movs	r2, #0
 800a812:	719a      	strb	r2, [r3, #6]
 800a814:	2200      	movs	r2, #0
 800a816:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800a818:	69fb      	ldr	r3, [r7, #28]
 800a81a:	891b      	ldrh	r3, [r3, #8]
 800a81c:	4618      	mov	r0, r3
 800a81e:	f7f9 f86b 	bl	80038f8 <lwip_htons>
 800a822:	4603      	mov	r3, r0
 800a824:	461a      	mov	r2, r3
 800a826:	697b      	ldr	r3, [r7, #20]
 800a828:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800a82a:	2311      	movs	r3, #17
 800a82c:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	7adb      	ldrb	r3, [r3, #11]
 800a832:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	7a9b      	ldrb	r3, [r3, #10]
 800a838:	7cb9      	ldrb	r1, [r7, #18]
 800a83a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a83c:	9202      	str	r2, [sp, #8]
 800a83e:	7cfa      	ldrb	r2, [r7, #19]
 800a840:	9201      	str	r2, [sp, #4]
 800a842:	9300      	str	r3, [sp, #0]
 800a844:	460b      	mov	r3, r1
 800a846:	687a      	ldr	r2, [r7, #4]
 800a848:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a84a:	69f8      	ldr	r0, [r7, #28]
 800a84c:	f001 fcac 	bl	800c1a8 <ip4_output_if_src>
 800a850:	4603      	mov	r3, r0
 800a852:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800a854:	69fa      	ldr	r2, [r7, #28]
 800a856:	68bb      	ldr	r3, [r7, #8]
 800a858:	429a      	cmp	r2, r3
 800a85a:	d004      	beq.n	800a866 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 800a85c:	69f8      	ldr	r0, [r7, #28]
 800a85e:	f7fa fad1 	bl	8004e04 <pbuf_free>
    q = NULL;
 800a862:	2300      	movs	r3, #0
 800a864:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800a866:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800a86a:	4618      	mov	r0, r3
 800a86c:	3720      	adds	r7, #32
 800a86e:	46bd      	mov	sp, r7
 800a870:	bd80      	pop	{r7, pc}
 800a872:	bf00      	nop
 800a874:	08010564 	.word	0x08010564
 800a878:	08010750 	.word	0x08010750
 800a87c:	080105b8 	.word	0x080105b8
 800a880:	08010770 	.word	0x08010770
 800a884:	08010790 	.word	0x08010790
 800a888:	080107b4 	.word	0x080107b4
 800a88c:	080107d8 	.word	0x080107d8
 800a890:	080107fc 	.word	0x080107fc

0800a894 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800a894:	b580      	push	{r7, lr}
 800a896:	b086      	sub	sp, #24
 800a898:	af00      	add	r7, sp, #0
 800a89a:	60f8      	str	r0, [r7, #12]
 800a89c:	60b9      	str	r1, [r7, #8]
 800a89e:	4613      	mov	r3, r2
 800a8a0:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800a8a2:	68bb      	ldr	r3, [r7, #8]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d101      	bne.n	800a8ac <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800a8a8:	4b39      	ldr	r3, [pc, #228]	; (800a990 <udp_bind+0xfc>)
 800a8aa:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d109      	bne.n	800a8c6 <udp_bind+0x32>
 800a8b2:	4b38      	ldr	r3, [pc, #224]	; (800a994 <udp_bind+0x100>)
 800a8b4:	f240 32b7 	movw	r2, #951	; 0x3b7
 800a8b8:	4937      	ldr	r1, [pc, #220]	; (800a998 <udp_bind+0x104>)
 800a8ba:	4838      	ldr	r0, [pc, #224]	; (800a99c <udp_bind+0x108>)
 800a8bc:	f002 fcd4 	bl	800d268 <iprintf>
 800a8c0:	f06f 030f 	mvn.w	r3, #15
 800a8c4:	e060      	b.n	800a988 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800a8ca:	4b35      	ldr	r3, [pc, #212]	; (800a9a0 <udp_bind+0x10c>)
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	617b      	str	r3, [r7, #20]
 800a8d0:	e009      	b.n	800a8e6 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800a8d2:	68fa      	ldr	r2, [r7, #12]
 800a8d4:	697b      	ldr	r3, [r7, #20]
 800a8d6:	429a      	cmp	r2, r3
 800a8d8:	d102      	bne.n	800a8e0 <udp_bind+0x4c>
      rebind = 1;
 800a8da:	2301      	movs	r3, #1
 800a8dc:	74fb      	strb	r3, [r7, #19]
      break;
 800a8de:	e005      	b.n	800a8ec <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800a8e0:	697b      	ldr	r3, [r7, #20]
 800a8e2:	68db      	ldr	r3, [r3, #12]
 800a8e4:	617b      	str	r3, [r7, #20]
 800a8e6:	697b      	ldr	r3, [r7, #20]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d1f2      	bne.n	800a8d2 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800a8ec:	88fb      	ldrh	r3, [r7, #6]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d109      	bne.n	800a906 <udp_bind+0x72>
    port = udp_new_port();
 800a8f2:	f7ff fc35 	bl	800a160 <udp_new_port>
 800a8f6:	4603      	mov	r3, r0
 800a8f8:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800a8fa:	88fb      	ldrh	r3, [r7, #6]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d12c      	bne.n	800a95a <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800a900:	f06f 0307 	mvn.w	r3, #7
 800a904:	e040      	b.n	800a988 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800a906:	4b26      	ldr	r3, [pc, #152]	; (800a9a0 <udp_bind+0x10c>)
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	617b      	str	r3, [r7, #20]
 800a90c:	e022      	b.n	800a954 <udp_bind+0xc0>
      if (pcb != ipcb) {
 800a90e:	68fa      	ldr	r2, [r7, #12]
 800a910:	697b      	ldr	r3, [r7, #20]
 800a912:	429a      	cmp	r2, r3
 800a914:	d01b      	beq.n	800a94e <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800a916:	697b      	ldr	r3, [r7, #20]
 800a918:	8a5b      	ldrh	r3, [r3, #18]
 800a91a:	88fa      	ldrh	r2, [r7, #6]
 800a91c:	429a      	cmp	r2, r3
 800a91e:	d116      	bne.n	800a94e <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800a920:	697b      	ldr	r3, [r7, #20]
 800a922:	681a      	ldr	r2, [r3, #0]
 800a924:	68bb      	ldr	r3, [r7, #8]
 800a926:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800a928:	429a      	cmp	r2, r3
 800a92a:	d00d      	beq.n	800a948 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800a92c:	68bb      	ldr	r3, [r7, #8]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d00a      	beq.n	800a948 <udp_bind+0xb4>
 800a932:	68bb      	ldr	r3, [r7, #8]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	2b00      	cmp	r3, #0
 800a938:	d006      	beq.n	800a948 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800a93a:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d003      	beq.n	800a948 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800a940:	697b      	ldr	r3, [r7, #20]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d102      	bne.n	800a94e <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800a948:	f06f 0307 	mvn.w	r3, #7
 800a94c:	e01c      	b.n	800a988 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800a94e:	697b      	ldr	r3, [r7, #20]
 800a950:	68db      	ldr	r3, [r3, #12]
 800a952:	617b      	str	r3, [r7, #20]
 800a954:	697b      	ldr	r3, [r7, #20]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d1d9      	bne.n	800a90e <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800a95a:	68bb      	ldr	r3, [r7, #8]
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d002      	beq.n	800a966 <udp_bind+0xd2>
 800a960:	68bb      	ldr	r3, [r7, #8]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	e000      	b.n	800a968 <udp_bind+0xd4>
 800a966:	2300      	movs	r3, #0
 800a968:	68fa      	ldr	r2, [r7, #12]
 800a96a:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	88fa      	ldrh	r2, [r7, #6]
 800a970:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800a972:	7cfb      	ldrb	r3, [r7, #19]
 800a974:	2b00      	cmp	r3, #0
 800a976:	d106      	bne.n	800a986 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800a978:	4b09      	ldr	r3, [pc, #36]	; (800a9a0 <udp_bind+0x10c>)
 800a97a:	681a      	ldr	r2, [r3, #0]
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800a980:	4a07      	ldr	r2, [pc, #28]	; (800a9a0 <udp_bind+0x10c>)
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800a986:	2300      	movs	r3, #0
}
 800a988:	4618      	mov	r0, r3
 800a98a:	3718      	adds	r7, #24
 800a98c:	46bd      	mov	sp, r7
 800a98e:	bd80      	pop	{r7, pc}
 800a990:	0801106c 	.word	0x0801106c
 800a994:	08010564 	.word	0x08010564
 800a998:	0801082c 	.word	0x0801082c
 800a99c:	080105b8 	.word	0x080105b8
 800a9a0:	2000688c 	.word	0x2000688c

0800a9a4 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800a9a4:	b580      	push	{r7, lr}
 800a9a6:	b086      	sub	sp, #24
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	60f8      	str	r0, [r7, #12]
 800a9ac:	60b9      	str	r1, [r7, #8]
 800a9ae:	4613      	mov	r3, r2
 800a9b0:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d109      	bne.n	800a9cc <udp_connect+0x28>
 800a9b8:	4b2c      	ldr	r3, [pc, #176]	; (800aa6c <udp_connect+0xc8>)
 800a9ba:	f240 4235 	movw	r2, #1077	; 0x435
 800a9be:	492c      	ldr	r1, [pc, #176]	; (800aa70 <udp_connect+0xcc>)
 800a9c0:	482c      	ldr	r0, [pc, #176]	; (800aa74 <udp_connect+0xd0>)
 800a9c2:	f002 fc51 	bl	800d268 <iprintf>
 800a9c6:	f06f 030f 	mvn.w	r3, #15
 800a9ca:	e04b      	b.n	800aa64 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800a9cc:	68bb      	ldr	r3, [r7, #8]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d109      	bne.n	800a9e6 <udp_connect+0x42>
 800a9d2:	4b26      	ldr	r3, [pc, #152]	; (800aa6c <udp_connect+0xc8>)
 800a9d4:	f240 4236 	movw	r2, #1078	; 0x436
 800a9d8:	4927      	ldr	r1, [pc, #156]	; (800aa78 <udp_connect+0xd4>)
 800a9da:	4826      	ldr	r0, [pc, #152]	; (800aa74 <udp_connect+0xd0>)
 800a9dc:	f002 fc44 	bl	800d268 <iprintf>
 800a9e0:	f06f 030f 	mvn.w	r3, #15
 800a9e4:	e03e      	b.n	800aa64 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	8a5b      	ldrh	r3, [r3, #18]
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d10f      	bne.n	800aa0e <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800a9ee:	68f9      	ldr	r1, [r7, #12]
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	8a5b      	ldrh	r3, [r3, #18]
 800a9f4:	461a      	mov	r2, r3
 800a9f6:	68f8      	ldr	r0, [r7, #12]
 800a9f8:	f7ff ff4c 	bl	800a894 <udp_bind>
 800a9fc:	4603      	mov	r3, r0
 800a9fe:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800aa00:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d002      	beq.n	800aa0e <udp_connect+0x6a>
      return err;
 800aa08:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800aa0c:	e02a      	b.n	800aa64 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800aa0e:	68bb      	ldr	r3, [r7, #8]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d002      	beq.n	800aa1a <udp_connect+0x76>
 800aa14:	68bb      	ldr	r3, [r7, #8]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	e000      	b.n	800aa1c <udp_connect+0x78>
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	68fa      	ldr	r2, [r7, #12]
 800aa1e:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	88fa      	ldrh	r2, [r7, #6]
 800aa24:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	7c1b      	ldrb	r3, [r3, #16]
 800aa2a:	f043 0304 	orr.w	r3, r3, #4
 800aa2e:	b2da      	uxtb	r2, r3
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800aa34:	4b11      	ldr	r3, [pc, #68]	; (800aa7c <udp_connect+0xd8>)
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	617b      	str	r3, [r7, #20]
 800aa3a:	e008      	b.n	800aa4e <udp_connect+0xaa>
    if (pcb == ipcb) {
 800aa3c:	68fa      	ldr	r2, [r7, #12]
 800aa3e:	697b      	ldr	r3, [r7, #20]
 800aa40:	429a      	cmp	r2, r3
 800aa42:	d101      	bne.n	800aa48 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 800aa44:	2300      	movs	r3, #0
 800aa46:	e00d      	b.n	800aa64 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800aa48:	697b      	ldr	r3, [r7, #20]
 800aa4a:	68db      	ldr	r3, [r3, #12]
 800aa4c:	617b      	str	r3, [r7, #20]
 800aa4e:	697b      	ldr	r3, [r7, #20]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d1f3      	bne.n	800aa3c <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800aa54:	4b09      	ldr	r3, [pc, #36]	; (800aa7c <udp_connect+0xd8>)
 800aa56:	681a      	ldr	r2, [r3, #0]
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 800aa5c:	4a07      	ldr	r2, [pc, #28]	; (800aa7c <udp_connect+0xd8>)
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 800aa62:	2300      	movs	r3, #0
}
 800aa64:	4618      	mov	r0, r3
 800aa66:	3718      	adds	r7, #24
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	bd80      	pop	{r7, pc}
 800aa6c:	08010564 	.word	0x08010564
 800aa70:	08010844 	.word	0x08010844
 800aa74:	080105b8 	.word	0x080105b8
 800aa78:	08010860 	.word	0x08010860
 800aa7c:	2000688c 	.word	0x2000688c

0800aa80 <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
 800aa80:	b580      	push	{r7, lr}
 800aa82:	b082      	sub	sp, #8
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_disconnect: invalid pcb", pcb != NULL, return);
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d107      	bne.n	800aa9e <udp_disconnect+0x1e>
 800aa8e:	4b0d      	ldr	r3, [pc, #52]	; (800aac4 <udp_disconnect+0x44>)
 800aa90:	f240 426a 	movw	r2, #1130	; 0x46a
 800aa94:	490c      	ldr	r1, [pc, #48]	; (800aac8 <udp_disconnect+0x48>)
 800aa96:	480d      	ldr	r0, [pc, #52]	; (800aacc <udp_disconnect+0x4c>)
 800aa98:	f002 fbe6 	bl	800d268 <iprintf>
 800aa9c:	e00f      	b.n	800aabe <udp_disconnect+0x3e>
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	2200      	movs	r2, #0
 800aaa2:	605a      	str	r2, [r3, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	2200      	movs	r2, #0
 800aaa8:	829a      	strh	r2, [r3, #20]
  pcb->netif_idx = NETIF_NO_INDEX;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	2200      	movs	r2, #0
 800aaae:	721a      	strb	r2, [r3, #8]
  /* mark PCB as unconnected */
  udp_clear_flags(pcb, UDP_FLAGS_CONNECTED);
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	7c1b      	ldrb	r3, [r3, #16]
 800aab4:	f023 0304 	bic.w	r3, r3, #4
 800aab8:	b2da      	uxtb	r2, r3
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	741a      	strb	r2, [r3, #16]
}
 800aabe:	3708      	adds	r7, #8
 800aac0:	46bd      	mov	sp, r7
 800aac2:	bd80      	pop	{r7, pc}
 800aac4:	08010564 	.word	0x08010564
 800aac8:	0801087c 	.word	0x0801087c
 800aacc:	080105b8 	.word	0x080105b8

0800aad0 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800aad0:	b580      	push	{r7, lr}
 800aad2:	b084      	sub	sp, #16
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	60f8      	str	r0, [r7, #12]
 800aad8:	60b9      	str	r1, [r7, #8]
 800aada:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d107      	bne.n	800aaf2 <udp_recv+0x22>
 800aae2:	4b08      	ldr	r3, [pc, #32]	; (800ab04 <udp_recv+0x34>)
 800aae4:	f240 428a 	movw	r2, #1162	; 0x48a
 800aae8:	4907      	ldr	r1, [pc, #28]	; (800ab08 <udp_recv+0x38>)
 800aaea:	4808      	ldr	r0, [pc, #32]	; (800ab0c <udp_recv+0x3c>)
 800aaec:	f002 fbbc 	bl	800d268 <iprintf>
 800aaf0:	e005      	b.n	800aafe <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	68ba      	ldr	r2, [r7, #8]
 800aaf6:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	687a      	ldr	r2, [r7, #4]
 800aafc:	61da      	str	r2, [r3, #28]
}
 800aafe:	3710      	adds	r7, #16
 800ab00:	46bd      	mov	sp, r7
 800ab02:	bd80      	pop	{r7, pc}
 800ab04:	08010564 	.word	0x08010564
 800ab08:	08010898 	.word	0x08010898
 800ab0c:	080105b8 	.word	0x080105b8

0800ab10 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800ab10:	b580      	push	{r7, lr}
 800ab12:	b084      	sub	sp, #16
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d107      	bne.n	800ab2e <udp_remove+0x1e>
 800ab1e:	4b19      	ldr	r3, [pc, #100]	; (800ab84 <udp_remove+0x74>)
 800ab20:	f240 42a1 	movw	r2, #1185	; 0x4a1
 800ab24:	4918      	ldr	r1, [pc, #96]	; (800ab88 <udp_remove+0x78>)
 800ab26:	4819      	ldr	r0, [pc, #100]	; (800ab8c <udp_remove+0x7c>)
 800ab28:	f002 fb9e 	bl	800d268 <iprintf>
 800ab2c:	e026      	b.n	800ab7c <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800ab2e:	4b18      	ldr	r3, [pc, #96]	; (800ab90 <udp_remove+0x80>)
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	687a      	ldr	r2, [r7, #4]
 800ab34:	429a      	cmp	r2, r3
 800ab36:	d105      	bne.n	800ab44 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800ab38:	4b15      	ldr	r3, [pc, #84]	; (800ab90 <udp_remove+0x80>)
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	68db      	ldr	r3, [r3, #12]
 800ab3e:	4a14      	ldr	r2, [pc, #80]	; (800ab90 <udp_remove+0x80>)
 800ab40:	6013      	str	r3, [r2, #0]
 800ab42:	e017      	b.n	800ab74 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800ab44:	4b12      	ldr	r3, [pc, #72]	; (800ab90 <udp_remove+0x80>)
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	60fb      	str	r3, [r7, #12]
 800ab4a:	e010      	b.n	800ab6e <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	68db      	ldr	r3, [r3, #12]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d009      	beq.n	800ab68 <udp_remove+0x58>
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	68db      	ldr	r3, [r3, #12]
 800ab58:	687a      	ldr	r2, [r7, #4]
 800ab5a:	429a      	cmp	r2, r3
 800ab5c:	d104      	bne.n	800ab68 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	68da      	ldr	r2, [r3, #12]
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	60da      	str	r2, [r3, #12]
        break;
 800ab66:	e005      	b.n	800ab74 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	68db      	ldr	r3, [r3, #12]
 800ab6c:	60fb      	str	r3, [r7, #12]
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d1eb      	bne.n	800ab4c <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800ab74:	6879      	ldr	r1, [r7, #4]
 800ab76:	2000      	movs	r0, #0
 800ab78:	f7f9 fb60 	bl	800423c <memp_free>
}
 800ab7c:	3710      	adds	r7, #16
 800ab7e:	46bd      	mov	sp, r7
 800ab80:	bd80      	pop	{r7, pc}
 800ab82:	bf00      	nop
 800ab84:	08010564 	.word	0x08010564
 800ab88:	080108b0 	.word	0x080108b0
 800ab8c:	080105b8 	.word	0x080105b8
 800ab90:	2000688c 	.word	0x2000688c

0800ab94 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800ab94:	b580      	push	{r7, lr}
 800ab96:	b082      	sub	sp, #8
 800ab98:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800ab9a:	2000      	movs	r0, #0
 800ab9c:	f7f9 fb02 	bl	80041a4 <memp_malloc>
 800aba0:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d007      	beq.n	800abb8 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800aba8:	2220      	movs	r2, #32
 800abaa:	2100      	movs	r1, #0
 800abac:	6878      	ldr	r0, [r7, #4]
 800abae:	f002 fb53 	bl	800d258 <memset>
    pcb->ttl = UDP_TTL;
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	22ff      	movs	r2, #255	; 0xff
 800abb6:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800abb8:	687b      	ldr	r3, [r7, #4]
}
 800abba:	4618      	mov	r0, r3
 800abbc:	3708      	adds	r7, #8
 800abbe:	46bd      	mov	sp, r7
 800abc0:	bd80      	pop	{r7, pc}
	...

0800abc4 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800abc4:	b480      	push	{r7}
 800abc6:	b085      	sub	sp, #20
 800abc8:	af00      	add	r7, sp, #0
 800abca:	6078      	str	r0, [r7, #4]
 800abcc:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d01e      	beq.n	800ac12 <udp_netif_ip_addr_changed+0x4e>
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d01a      	beq.n	800ac12 <udp_netif_ip_addr_changed+0x4e>
 800abdc:	683b      	ldr	r3, [r7, #0]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d017      	beq.n	800ac12 <udp_netif_ip_addr_changed+0x4e>
 800abe2:	683b      	ldr	r3, [r7, #0]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d013      	beq.n	800ac12 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800abea:	4b0d      	ldr	r3, [pc, #52]	; (800ac20 <udp_netif_ip_addr_changed+0x5c>)
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	60fb      	str	r3, [r7, #12]
 800abf0:	e00c      	b.n	800ac0c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	681a      	ldr	r2, [r3, #0]
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	429a      	cmp	r2, r3
 800abfc:	d103      	bne.n	800ac06 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800abfe:	683b      	ldr	r3, [r7, #0]
 800ac00:	681a      	ldr	r2, [r3, #0]
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	68db      	ldr	r3, [r3, #12]
 800ac0a:	60fb      	str	r3, [r7, #12]
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d1ef      	bne.n	800abf2 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800ac12:	bf00      	nop
 800ac14:	3714      	adds	r7, #20
 800ac16:	46bd      	mov	sp, r7
 800ac18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1c:	4770      	bx	lr
 800ac1e:	bf00      	nop
 800ac20:	2000688c 	.word	0x2000688c

0800ac24 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800ac24:	b580      	push	{r7, lr}
 800ac26:	b082      	sub	sp, #8
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800ac2c:	4915      	ldr	r1, [pc, #84]	; (800ac84 <etharp_free_entry+0x60>)
 800ac2e:	687a      	ldr	r2, [r7, #4]
 800ac30:	4613      	mov	r3, r2
 800ac32:	005b      	lsls	r3, r3, #1
 800ac34:	4413      	add	r3, r2
 800ac36:	00db      	lsls	r3, r3, #3
 800ac38:	440b      	add	r3, r1
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d013      	beq.n	800ac68 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800ac40:	4910      	ldr	r1, [pc, #64]	; (800ac84 <etharp_free_entry+0x60>)
 800ac42:	687a      	ldr	r2, [r7, #4]
 800ac44:	4613      	mov	r3, r2
 800ac46:	005b      	lsls	r3, r3, #1
 800ac48:	4413      	add	r3, r2
 800ac4a:	00db      	lsls	r3, r3, #3
 800ac4c:	440b      	add	r3, r1
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	4618      	mov	r0, r3
 800ac52:	f7fa f8d7 	bl	8004e04 <pbuf_free>
    arp_table[i].q = NULL;
 800ac56:	490b      	ldr	r1, [pc, #44]	; (800ac84 <etharp_free_entry+0x60>)
 800ac58:	687a      	ldr	r2, [r7, #4]
 800ac5a:	4613      	mov	r3, r2
 800ac5c:	005b      	lsls	r3, r3, #1
 800ac5e:	4413      	add	r3, r2
 800ac60:	00db      	lsls	r3, r3, #3
 800ac62:	440b      	add	r3, r1
 800ac64:	2200      	movs	r2, #0
 800ac66:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800ac68:	4906      	ldr	r1, [pc, #24]	; (800ac84 <etharp_free_entry+0x60>)
 800ac6a:	687a      	ldr	r2, [r7, #4]
 800ac6c:	4613      	mov	r3, r2
 800ac6e:	005b      	lsls	r3, r3, #1
 800ac70:	4413      	add	r3, r2
 800ac72:	00db      	lsls	r3, r3, #3
 800ac74:	440b      	add	r3, r1
 800ac76:	3314      	adds	r3, #20
 800ac78:	2200      	movs	r2, #0
 800ac7a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800ac7c:	bf00      	nop
 800ac7e:	3708      	adds	r7, #8
 800ac80:	46bd      	mov	sp, r7
 800ac82:	bd80      	pop	{r7, pc}
 800ac84:	2000010c 	.word	0x2000010c

0800ac88 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b082      	sub	sp, #8
 800ac8c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ac8e:	2300      	movs	r3, #0
 800ac90:	607b      	str	r3, [r7, #4]
 800ac92:	e096      	b.n	800adc2 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800ac94:	494f      	ldr	r1, [pc, #316]	; (800add4 <etharp_tmr+0x14c>)
 800ac96:	687a      	ldr	r2, [r7, #4]
 800ac98:	4613      	mov	r3, r2
 800ac9a:	005b      	lsls	r3, r3, #1
 800ac9c:	4413      	add	r3, r2
 800ac9e:	00db      	lsls	r3, r3, #3
 800aca0:	440b      	add	r3, r1
 800aca2:	3314      	adds	r3, #20
 800aca4:	781b      	ldrb	r3, [r3, #0]
 800aca6:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800aca8:	78fb      	ldrb	r3, [r7, #3]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	f000 8086 	beq.w	800adbc <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800acb0:	4948      	ldr	r1, [pc, #288]	; (800add4 <etharp_tmr+0x14c>)
 800acb2:	687a      	ldr	r2, [r7, #4]
 800acb4:	4613      	mov	r3, r2
 800acb6:	005b      	lsls	r3, r3, #1
 800acb8:	4413      	add	r3, r2
 800acba:	00db      	lsls	r3, r3, #3
 800acbc:	440b      	add	r3, r1
 800acbe:	3312      	adds	r3, #18
 800acc0:	881b      	ldrh	r3, [r3, #0]
 800acc2:	3301      	adds	r3, #1
 800acc4:	b298      	uxth	r0, r3
 800acc6:	4943      	ldr	r1, [pc, #268]	; (800add4 <etharp_tmr+0x14c>)
 800acc8:	687a      	ldr	r2, [r7, #4]
 800acca:	4613      	mov	r3, r2
 800accc:	005b      	lsls	r3, r3, #1
 800acce:	4413      	add	r3, r2
 800acd0:	00db      	lsls	r3, r3, #3
 800acd2:	440b      	add	r3, r1
 800acd4:	3312      	adds	r3, #18
 800acd6:	4602      	mov	r2, r0
 800acd8:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800acda:	493e      	ldr	r1, [pc, #248]	; (800add4 <etharp_tmr+0x14c>)
 800acdc:	687a      	ldr	r2, [r7, #4]
 800acde:	4613      	mov	r3, r2
 800ace0:	005b      	lsls	r3, r3, #1
 800ace2:	4413      	add	r3, r2
 800ace4:	00db      	lsls	r3, r3, #3
 800ace6:	440b      	add	r3, r1
 800ace8:	3312      	adds	r3, #18
 800acea:	881b      	ldrh	r3, [r3, #0]
 800acec:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800acf0:	d215      	bcs.n	800ad1e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800acf2:	4938      	ldr	r1, [pc, #224]	; (800add4 <etharp_tmr+0x14c>)
 800acf4:	687a      	ldr	r2, [r7, #4]
 800acf6:	4613      	mov	r3, r2
 800acf8:	005b      	lsls	r3, r3, #1
 800acfa:	4413      	add	r3, r2
 800acfc:	00db      	lsls	r3, r3, #3
 800acfe:	440b      	add	r3, r1
 800ad00:	3314      	adds	r3, #20
 800ad02:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800ad04:	2b01      	cmp	r3, #1
 800ad06:	d10e      	bne.n	800ad26 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800ad08:	4932      	ldr	r1, [pc, #200]	; (800add4 <etharp_tmr+0x14c>)
 800ad0a:	687a      	ldr	r2, [r7, #4]
 800ad0c:	4613      	mov	r3, r2
 800ad0e:	005b      	lsls	r3, r3, #1
 800ad10:	4413      	add	r3, r2
 800ad12:	00db      	lsls	r3, r3, #3
 800ad14:	440b      	add	r3, r1
 800ad16:	3312      	adds	r3, #18
 800ad18:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800ad1a:	2b04      	cmp	r3, #4
 800ad1c:	d903      	bls.n	800ad26 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800ad1e:	6878      	ldr	r0, [r7, #4]
 800ad20:	f7ff ff80 	bl	800ac24 <etharp_free_entry>
 800ad24:	e04a      	b.n	800adbc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800ad26:	492b      	ldr	r1, [pc, #172]	; (800add4 <etharp_tmr+0x14c>)
 800ad28:	687a      	ldr	r2, [r7, #4]
 800ad2a:	4613      	mov	r3, r2
 800ad2c:	005b      	lsls	r3, r3, #1
 800ad2e:	4413      	add	r3, r2
 800ad30:	00db      	lsls	r3, r3, #3
 800ad32:	440b      	add	r3, r1
 800ad34:	3314      	adds	r3, #20
 800ad36:	781b      	ldrb	r3, [r3, #0]
 800ad38:	2b03      	cmp	r3, #3
 800ad3a:	d10a      	bne.n	800ad52 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800ad3c:	4925      	ldr	r1, [pc, #148]	; (800add4 <etharp_tmr+0x14c>)
 800ad3e:	687a      	ldr	r2, [r7, #4]
 800ad40:	4613      	mov	r3, r2
 800ad42:	005b      	lsls	r3, r3, #1
 800ad44:	4413      	add	r3, r2
 800ad46:	00db      	lsls	r3, r3, #3
 800ad48:	440b      	add	r3, r1
 800ad4a:	3314      	adds	r3, #20
 800ad4c:	2204      	movs	r2, #4
 800ad4e:	701a      	strb	r2, [r3, #0]
 800ad50:	e034      	b.n	800adbc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800ad52:	4920      	ldr	r1, [pc, #128]	; (800add4 <etharp_tmr+0x14c>)
 800ad54:	687a      	ldr	r2, [r7, #4]
 800ad56:	4613      	mov	r3, r2
 800ad58:	005b      	lsls	r3, r3, #1
 800ad5a:	4413      	add	r3, r2
 800ad5c:	00db      	lsls	r3, r3, #3
 800ad5e:	440b      	add	r3, r1
 800ad60:	3314      	adds	r3, #20
 800ad62:	781b      	ldrb	r3, [r3, #0]
 800ad64:	2b04      	cmp	r3, #4
 800ad66:	d10a      	bne.n	800ad7e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800ad68:	491a      	ldr	r1, [pc, #104]	; (800add4 <etharp_tmr+0x14c>)
 800ad6a:	687a      	ldr	r2, [r7, #4]
 800ad6c:	4613      	mov	r3, r2
 800ad6e:	005b      	lsls	r3, r3, #1
 800ad70:	4413      	add	r3, r2
 800ad72:	00db      	lsls	r3, r3, #3
 800ad74:	440b      	add	r3, r1
 800ad76:	3314      	adds	r3, #20
 800ad78:	2202      	movs	r2, #2
 800ad7a:	701a      	strb	r2, [r3, #0]
 800ad7c:	e01e      	b.n	800adbc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800ad7e:	4915      	ldr	r1, [pc, #84]	; (800add4 <etharp_tmr+0x14c>)
 800ad80:	687a      	ldr	r2, [r7, #4]
 800ad82:	4613      	mov	r3, r2
 800ad84:	005b      	lsls	r3, r3, #1
 800ad86:	4413      	add	r3, r2
 800ad88:	00db      	lsls	r3, r3, #3
 800ad8a:	440b      	add	r3, r1
 800ad8c:	3314      	adds	r3, #20
 800ad8e:	781b      	ldrb	r3, [r3, #0]
 800ad90:	2b01      	cmp	r3, #1
 800ad92:	d113      	bne.n	800adbc <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800ad94:	490f      	ldr	r1, [pc, #60]	; (800add4 <etharp_tmr+0x14c>)
 800ad96:	687a      	ldr	r2, [r7, #4]
 800ad98:	4613      	mov	r3, r2
 800ad9a:	005b      	lsls	r3, r3, #1
 800ad9c:	4413      	add	r3, r2
 800ad9e:	00db      	lsls	r3, r3, #3
 800ada0:	440b      	add	r3, r1
 800ada2:	3308      	adds	r3, #8
 800ada4:	6818      	ldr	r0, [r3, #0]
 800ada6:	687a      	ldr	r2, [r7, #4]
 800ada8:	4613      	mov	r3, r2
 800adaa:	005b      	lsls	r3, r3, #1
 800adac:	4413      	add	r3, r2
 800adae:	00db      	lsls	r3, r3, #3
 800adb0:	4a08      	ldr	r2, [pc, #32]	; (800add4 <etharp_tmr+0x14c>)
 800adb2:	4413      	add	r3, r2
 800adb4:	3304      	adds	r3, #4
 800adb6:	4619      	mov	r1, r3
 800adb8:	f000 fe6e 	bl	800ba98 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	3301      	adds	r3, #1
 800adc0:	607b      	str	r3, [r7, #4]
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	2b09      	cmp	r3, #9
 800adc6:	f77f af65 	ble.w	800ac94 <etharp_tmr+0xc>
      }
    }
  }
}
 800adca:	bf00      	nop
 800adcc:	bf00      	nop
 800adce:	3708      	adds	r7, #8
 800add0:	46bd      	mov	sp, r7
 800add2:	bd80      	pop	{r7, pc}
 800add4:	2000010c 	.word	0x2000010c

0800add8 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800add8:	b580      	push	{r7, lr}
 800adda:	b08a      	sub	sp, #40	; 0x28
 800addc:	af00      	add	r7, sp, #0
 800adde:	60f8      	str	r0, [r7, #12]
 800ade0:	460b      	mov	r3, r1
 800ade2:	607a      	str	r2, [r7, #4]
 800ade4:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800ade6:	230a      	movs	r3, #10
 800ade8:	84fb      	strh	r3, [r7, #38]	; 0x26
 800adea:	230a      	movs	r3, #10
 800adec:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800adee:	230a      	movs	r3, #10
 800adf0:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800adf2:	2300      	movs	r3, #0
 800adf4:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800adf6:	230a      	movs	r3, #10
 800adf8:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800adfa:	2300      	movs	r3, #0
 800adfc:	83bb      	strh	r3, [r7, #28]
 800adfe:	2300      	movs	r3, #0
 800ae00:	837b      	strh	r3, [r7, #26]
 800ae02:	2300      	movs	r3, #0
 800ae04:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ae06:	2300      	movs	r3, #0
 800ae08:	843b      	strh	r3, [r7, #32]
 800ae0a:	e0ae      	b.n	800af6a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800ae0c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ae10:	49a6      	ldr	r1, [pc, #664]	; (800b0ac <etharp_find_entry+0x2d4>)
 800ae12:	4613      	mov	r3, r2
 800ae14:	005b      	lsls	r3, r3, #1
 800ae16:	4413      	add	r3, r2
 800ae18:	00db      	lsls	r3, r3, #3
 800ae1a:	440b      	add	r3, r1
 800ae1c:	3314      	adds	r3, #20
 800ae1e:	781b      	ldrb	r3, [r3, #0]
 800ae20:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800ae22:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800ae26:	2b0a      	cmp	r3, #10
 800ae28:	d105      	bne.n	800ae36 <etharp_find_entry+0x5e>
 800ae2a:	7dfb      	ldrb	r3, [r7, #23]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d102      	bne.n	800ae36 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800ae30:	8c3b      	ldrh	r3, [r7, #32]
 800ae32:	847b      	strh	r3, [r7, #34]	; 0x22
 800ae34:	e095      	b.n	800af62 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800ae36:	7dfb      	ldrb	r3, [r7, #23]
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	f000 8092 	beq.w	800af62 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800ae3e:	7dfb      	ldrb	r3, [r7, #23]
 800ae40:	2b01      	cmp	r3, #1
 800ae42:	d009      	beq.n	800ae58 <etharp_find_entry+0x80>
 800ae44:	7dfb      	ldrb	r3, [r7, #23]
 800ae46:	2b01      	cmp	r3, #1
 800ae48:	d806      	bhi.n	800ae58 <etharp_find_entry+0x80>
 800ae4a:	4b99      	ldr	r3, [pc, #612]	; (800b0b0 <etharp_find_entry+0x2d8>)
 800ae4c:	f240 1223 	movw	r2, #291	; 0x123
 800ae50:	4998      	ldr	r1, [pc, #608]	; (800b0b4 <etharp_find_entry+0x2dc>)
 800ae52:	4899      	ldr	r0, [pc, #612]	; (800b0b8 <etharp_find_entry+0x2e0>)
 800ae54:	f002 fa08 	bl	800d268 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d020      	beq.n	800aea0 <etharp_find_entry+0xc8>
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	6819      	ldr	r1, [r3, #0]
 800ae62:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ae66:	4891      	ldr	r0, [pc, #580]	; (800b0ac <etharp_find_entry+0x2d4>)
 800ae68:	4613      	mov	r3, r2
 800ae6a:	005b      	lsls	r3, r3, #1
 800ae6c:	4413      	add	r3, r2
 800ae6e:	00db      	lsls	r3, r3, #3
 800ae70:	4403      	add	r3, r0
 800ae72:	3304      	adds	r3, #4
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	4299      	cmp	r1, r3
 800ae78:	d112      	bne.n	800aea0 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d00c      	beq.n	800ae9a <etharp_find_entry+0xc2>
 800ae80:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ae84:	4989      	ldr	r1, [pc, #548]	; (800b0ac <etharp_find_entry+0x2d4>)
 800ae86:	4613      	mov	r3, r2
 800ae88:	005b      	lsls	r3, r3, #1
 800ae8a:	4413      	add	r3, r2
 800ae8c:	00db      	lsls	r3, r3, #3
 800ae8e:	440b      	add	r3, r1
 800ae90:	3308      	adds	r3, #8
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	687a      	ldr	r2, [r7, #4]
 800ae96:	429a      	cmp	r2, r3
 800ae98:	d102      	bne.n	800aea0 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800ae9a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ae9e:	e100      	b.n	800b0a2 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800aea0:	7dfb      	ldrb	r3, [r7, #23]
 800aea2:	2b01      	cmp	r3, #1
 800aea4:	d140      	bne.n	800af28 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800aea6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800aeaa:	4980      	ldr	r1, [pc, #512]	; (800b0ac <etharp_find_entry+0x2d4>)
 800aeac:	4613      	mov	r3, r2
 800aeae:	005b      	lsls	r3, r3, #1
 800aeb0:	4413      	add	r3, r2
 800aeb2:	00db      	lsls	r3, r3, #3
 800aeb4:	440b      	add	r3, r1
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d01a      	beq.n	800aef2 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800aebc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800aec0:	497a      	ldr	r1, [pc, #488]	; (800b0ac <etharp_find_entry+0x2d4>)
 800aec2:	4613      	mov	r3, r2
 800aec4:	005b      	lsls	r3, r3, #1
 800aec6:	4413      	add	r3, r2
 800aec8:	00db      	lsls	r3, r3, #3
 800aeca:	440b      	add	r3, r1
 800aecc:	3312      	adds	r3, #18
 800aece:	881b      	ldrh	r3, [r3, #0]
 800aed0:	8bba      	ldrh	r2, [r7, #28]
 800aed2:	429a      	cmp	r2, r3
 800aed4:	d845      	bhi.n	800af62 <etharp_find_entry+0x18a>
            old_queue = i;
 800aed6:	8c3b      	ldrh	r3, [r7, #32]
 800aed8:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800aeda:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800aede:	4973      	ldr	r1, [pc, #460]	; (800b0ac <etharp_find_entry+0x2d4>)
 800aee0:	4613      	mov	r3, r2
 800aee2:	005b      	lsls	r3, r3, #1
 800aee4:	4413      	add	r3, r2
 800aee6:	00db      	lsls	r3, r3, #3
 800aee8:	440b      	add	r3, r1
 800aeea:	3312      	adds	r3, #18
 800aeec:	881b      	ldrh	r3, [r3, #0]
 800aeee:	83bb      	strh	r3, [r7, #28]
 800aef0:	e037      	b.n	800af62 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800aef2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800aef6:	496d      	ldr	r1, [pc, #436]	; (800b0ac <etharp_find_entry+0x2d4>)
 800aef8:	4613      	mov	r3, r2
 800aefa:	005b      	lsls	r3, r3, #1
 800aefc:	4413      	add	r3, r2
 800aefe:	00db      	lsls	r3, r3, #3
 800af00:	440b      	add	r3, r1
 800af02:	3312      	adds	r3, #18
 800af04:	881b      	ldrh	r3, [r3, #0]
 800af06:	8b7a      	ldrh	r2, [r7, #26]
 800af08:	429a      	cmp	r2, r3
 800af0a:	d82a      	bhi.n	800af62 <etharp_find_entry+0x18a>
            old_pending = i;
 800af0c:	8c3b      	ldrh	r3, [r7, #32]
 800af0e:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800af10:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800af14:	4965      	ldr	r1, [pc, #404]	; (800b0ac <etharp_find_entry+0x2d4>)
 800af16:	4613      	mov	r3, r2
 800af18:	005b      	lsls	r3, r3, #1
 800af1a:	4413      	add	r3, r2
 800af1c:	00db      	lsls	r3, r3, #3
 800af1e:	440b      	add	r3, r1
 800af20:	3312      	adds	r3, #18
 800af22:	881b      	ldrh	r3, [r3, #0]
 800af24:	837b      	strh	r3, [r7, #26]
 800af26:	e01c      	b.n	800af62 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800af28:	7dfb      	ldrb	r3, [r7, #23]
 800af2a:	2b01      	cmp	r3, #1
 800af2c:	d919      	bls.n	800af62 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800af2e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800af32:	495e      	ldr	r1, [pc, #376]	; (800b0ac <etharp_find_entry+0x2d4>)
 800af34:	4613      	mov	r3, r2
 800af36:	005b      	lsls	r3, r3, #1
 800af38:	4413      	add	r3, r2
 800af3a:	00db      	lsls	r3, r3, #3
 800af3c:	440b      	add	r3, r1
 800af3e:	3312      	adds	r3, #18
 800af40:	881b      	ldrh	r3, [r3, #0]
 800af42:	8b3a      	ldrh	r2, [r7, #24]
 800af44:	429a      	cmp	r2, r3
 800af46:	d80c      	bhi.n	800af62 <etharp_find_entry+0x18a>
            old_stable = i;
 800af48:	8c3b      	ldrh	r3, [r7, #32]
 800af4a:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800af4c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800af50:	4956      	ldr	r1, [pc, #344]	; (800b0ac <etharp_find_entry+0x2d4>)
 800af52:	4613      	mov	r3, r2
 800af54:	005b      	lsls	r3, r3, #1
 800af56:	4413      	add	r3, r2
 800af58:	00db      	lsls	r3, r3, #3
 800af5a:	440b      	add	r3, r1
 800af5c:	3312      	adds	r3, #18
 800af5e:	881b      	ldrh	r3, [r3, #0]
 800af60:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800af62:	8c3b      	ldrh	r3, [r7, #32]
 800af64:	3301      	adds	r3, #1
 800af66:	b29b      	uxth	r3, r3
 800af68:	843b      	strh	r3, [r7, #32]
 800af6a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800af6e:	2b09      	cmp	r3, #9
 800af70:	f77f af4c 	ble.w	800ae0c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800af74:	7afb      	ldrb	r3, [r7, #11]
 800af76:	f003 0302 	and.w	r3, r3, #2
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d108      	bne.n	800af90 <etharp_find_entry+0x1b8>
 800af7e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800af82:	2b0a      	cmp	r3, #10
 800af84:	d107      	bne.n	800af96 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800af86:	7afb      	ldrb	r3, [r7, #11]
 800af88:	f003 0301 	and.w	r3, r3, #1
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d102      	bne.n	800af96 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800af90:	f04f 33ff 	mov.w	r3, #4294967295
 800af94:	e085      	b.n	800b0a2 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800af96:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800af9a:	2b09      	cmp	r3, #9
 800af9c:	dc02      	bgt.n	800afa4 <etharp_find_entry+0x1cc>
    i = empty;
 800af9e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800afa0:	843b      	strh	r3, [r7, #32]
 800afa2:	e039      	b.n	800b018 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800afa4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800afa8:	2b09      	cmp	r3, #9
 800afaa:	dc14      	bgt.n	800afd6 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800afac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800afae:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800afb0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800afb4:	493d      	ldr	r1, [pc, #244]	; (800b0ac <etharp_find_entry+0x2d4>)
 800afb6:	4613      	mov	r3, r2
 800afb8:	005b      	lsls	r3, r3, #1
 800afba:	4413      	add	r3, r2
 800afbc:	00db      	lsls	r3, r3, #3
 800afbe:	440b      	add	r3, r1
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d018      	beq.n	800aff8 <etharp_find_entry+0x220>
 800afc6:	4b3a      	ldr	r3, [pc, #232]	; (800b0b0 <etharp_find_entry+0x2d8>)
 800afc8:	f240 126d 	movw	r2, #365	; 0x16d
 800afcc:	493b      	ldr	r1, [pc, #236]	; (800b0bc <etharp_find_entry+0x2e4>)
 800afce:	483a      	ldr	r0, [pc, #232]	; (800b0b8 <etharp_find_entry+0x2e0>)
 800afd0:	f002 f94a 	bl	800d268 <iprintf>
 800afd4:	e010      	b.n	800aff8 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800afd6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800afda:	2b09      	cmp	r3, #9
 800afdc:	dc02      	bgt.n	800afe4 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800afde:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800afe0:	843b      	strh	r3, [r7, #32]
 800afe2:	e009      	b.n	800aff8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800afe4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800afe8:	2b09      	cmp	r3, #9
 800afea:	dc02      	bgt.n	800aff2 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800afec:	8bfb      	ldrh	r3, [r7, #30]
 800afee:	843b      	strh	r3, [r7, #32]
 800aff0:	e002      	b.n	800aff8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800aff2:	f04f 33ff 	mov.w	r3, #4294967295
 800aff6:	e054      	b.n	800b0a2 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800aff8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800affc:	2b09      	cmp	r3, #9
 800affe:	dd06      	ble.n	800b00e <etharp_find_entry+0x236>
 800b000:	4b2b      	ldr	r3, [pc, #172]	; (800b0b0 <etharp_find_entry+0x2d8>)
 800b002:	f240 127f 	movw	r2, #383	; 0x17f
 800b006:	492e      	ldr	r1, [pc, #184]	; (800b0c0 <etharp_find_entry+0x2e8>)
 800b008:	482b      	ldr	r0, [pc, #172]	; (800b0b8 <etharp_find_entry+0x2e0>)
 800b00a:	f002 f92d 	bl	800d268 <iprintf>
    etharp_free_entry(i);
 800b00e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800b012:	4618      	mov	r0, r3
 800b014:	f7ff fe06 	bl	800ac24 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800b018:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800b01c:	2b09      	cmp	r3, #9
 800b01e:	dd06      	ble.n	800b02e <etharp_find_entry+0x256>
 800b020:	4b23      	ldr	r3, [pc, #140]	; (800b0b0 <etharp_find_entry+0x2d8>)
 800b022:	f240 1283 	movw	r2, #387	; 0x183
 800b026:	4926      	ldr	r1, [pc, #152]	; (800b0c0 <etharp_find_entry+0x2e8>)
 800b028:	4823      	ldr	r0, [pc, #140]	; (800b0b8 <etharp_find_entry+0x2e0>)
 800b02a:	f002 f91d 	bl	800d268 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800b02e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b032:	491e      	ldr	r1, [pc, #120]	; (800b0ac <etharp_find_entry+0x2d4>)
 800b034:	4613      	mov	r3, r2
 800b036:	005b      	lsls	r3, r3, #1
 800b038:	4413      	add	r3, r2
 800b03a:	00db      	lsls	r3, r3, #3
 800b03c:	440b      	add	r3, r1
 800b03e:	3314      	adds	r3, #20
 800b040:	781b      	ldrb	r3, [r3, #0]
 800b042:	2b00      	cmp	r3, #0
 800b044:	d006      	beq.n	800b054 <etharp_find_entry+0x27c>
 800b046:	4b1a      	ldr	r3, [pc, #104]	; (800b0b0 <etharp_find_entry+0x2d8>)
 800b048:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800b04c:	491d      	ldr	r1, [pc, #116]	; (800b0c4 <etharp_find_entry+0x2ec>)
 800b04e:	481a      	ldr	r0, [pc, #104]	; (800b0b8 <etharp_find_entry+0x2e0>)
 800b050:	f002 f90a 	bl	800d268 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	2b00      	cmp	r3, #0
 800b058:	d00b      	beq.n	800b072 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800b05a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	6819      	ldr	r1, [r3, #0]
 800b062:	4812      	ldr	r0, [pc, #72]	; (800b0ac <etharp_find_entry+0x2d4>)
 800b064:	4613      	mov	r3, r2
 800b066:	005b      	lsls	r3, r3, #1
 800b068:	4413      	add	r3, r2
 800b06a:	00db      	lsls	r3, r3, #3
 800b06c:	4403      	add	r3, r0
 800b06e:	3304      	adds	r3, #4
 800b070:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800b072:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b076:	490d      	ldr	r1, [pc, #52]	; (800b0ac <etharp_find_entry+0x2d4>)
 800b078:	4613      	mov	r3, r2
 800b07a:	005b      	lsls	r3, r3, #1
 800b07c:	4413      	add	r3, r2
 800b07e:	00db      	lsls	r3, r3, #3
 800b080:	440b      	add	r3, r1
 800b082:	3312      	adds	r3, #18
 800b084:	2200      	movs	r2, #0
 800b086:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800b088:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b08c:	4907      	ldr	r1, [pc, #28]	; (800b0ac <etharp_find_entry+0x2d4>)
 800b08e:	4613      	mov	r3, r2
 800b090:	005b      	lsls	r3, r3, #1
 800b092:	4413      	add	r3, r2
 800b094:	00db      	lsls	r3, r3, #3
 800b096:	440b      	add	r3, r1
 800b098:	3308      	adds	r3, #8
 800b09a:	687a      	ldr	r2, [r7, #4]
 800b09c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800b09e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800b0a2:	4618      	mov	r0, r3
 800b0a4:	3728      	adds	r7, #40	; 0x28
 800b0a6:	46bd      	mov	sp, r7
 800b0a8:	bd80      	pop	{r7, pc}
 800b0aa:	bf00      	nop
 800b0ac:	2000010c 	.word	0x2000010c
 800b0b0:	080108c8 	.word	0x080108c8
 800b0b4:	08010900 	.word	0x08010900
 800b0b8:	08010940 	.word	0x08010940
 800b0bc:	08010968 	.word	0x08010968
 800b0c0:	08010980 	.word	0x08010980
 800b0c4:	08010994 	.word	0x08010994

0800b0c8 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800b0c8:	b580      	push	{r7, lr}
 800b0ca:	b088      	sub	sp, #32
 800b0cc:	af02      	add	r7, sp, #8
 800b0ce:	60f8      	str	r0, [r7, #12]
 800b0d0:	60b9      	str	r1, [r7, #8]
 800b0d2:	607a      	str	r2, [r7, #4]
 800b0d4:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b0dc:	2b06      	cmp	r3, #6
 800b0de:	d006      	beq.n	800b0ee <etharp_update_arp_entry+0x26>
 800b0e0:	4b48      	ldr	r3, [pc, #288]	; (800b204 <etharp_update_arp_entry+0x13c>)
 800b0e2:	f240 12a9 	movw	r2, #425	; 0x1a9
 800b0e6:	4948      	ldr	r1, [pc, #288]	; (800b208 <etharp_update_arp_entry+0x140>)
 800b0e8:	4848      	ldr	r0, [pc, #288]	; (800b20c <etharp_update_arp_entry+0x144>)
 800b0ea:	f002 f8bd 	bl	800d268 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800b0ee:	68bb      	ldr	r3, [r7, #8]
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d012      	beq.n	800b11a <etharp_update_arp_entry+0x52>
 800b0f4:	68bb      	ldr	r3, [r7, #8]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d00e      	beq.n	800b11a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800b0fc:	68bb      	ldr	r3, [r7, #8]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	68f9      	ldr	r1, [r7, #12]
 800b102:	4618      	mov	r0, r3
 800b104:	f001 f8fe 	bl	800c304 <ip4_addr_isbroadcast_u32>
 800b108:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d105      	bne.n	800b11a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800b10e:	68bb      	ldr	r3, [r7, #8]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800b116:	2be0      	cmp	r3, #224	; 0xe0
 800b118:	d102      	bne.n	800b120 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800b11a:	f06f 030f 	mvn.w	r3, #15
 800b11e:	e06c      	b.n	800b1fa <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800b120:	78fb      	ldrb	r3, [r7, #3]
 800b122:	68fa      	ldr	r2, [r7, #12]
 800b124:	4619      	mov	r1, r3
 800b126:	68b8      	ldr	r0, [r7, #8]
 800b128:	f7ff fe56 	bl	800add8 <etharp_find_entry>
 800b12c:	4603      	mov	r3, r0
 800b12e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800b130:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800b134:	2b00      	cmp	r3, #0
 800b136:	da02      	bge.n	800b13e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800b138:	8afb      	ldrh	r3, [r7, #22]
 800b13a:	b25b      	sxtb	r3, r3
 800b13c:	e05d      	b.n	800b1fa <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800b13e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800b142:	4933      	ldr	r1, [pc, #204]	; (800b210 <etharp_update_arp_entry+0x148>)
 800b144:	4613      	mov	r3, r2
 800b146:	005b      	lsls	r3, r3, #1
 800b148:	4413      	add	r3, r2
 800b14a:	00db      	lsls	r3, r3, #3
 800b14c:	440b      	add	r3, r1
 800b14e:	3314      	adds	r3, #20
 800b150:	2202      	movs	r2, #2
 800b152:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800b154:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800b158:	492d      	ldr	r1, [pc, #180]	; (800b210 <etharp_update_arp_entry+0x148>)
 800b15a:	4613      	mov	r3, r2
 800b15c:	005b      	lsls	r3, r3, #1
 800b15e:	4413      	add	r3, r2
 800b160:	00db      	lsls	r3, r3, #3
 800b162:	440b      	add	r3, r1
 800b164:	3308      	adds	r3, #8
 800b166:	68fa      	ldr	r2, [r7, #12]
 800b168:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800b16a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800b16e:	4613      	mov	r3, r2
 800b170:	005b      	lsls	r3, r3, #1
 800b172:	4413      	add	r3, r2
 800b174:	00db      	lsls	r3, r3, #3
 800b176:	3308      	adds	r3, #8
 800b178:	4a25      	ldr	r2, [pc, #148]	; (800b210 <etharp_update_arp_entry+0x148>)
 800b17a:	4413      	add	r3, r2
 800b17c:	3304      	adds	r3, #4
 800b17e:	2206      	movs	r2, #6
 800b180:	6879      	ldr	r1, [r7, #4]
 800b182:	4618      	mov	r0, r3
 800b184:	f002 f840 	bl	800d208 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800b188:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800b18c:	4920      	ldr	r1, [pc, #128]	; (800b210 <etharp_update_arp_entry+0x148>)
 800b18e:	4613      	mov	r3, r2
 800b190:	005b      	lsls	r3, r3, #1
 800b192:	4413      	add	r3, r2
 800b194:	00db      	lsls	r3, r3, #3
 800b196:	440b      	add	r3, r1
 800b198:	3312      	adds	r3, #18
 800b19a:	2200      	movs	r2, #0
 800b19c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800b19e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800b1a2:	491b      	ldr	r1, [pc, #108]	; (800b210 <etharp_update_arp_entry+0x148>)
 800b1a4:	4613      	mov	r3, r2
 800b1a6:	005b      	lsls	r3, r3, #1
 800b1a8:	4413      	add	r3, r2
 800b1aa:	00db      	lsls	r3, r3, #3
 800b1ac:	440b      	add	r3, r1
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d021      	beq.n	800b1f8 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800b1b4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800b1b8:	4915      	ldr	r1, [pc, #84]	; (800b210 <etharp_update_arp_entry+0x148>)
 800b1ba:	4613      	mov	r3, r2
 800b1bc:	005b      	lsls	r3, r3, #1
 800b1be:	4413      	add	r3, r2
 800b1c0:	00db      	lsls	r3, r3, #3
 800b1c2:	440b      	add	r3, r1
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800b1c8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800b1cc:	4910      	ldr	r1, [pc, #64]	; (800b210 <etharp_update_arp_entry+0x148>)
 800b1ce:	4613      	mov	r3, r2
 800b1d0:	005b      	lsls	r3, r3, #1
 800b1d2:	4413      	add	r3, r2
 800b1d4:	00db      	lsls	r3, r3, #3
 800b1d6:	440b      	add	r3, r1
 800b1d8:	2200      	movs	r2, #0
 800b1da:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800b1e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b1e6:	9300      	str	r3, [sp, #0]
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	6939      	ldr	r1, [r7, #16]
 800b1ec:	68f8      	ldr	r0, [r7, #12]
 800b1ee:	f001 ff91 	bl	800d114 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800b1f2:	6938      	ldr	r0, [r7, #16]
 800b1f4:	f7f9 fe06 	bl	8004e04 <pbuf_free>
  }
  return ERR_OK;
 800b1f8:	2300      	movs	r3, #0
}
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	3718      	adds	r7, #24
 800b1fe:	46bd      	mov	sp, r7
 800b200:	bd80      	pop	{r7, pc}
 800b202:	bf00      	nop
 800b204:	080108c8 	.word	0x080108c8
 800b208:	080109c0 	.word	0x080109c0
 800b20c:	08010940 	.word	0x08010940
 800b210:	2000010c 	.word	0x2000010c

0800b214 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800b214:	b580      	push	{r7, lr}
 800b216:	b084      	sub	sp, #16
 800b218:	af00      	add	r7, sp, #0
 800b21a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b21c:	2300      	movs	r3, #0
 800b21e:	60fb      	str	r3, [r7, #12]
 800b220:	e01e      	b.n	800b260 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800b222:	4913      	ldr	r1, [pc, #76]	; (800b270 <etharp_cleanup_netif+0x5c>)
 800b224:	68fa      	ldr	r2, [r7, #12]
 800b226:	4613      	mov	r3, r2
 800b228:	005b      	lsls	r3, r3, #1
 800b22a:	4413      	add	r3, r2
 800b22c:	00db      	lsls	r3, r3, #3
 800b22e:	440b      	add	r3, r1
 800b230:	3314      	adds	r3, #20
 800b232:	781b      	ldrb	r3, [r3, #0]
 800b234:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800b236:	7afb      	ldrb	r3, [r7, #11]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d00e      	beq.n	800b25a <etharp_cleanup_netif+0x46>
 800b23c:	490c      	ldr	r1, [pc, #48]	; (800b270 <etharp_cleanup_netif+0x5c>)
 800b23e:	68fa      	ldr	r2, [r7, #12]
 800b240:	4613      	mov	r3, r2
 800b242:	005b      	lsls	r3, r3, #1
 800b244:	4413      	add	r3, r2
 800b246:	00db      	lsls	r3, r3, #3
 800b248:	440b      	add	r3, r1
 800b24a:	3308      	adds	r3, #8
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	687a      	ldr	r2, [r7, #4]
 800b250:	429a      	cmp	r2, r3
 800b252:	d102      	bne.n	800b25a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800b254:	68f8      	ldr	r0, [r7, #12]
 800b256:	f7ff fce5 	bl	800ac24 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	3301      	adds	r3, #1
 800b25e:	60fb      	str	r3, [r7, #12]
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	2b09      	cmp	r3, #9
 800b264:	dddd      	ble.n	800b222 <etharp_cleanup_netif+0xe>
    }
  }
}
 800b266:	bf00      	nop
 800b268:	bf00      	nop
 800b26a:	3710      	adds	r7, #16
 800b26c:	46bd      	mov	sp, r7
 800b26e:	bd80      	pop	{r7, pc}
 800b270:	2000010c 	.word	0x2000010c

0800b274 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800b274:	b5b0      	push	{r4, r5, r7, lr}
 800b276:	b08a      	sub	sp, #40	; 0x28
 800b278:	af04      	add	r7, sp, #16
 800b27a:	6078      	str	r0, [r7, #4]
 800b27c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800b27e:	683b      	ldr	r3, [r7, #0]
 800b280:	2b00      	cmp	r3, #0
 800b282:	d107      	bne.n	800b294 <etharp_input+0x20>
 800b284:	4b3d      	ldr	r3, [pc, #244]	; (800b37c <etharp_input+0x108>)
 800b286:	f240 228a 	movw	r2, #650	; 0x28a
 800b28a:	493d      	ldr	r1, [pc, #244]	; (800b380 <etharp_input+0x10c>)
 800b28c:	483d      	ldr	r0, [pc, #244]	; (800b384 <etharp_input+0x110>)
 800b28e:	f001 ffeb 	bl	800d268 <iprintf>
 800b292:	e06f      	b.n	800b374 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	685b      	ldr	r3, [r3, #4]
 800b298:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800b29a:	693b      	ldr	r3, [r7, #16]
 800b29c:	881b      	ldrh	r3, [r3, #0]
 800b29e:	b29b      	uxth	r3, r3
 800b2a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b2a4:	d10c      	bne.n	800b2c0 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800b2a6:	693b      	ldr	r3, [r7, #16]
 800b2a8:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800b2aa:	2b06      	cmp	r3, #6
 800b2ac:	d108      	bne.n	800b2c0 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800b2ae:	693b      	ldr	r3, [r7, #16]
 800b2b0:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800b2b2:	2b04      	cmp	r3, #4
 800b2b4:	d104      	bne.n	800b2c0 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800b2b6:	693b      	ldr	r3, [r7, #16]
 800b2b8:	885b      	ldrh	r3, [r3, #2]
 800b2ba:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800b2bc:	2b08      	cmp	r3, #8
 800b2be:	d003      	beq.n	800b2c8 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800b2c0:	6878      	ldr	r0, [r7, #4]
 800b2c2:	f7f9 fd9f 	bl	8004e04 <pbuf_free>
    return;
 800b2c6:	e055      	b.n	800b374 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800b2c8:	693b      	ldr	r3, [r7, #16]
 800b2ca:	330e      	adds	r3, #14
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800b2d0:	693b      	ldr	r3, [r7, #16]
 800b2d2:	3318      	adds	r3, #24
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800b2d8:	683b      	ldr	r3, [r7, #0]
 800b2da:	3304      	adds	r3, #4
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d102      	bne.n	800b2e8 <etharp_input+0x74>
    for_us = 0;
 800b2e2:	2300      	movs	r3, #0
 800b2e4:	75fb      	strb	r3, [r7, #23]
 800b2e6:	e009      	b.n	800b2fc <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800b2e8:	68ba      	ldr	r2, [r7, #8]
 800b2ea:	683b      	ldr	r3, [r7, #0]
 800b2ec:	3304      	adds	r3, #4
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	429a      	cmp	r2, r3
 800b2f2:	bf0c      	ite	eq
 800b2f4:	2301      	moveq	r3, #1
 800b2f6:	2300      	movne	r3, #0
 800b2f8:	b2db      	uxtb	r3, r3
 800b2fa:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800b2fc:	693b      	ldr	r3, [r7, #16]
 800b2fe:	f103 0208 	add.w	r2, r3, #8
 800b302:	7dfb      	ldrb	r3, [r7, #23]
 800b304:	2b00      	cmp	r3, #0
 800b306:	d001      	beq.n	800b30c <etharp_input+0x98>
 800b308:	2301      	movs	r3, #1
 800b30a:	e000      	b.n	800b30e <etharp_input+0x9a>
 800b30c:	2302      	movs	r3, #2
 800b30e:	f107 010c 	add.w	r1, r7, #12
 800b312:	6838      	ldr	r0, [r7, #0]
 800b314:	f7ff fed8 	bl	800b0c8 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800b318:	693b      	ldr	r3, [r7, #16]
 800b31a:	88db      	ldrh	r3, [r3, #6]
 800b31c:	b29b      	uxth	r3, r3
 800b31e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b322:	d003      	beq.n	800b32c <etharp_input+0xb8>
 800b324:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b328:	d01e      	beq.n	800b368 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800b32a:	e020      	b.n	800b36e <etharp_input+0xfa>
      if (for_us) {
 800b32c:	7dfb      	ldrb	r3, [r7, #23]
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d01c      	beq.n	800b36c <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800b332:	683b      	ldr	r3, [r7, #0]
 800b334:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800b338:	693b      	ldr	r3, [r7, #16]
 800b33a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800b33e:	683b      	ldr	r3, [r7, #0]
 800b340:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800b344:	683b      	ldr	r3, [r7, #0]
 800b346:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800b348:	693a      	ldr	r2, [r7, #16]
 800b34a:	3208      	adds	r2, #8
        etharp_raw(netif,
 800b34c:	2102      	movs	r1, #2
 800b34e:	9103      	str	r1, [sp, #12]
 800b350:	f107 010c 	add.w	r1, r7, #12
 800b354:	9102      	str	r1, [sp, #8]
 800b356:	9201      	str	r2, [sp, #4]
 800b358:	9300      	str	r3, [sp, #0]
 800b35a:	462b      	mov	r3, r5
 800b35c:	4622      	mov	r2, r4
 800b35e:	4601      	mov	r1, r0
 800b360:	6838      	ldr	r0, [r7, #0]
 800b362:	f000 faeb 	bl	800b93c <etharp_raw>
      break;
 800b366:	e001      	b.n	800b36c <etharp_input+0xf8>
      break;
 800b368:	bf00      	nop
 800b36a:	e000      	b.n	800b36e <etharp_input+0xfa>
      break;
 800b36c:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800b36e:	6878      	ldr	r0, [r7, #4]
 800b370:	f7f9 fd48 	bl	8004e04 <pbuf_free>
}
 800b374:	3718      	adds	r7, #24
 800b376:	46bd      	mov	sp, r7
 800b378:	bdb0      	pop	{r4, r5, r7, pc}
 800b37a:	bf00      	nop
 800b37c:	080108c8 	.word	0x080108c8
 800b380:	08010a18 	.word	0x08010a18
 800b384:	08010940 	.word	0x08010940

0800b388 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800b388:	b580      	push	{r7, lr}
 800b38a:	b086      	sub	sp, #24
 800b38c:	af02      	add	r7, sp, #8
 800b38e:	60f8      	str	r0, [r7, #12]
 800b390:	60b9      	str	r1, [r7, #8]
 800b392:	4613      	mov	r3, r2
 800b394:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800b396:	79fa      	ldrb	r2, [r7, #7]
 800b398:	4944      	ldr	r1, [pc, #272]	; (800b4ac <etharp_output_to_arp_index+0x124>)
 800b39a:	4613      	mov	r3, r2
 800b39c:	005b      	lsls	r3, r3, #1
 800b39e:	4413      	add	r3, r2
 800b3a0:	00db      	lsls	r3, r3, #3
 800b3a2:	440b      	add	r3, r1
 800b3a4:	3314      	adds	r3, #20
 800b3a6:	781b      	ldrb	r3, [r3, #0]
 800b3a8:	2b01      	cmp	r3, #1
 800b3aa:	d806      	bhi.n	800b3ba <etharp_output_to_arp_index+0x32>
 800b3ac:	4b40      	ldr	r3, [pc, #256]	; (800b4b0 <etharp_output_to_arp_index+0x128>)
 800b3ae:	f240 22ee 	movw	r2, #750	; 0x2ee
 800b3b2:	4940      	ldr	r1, [pc, #256]	; (800b4b4 <etharp_output_to_arp_index+0x12c>)
 800b3b4:	4840      	ldr	r0, [pc, #256]	; (800b4b8 <etharp_output_to_arp_index+0x130>)
 800b3b6:	f001 ff57 	bl	800d268 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800b3ba:	79fa      	ldrb	r2, [r7, #7]
 800b3bc:	493b      	ldr	r1, [pc, #236]	; (800b4ac <etharp_output_to_arp_index+0x124>)
 800b3be:	4613      	mov	r3, r2
 800b3c0:	005b      	lsls	r3, r3, #1
 800b3c2:	4413      	add	r3, r2
 800b3c4:	00db      	lsls	r3, r3, #3
 800b3c6:	440b      	add	r3, r1
 800b3c8:	3314      	adds	r3, #20
 800b3ca:	781b      	ldrb	r3, [r3, #0]
 800b3cc:	2b02      	cmp	r3, #2
 800b3ce:	d153      	bne.n	800b478 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800b3d0:	79fa      	ldrb	r2, [r7, #7]
 800b3d2:	4936      	ldr	r1, [pc, #216]	; (800b4ac <etharp_output_to_arp_index+0x124>)
 800b3d4:	4613      	mov	r3, r2
 800b3d6:	005b      	lsls	r3, r3, #1
 800b3d8:	4413      	add	r3, r2
 800b3da:	00db      	lsls	r3, r3, #3
 800b3dc:	440b      	add	r3, r1
 800b3de:	3312      	adds	r3, #18
 800b3e0:	881b      	ldrh	r3, [r3, #0]
 800b3e2:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800b3e6:	d919      	bls.n	800b41c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800b3e8:	79fa      	ldrb	r2, [r7, #7]
 800b3ea:	4613      	mov	r3, r2
 800b3ec:	005b      	lsls	r3, r3, #1
 800b3ee:	4413      	add	r3, r2
 800b3f0:	00db      	lsls	r3, r3, #3
 800b3f2:	4a2e      	ldr	r2, [pc, #184]	; (800b4ac <etharp_output_to_arp_index+0x124>)
 800b3f4:	4413      	add	r3, r2
 800b3f6:	3304      	adds	r3, #4
 800b3f8:	4619      	mov	r1, r3
 800b3fa:	68f8      	ldr	r0, [r7, #12]
 800b3fc:	f000 fb4c 	bl	800ba98 <etharp_request>
 800b400:	4603      	mov	r3, r0
 800b402:	2b00      	cmp	r3, #0
 800b404:	d138      	bne.n	800b478 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800b406:	79fa      	ldrb	r2, [r7, #7]
 800b408:	4928      	ldr	r1, [pc, #160]	; (800b4ac <etharp_output_to_arp_index+0x124>)
 800b40a:	4613      	mov	r3, r2
 800b40c:	005b      	lsls	r3, r3, #1
 800b40e:	4413      	add	r3, r2
 800b410:	00db      	lsls	r3, r3, #3
 800b412:	440b      	add	r3, r1
 800b414:	3314      	adds	r3, #20
 800b416:	2203      	movs	r2, #3
 800b418:	701a      	strb	r2, [r3, #0]
 800b41a:	e02d      	b.n	800b478 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800b41c:	79fa      	ldrb	r2, [r7, #7]
 800b41e:	4923      	ldr	r1, [pc, #140]	; (800b4ac <etharp_output_to_arp_index+0x124>)
 800b420:	4613      	mov	r3, r2
 800b422:	005b      	lsls	r3, r3, #1
 800b424:	4413      	add	r3, r2
 800b426:	00db      	lsls	r3, r3, #3
 800b428:	440b      	add	r3, r1
 800b42a:	3312      	adds	r3, #18
 800b42c:	881b      	ldrh	r3, [r3, #0]
 800b42e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800b432:	d321      	bcc.n	800b478 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800b434:	79fa      	ldrb	r2, [r7, #7]
 800b436:	4613      	mov	r3, r2
 800b438:	005b      	lsls	r3, r3, #1
 800b43a:	4413      	add	r3, r2
 800b43c:	00db      	lsls	r3, r3, #3
 800b43e:	4a1b      	ldr	r2, [pc, #108]	; (800b4ac <etharp_output_to_arp_index+0x124>)
 800b440:	4413      	add	r3, r2
 800b442:	1d19      	adds	r1, r3, #4
 800b444:	79fa      	ldrb	r2, [r7, #7]
 800b446:	4613      	mov	r3, r2
 800b448:	005b      	lsls	r3, r3, #1
 800b44a:	4413      	add	r3, r2
 800b44c:	00db      	lsls	r3, r3, #3
 800b44e:	3308      	adds	r3, #8
 800b450:	4a16      	ldr	r2, [pc, #88]	; (800b4ac <etharp_output_to_arp_index+0x124>)
 800b452:	4413      	add	r3, r2
 800b454:	3304      	adds	r3, #4
 800b456:	461a      	mov	r2, r3
 800b458:	68f8      	ldr	r0, [r7, #12]
 800b45a:	f000 fafb 	bl	800ba54 <etharp_request_dst>
 800b45e:	4603      	mov	r3, r0
 800b460:	2b00      	cmp	r3, #0
 800b462:	d109      	bne.n	800b478 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800b464:	79fa      	ldrb	r2, [r7, #7]
 800b466:	4911      	ldr	r1, [pc, #68]	; (800b4ac <etharp_output_to_arp_index+0x124>)
 800b468:	4613      	mov	r3, r2
 800b46a:	005b      	lsls	r3, r3, #1
 800b46c:	4413      	add	r3, r2
 800b46e:	00db      	lsls	r3, r3, #3
 800b470:	440b      	add	r3, r1
 800b472:	3314      	adds	r3, #20
 800b474:	2203      	movs	r2, #3
 800b476:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800b47e:	79fa      	ldrb	r2, [r7, #7]
 800b480:	4613      	mov	r3, r2
 800b482:	005b      	lsls	r3, r3, #1
 800b484:	4413      	add	r3, r2
 800b486:	00db      	lsls	r3, r3, #3
 800b488:	3308      	adds	r3, #8
 800b48a:	4a08      	ldr	r2, [pc, #32]	; (800b4ac <etharp_output_to_arp_index+0x124>)
 800b48c:	4413      	add	r3, r2
 800b48e:	3304      	adds	r3, #4
 800b490:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b494:	9200      	str	r2, [sp, #0]
 800b496:	460a      	mov	r2, r1
 800b498:	68b9      	ldr	r1, [r7, #8]
 800b49a:	68f8      	ldr	r0, [r7, #12]
 800b49c:	f001 fe3a 	bl	800d114 <ethernet_output>
 800b4a0:	4603      	mov	r3, r0
}
 800b4a2:	4618      	mov	r0, r3
 800b4a4:	3710      	adds	r7, #16
 800b4a6:	46bd      	mov	sp, r7
 800b4a8:	bd80      	pop	{r7, pc}
 800b4aa:	bf00      	nop
 800b4ac:	2000010c 	.word	0x2000010c
 800b4b0:	080108c8 	.word	0x080108c8
 800b4b4:	08010a38 	.word	0x08010a38
 800b4b8:	08010940 	.word	0x08010940

0800b4bc <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800b4bc:	b580      	push	{r7, lr}
 800b4be:	b08a      	sub	sp, #40	; 0x28
 800b4c0:	af02      	add	r7, sp, #8
 800b4c2:	60f8      	str	r0, [r7, #12]
 800b4c4:	60b9      	str	r1, [r7, #8]
 800b4c6:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d106      	bne.n	800b4e0 <etharp_output+0x24>
 800b4d2:	4b73      	ldr	r3, [pc, #460]	; (800b6a0 <etharp_output+0x1e4>)
 800b4d4:	f240 321e 	movw	r2, #798	; 0x31e
 800b4d8:	4972      	ldr	r1, [pc, #456]	; (800b6a4 <etharp_output+0x1e8>)
 800b4da:	4873      	ldr	r0, [pc, #460]	; (800b6a8 <etharp_output+0x1ec>)
 800b4dc:	f001 fec4 	bl	800d268 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800b4e0:	68bb      	ldr	r3, [r7, #8]
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d106      	bne.n	800b4f4 <etharp_output+0x38>
 800b4e6:	4b6e      	ldr	r3, [pc, #440]	; (800b6a0 <etharp_output+0x1e4>)
 800b4e8:	f240 321f 	movw	r2, #799	; 0x31f
 800b4ec:	496f      	ldr	r1, [pc, #444]	; (800b6ac <etharp_output+0x1f0>)
 800b4ee:	486e      	ldr	r0, [pc, #440]	; (800b6a8 <etharp_output+0x1ec>)
 800b4f0:	f001 feba 	bl	800d268 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d106      	bne.n	800b508 <etharp_output+0x4c>
 800b4fa:	4b69      	ldr	r3, [pc, #420]	; (800b6a0 <etharp_output+0x1e4>)
 800b4fc:	f44f 7248 	mov.w	r2, #800	; 0x320
 800b500:	496b      	ldr	r1, [pc, #428]	; (800b6b0 <etharp_output+0x1f4>)
 800b502:	4869      	ldr	r0, [pc, #420]	; (800b6a8 <etharp_output+0x1ec>)
 800b504:	f001 feb0 	bl	800d268 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	68f9      	ldr	r1, [r7, #12]
 800b50e:	4618      	mov	r0, r3
 800b510:	f000 fef8 	bl	800c304 <ip4_addr_isbroadcast_u32>
 800b514:	4603      	mov	r3, r0
 800b516:	2b00      	cmp	r3, #0
 800b518:	d002      	beq.n	800b520 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800b51a:	4b66      	ldr	r3, [pc, #408]	; (800b6b4 <etharp_output+0x1f8>)
 800b51c:	61fb      	str	r3, [r7, #28]
 800b51e:	e0af      	b.n	800b680 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b528:	2be0      	cmp	r3, #224	; 0xe0
 800b52a:	d118      	bne.n	800b55e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800b52c:	2301      	movs	r3, #1
 800b52e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800b530:	2300      	movs	r3, #0
 800b532:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800b534:	235e      	movs	r3, #94	; 0x5e
 800b536:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	3301      	adds	r3, #1
 800b53c:	781b      	ldrb	r3, [r3, #0]
 800b53e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b542:	b2db      	uxtb	r3, r3
 800b544:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	3302      	adds	r3, #2
 800b54a:	781b      	ldrb	r3, [r3, #0]
 800b54c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	3303      	adds	r3, #3
 800b552:	781b      	ldrb	r3, [r3, #0]
 800b554:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800b556:	f107 0310 	add.w	r3, r7, #16
 800b55a:	61fb      	str	r3, [r7, #28]
 800b55c:	e090      	b.n	800b680 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	681a      	ldr	r2, [r3, #0]
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	3304      	adds	r3, #4
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	405a      	eors	r2, r3
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	3308      	adds	r3, #8
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	4013      	ands	r3, r2
 800b572:	2b00      	cmp	r3, #0
 800b574:	d012      	beq.n	800b59c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800b57c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800b580:	4293      	cmp	r3, r2
 800b582:	d00b      	beq.n	800b59c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	330c      	adds	r3, #12
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d003      	beq.n	800b596 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	330c      	adds	r3, #12
 800b592:	61bb      	str	r3, [r7, #24]
 800b594:	e002      	b.n	800b59c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800b596:	f06f 0303 	mvn.w	r3, #3
 800b59a:	e07d      	b.n	800b698 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800b59c:	4b46      	ldr	r3, [pc, #280]	; (800b6b8 <etharp_output+0x1fc>)
 800b59e:	781b      	ldrb	r3, [r3, #0]
 800b5a0:	4619      	mov	r1, r3
 800b5a2:	4a46      	ldr	r2, [pc, #280]	; (800b6bc <etharp_output+0x200>)
 800b5a4:	460b      	mov	r3, r1
 800b5a6:	005b      	lsls	r3, r3, #1
 800b5a8:	440b      	add	r3, r1
 800b5aa:	00db      	lsls	r3, r3, #3
 800b5ac:	4413      	add	r3, r2
 800b5ae:	3314      	adds	r3, #20
 800b5b0:	781b      	ldrb	r3, [r3, #0]
 800b5b2:	2b01      	cmp	r3, #1
 800b5b4:	d925      	bls.n	800b602 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800b5b6:	4b40      	ldr	r3, [pc, #256]	; (800b6b8 <etharp_output+0x1fc>)
 800b5b8:	781b      	ldrb	r3, [r3, #0]
 800b5ba:	4619      	mov	r1, r3
 800b5bc:	4a3f      	ldr	r2, [pc, #252]	; (800b6bc <etharp_output+0x200>)
 800b5be:	460b      	mov	r3, r1
 800b5c0:	005b      	lsls	r3, r3, #1
 800b5c2:	440b      	add	r3, r1
 800b5c4:	00db      	lsls	r3, r3, #3
 800b5c6:	4413      	add	r3, r2
 800b5c8:	3308      	adds	r3, #8
 800b5ca:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800b5cc:	68fa      	ldr	r2, [r7, #12]
 800b5ce:	429a      	cmp	r2, r3
 800b5d0:	d117      	bne.n	800b602 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800b5d2:	69bb      	ldr	r3, [r7, #24]
 800b5d4:	681a      	ldr	r2, [r3, #0]
 800b5d6:	4b38      	ldr	r3, [pc, #224]	; (800b6b8 <etharp_output+0x1fc>)
 800b5d8:	781b      	ldrb	r3, [r3, #0]
 800b5da:	4618      	mov	r0, r3
 800b5dc:	4937      	ldr	r1, [pc, #220]	; (800b6bc <etharp_output+0x200>)
 800b5de:	4603      	mov	r3, r0
 800b5e0:	005b      	lsls	r3, r3, #1
 800b5e2:	4403      	add	r3, r0
 800b5e4:	00db      	lsls	r3, r3, #3
 800b5e6:	440b      	add	r3, r1
 800b5e8:	3304      	adds	r3, #4
 800b5ea:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800b5ec:	429a      	cmp	r2, r3
 800b5ee:	d108      	bne.n	800b602 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800b5f0:	4b31      	ldr	r3, [pc, #196]	; (800b6b8 <etharp_output+0x1fc>)
 800b5f2:	781b      	ldrb	r3, [r3, #0]
 800b5f4:	461a      	mov	r2, r3
 800b5f6:	68b9      	ldr	r1, [r7, #8]
 800b5f8:	68f8      	ldr	r0, [r7, #12]
 800b5fa:	f7ff fec5 	bl	800b388 <etharp_output_to_arp_index>
 800b5fe:	4603      	mov	r3, r0
 800b600:	e04a      	b.n	800b698 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800b602:	2300      	movs	r3, #0
 800b604:	75fb      	strb	r3, [r7, #23]
 800b606:	e031      	b.n	800b66c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800b608:	7dfa      	ldrb	r2, [r7, #23]
 800b60a:	492c      	ldr	r1, [pc, #176]	; (800b6bc <etharp_output+0x200>)
 800b60c:	4613      	mov	r3, r2
 800b60e:	005b      	lsls	r3, r3, #1
 800b610:	4413      	add	r3, r2
 800b612:	00db      	lsls	r3, r3, #3
 800b614:	440b      	add	r3, r1
 800b616:	3314      	adds	r3, #20
 800b618:	781b      	ldrb	r3, [r3, #0]
 800b61a:	2b01      	cmp	r3, #1
 800b61c:	d923      	bls.n	800b666 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800b61e:	7dfa      	ldrb	r2, [r7, #23]
 800b620:	4926      	ldr	r1, [pc, #152]	; (800b6bc <etharp_output+0x200>)
 800b622:	4613      	mov	r3, r2
 800b624:	005b      	lsls	r3, r3, #1
 800b626:	4413      	add	r3, r2
 800b628:	00db      	lsls	r3, r3, #3
 800b62a:	440b      	add	r3, r1
 800b62c:	3308      	adds	r3, #8
 800b62e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800b630:	68fa      	ldr	r2, [r7, #12]
 800b632:	429a      	cmp	r2, r3
 800b634:	d117      	bne.n	800b666 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800b636:	69bb      	ldr	r3, [r7, #24]
 800b638:	6819      	ldr	r1, [r3, #0]
 800b63a:	7dfa      	ldrb	r2, [r7, #23]
 800b63c:	481f      	ldr	r0, [pc, #124]	; (800b6bc <etharp_output+0x200>)
 800b63e:	4613      	mov	r3, r2
 800b640:	005b      	lsls	r3, r3, #1
 800b642:	4413      	add	r3, r2
 800b644:	00db      	lsls	r3, r3, #3
 800b646:	4403      	add	r3, r0
 800b648:	3304      	adds	r3, #4
 800b64a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800b64c:	4299      	cmp	r1, r3
 800b64e:	d10a      	bne.n	800b666 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800b650:	4a19      	ldr	r2, [pc, #100]	; (800b6b8 <etharp_output+0x1fc>)
 800b652:	7dfb      	ldrb	r3, [r7, #23]
 800b654:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800b656:	7dfb      	ldrb	r3, [r7, #23]
 800b658:	461a      	mov	r2, r3
 800b65a:	68b9      	ldr	r1, [r7, #8]
 800b65c:	68f8      	ldr	r0, [r7, #12]
 800b65e:	f7ff fe93 	bl	800b388 <etharp_output_to_arp_index>
 800b662:	4603      	mov	r3, r0
 800b664:	e018      	b.n	800b698 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800b666:	7dfb      	ldrb	r3, [r7, #23]
 800b668:	3301      	adds	r3, #1
 800b66a:	75fb      	strb	r3, [r7, #23]
 800b66c:	7dfb      	ldrb	r3, [r7, #23]
 800b66e:	2b09      	cmp	r3, #9
 800b670:	d9ca      	bls.n	800b608 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800b672:	68ba      	ldr	r2, [r7, #8]
 800b674:	69b9      	ldr	r1, [r7, #24]
 800b676:	68f8      	ldr	r0, [r7, #12]
 800b678:	f000 f822 	bl	800b6c0 <etharp_query>
 800b67c:	4603      	mov	r3, r0
 800b67e:	e00b      	b.n	800b698 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800b686:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b68a:	9300      	str	r3, [sp, #0]
 800b68c:	69fb      	ldr	r3, [r7, #28]
 800b68e:	68b9      	ldr	r1, [r7, #8]
 800b690:	68f8      	ldr	r0, [r7, #12]
 800b692:	f001 fd3f 	bl	800d114 <ethernet_output>
 800b696:	4603      	mov	r3, r0
}
 800b698:	4618      	mov	r0, r3
 800b69a:	3720      	adds	r7, #32
 800b69c:	46bd      	mov	sp, r7
 800b69e:	bd80      	pop	{r7, pc}
 800b6a0:	080108c8 	.word	0x080108c8
 800b6a4:	08010a18 	.word	0x08010a18
 800b6a8:	08010940 	.word	0x08010940
 800b6ac:	08010a68 	.word	0x08010a68
 800b6b0:	08010a08 	.word	0x08010a08
 800b6b4:	08011070 	.word	0x08011070
 800b6b8:	200001fc 	.word	0x200001fc
 800b6bc:	2000010c 	.word	0x2000010c

0800b6c0 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800b6c0:	b580      	push	{r7, lr}
 800b6c2:	b08c      	sub	sp, #48	; 0x30
 800b6c4:	af02      	add	r7, sp, #8
 800b6c6:	60f8      	str	r0, [r7, #12]
 800b6c8:	60b9      	str	r1, [r7, #8]
 800b6ca:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	3326      	adds	r3, #38	; 0x26
 800b6d0:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800b6d2:	23ff      	movs	r3, #255	; 0xff
 800b6d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800b6d8:	2300      	movs	r3, #0
 800b6da:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800b6dc:	68bb      	ldr	r3, [r7, #8]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	68f9      	ldr	r1, [r7, #12]
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	f000 fe0e 	bl	800c304 <ip4_addr_isbroadcast_u32>
 800b6e8:	4603      	mov	r3, r0
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d10c      	bne.n	800b708 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800b6ee:	68bb      	ldr	r3, [r7, #8]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800b6f6:	2be0      	cmp	r3, #224	; 0xe0
 800b6f8:	d006      	beq.n	800b708 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800b6fa:	68bb      	ldr	r3, [r7, #8]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d003      	beq.n	800b708 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800b700:	68bb      	ldr	r3, [r7, #8]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	2b00      	cmp	r3, #0
 800b706:	d102      	bne.n	800b70e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800b708:	f06f 030f 	mvn.w	r3, #15
 800b70c:	e101      	b.n	800b912 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800b70e:	68fa      	ldr	r2, [r7, #12]
 800b710:	2101      	movs	r1, #1
 800b712:	68b8      	ldr	r0, [r7, #8]
 800b714:	f7ff fb60 	bl	800add8 <etharp_find_entry>
 800b718:	4603      	mov	r3, r0
 800b71a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800b71c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b720:	2b00      	cmp	r3, #0
 800b722:	da02      	bge.n	800b72a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800b724:	8a7b      	ldrh	r3, [r7, #18]
 800b726:	b25b      	sxtb	r3, r3
 800b728:	e0f3      	b.n	800b912 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800b72a:	8a7b      	ldrh	r3, [r7, #18]
 800b72c:	2b7e      	cmp	r3, #126	; 0x7e
 800b72e:	d906      	bls.n	800b73e <etharp_query+0x7e>
 800b730:	4b7a      	ldr	r3, [pc, #488]	; (800b91c <etharp_query+0x25c>)
 800b732:	f240 32c1 	movw	r2, #961	; 0x3c1
 800b736:	497a      	ldr	r1, [pc, #488]	; (800b920 <etharp_query+0x260>)
 800b738:	487a      	ldr	r0, [pc, #488]	; (800b924 <etharp_query+0x264>)
 800b73a:	f001 fd95 	bl	800d268 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800b73e:	8a7b      	ldrh	r3, [r7, #18]
 800b740:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800b742:	7c7a      	ldrb	r2, [r7, #17]
 800b744:	4978      	ldr	r1, [pc, #480]	; (800b928 <etharp_query+0x268>)
 800b746:	4613      	mov	r3, r2
 800b748:	005b      	lsls	r3, r3, #1
 800b74a:	4413      	add	r3, r2
 800b74c:	00db      	lsls	r3, r3, #3
 800b74e:	440b      	add	r3, r1
 800b750:	3314      	adds	r3, #20
 800b752:	781b      	ldrb	r3, [r3, #0]
 800b754:	2b00      	cmp	r3, #0
 800b756:	d115      	bne.n	800b784 <etharp_query+0xc4>
    is_new_entry = 1;
 800b758:	2301      	movs	r3, #1
 800b75a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800b75c:	7c7a      	ldrb	r2, [r7, #17]
 800b75e:	4972      	ldr	r1, [pc, #456]	; (800b928 <etharp_query+0x268>)
 800b760:	4613      	mov	r3, r2
 800b762:	005b      	lsls	r3, r3, #1
 800b764:	4413      	add	r3, r2
 800b766:	00db      	lsls	r3, r3, #3
 800b768:	440b      	add	r3, r1
 800b76a:	3314      	adds	r3, #20
 800b76c:	2201      	movs	r2, #1
 800b76e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800b770:	7c7a      	ldrb	r2, [r7, #17]
 800b772:	496d      	ldr	r1, [pc, #436]	; (800b928 <etharp_query+0x268>)
 800b774:	4613      	mov	r3, r2
 800b776:	005b      	lsls	r3, r3, #1
 800b778:	4413      	add	r3, r2
 800b77a:	00db      	lsls	r3, r3, #3
 800b77c:	440b      	add	r3, r1
 800b77e:	3308      	adds	r3, #8
 800b780:	68fa      	ldr	r2, [r7, #12]
 800b782:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800b784:	7c7a      	ldrb	r2, [r7, #17]
 800b786:	4968      	ldr	r1, [pc, #416]	; (800b928 <etharp_query+0x268>)
 800b788:	4613      	mov	r3, r2
 800b78a:	005b      	lsls	r3, r3, #1
 800b78c:	4413      	add	r3, r2
 800b78e:	00db      	lsls	r3, r3, #3
 800b790:	440b      	add	r3, r1
 800b792:	3314      	adds	r3, #20
 800b794:	781b      	ldrb	r3, [r3, #0]
 800b796:	2b01      	cmp	r3, #1
 800b798:	d011      	beq.n	800b7be <etharp_query+0xfe>
 800b79a:	7c7a      	ldrb	r2, [r7, #17]
 800b79c:	4962      	ldr	r1, [pc, #392]	; (800b928 <etharp_query+0x268>)
 800b79e:	4613      	mov	r3, r2
 800b7a0:	005b      	lsls	r3, r3, #1
 800b7a2:	4413      	add	r3, r2
 800b7a4:	00db      	lsls	r3, r3, #3
 800b7a6:	440b      	add	r3, r1
 800b7a8:	3314      	adds	r3, #20
 800b7aa:	781b      	ldrb	r3, [r3, #0]
 800b7ac:	2b01      	cmp	r3, #1
 800b7ae:	d806      	bhi.n	800b7be <etharp_query+0xfe>
 800b7b0:	4b5a      	ldr	r3, [pc, #360]	; (800b91c <etharp_query+0x25c>)
 800b7b2:	f240 32cd 	movw	r2, #973	; 0x3cd
 800b7b6:	495d      	ldr	r1, [pc, #372]	; (800b92c <etharp_query+0x26c>)
 800b7b8:	485a      	ldr	r0, [pc, #360]	; (800b924 <etharp_query+0x264>)
 800b7ba:	f001 fd55 	bl	800d268 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800b7be:	6a3b      	ldr	r3, [r7, #32]
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d102      	bne.n	800b7ca <etharp_query+0x10a>
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d10c      	bne.n	800b7e4 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800b7ca:	68b9      	ldr	r1, [r7, #8]
 800b7cc:	68f8      	ldr	r0, [r7, #12]
 800b7ce:	f000 f963 	bl	800ba98 <etharp_request>
 800b7d2:	4603      	mov	r3, r0
 800b7d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d102      	bne.n	800b7e4 <etharp_query+0x124>
      return result;
 800b7de:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b7e2:	e096      	b.n	800b912 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d106      	bne.n	800b7f8 <etharp_query+0x138>
 800b7ea:	4b4c      	ldr	r3, [pc, #304]	; (800b91c <etharp_query+0x25c>)
 800b7ec:	f240 32e1 	movw	r2, #993	; 0x3e1
 800b7f0:	494f      	ldr	r1, [pc, #316]	; (800b930 <etharp_query+0x270>)
 800b7f2:	484c      	ldr	r0, [pc, #304]	; (800b924 <etharp_query+0x264>)
 800b7f4:	f001 fd38 	bl	800d268 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800b7f8:	7c7a      	ldrb	r2, [r7, #17]
 800b7fa:	494b      	ldr	r1, [pc, #300]	; (800b928 <etharp_query+0x268>)
 800b7fc:	4613      	mov	r3, r2
 800b7fe:	005b      	lsls	r3, r3, #1
 800b800:	4413      	add	r3, r2
 800b802:	00db      	lsls	r3, r3, #3
 800b804:	440b      	add	r3, r1
 800b806:	3314      	adds	r3, #20
 800b808:	781b      	ldrb	r3, [r3, #0]
 800b80a:	2b01      	cmp	r3, #1
 800b80c:	d917      	bls.n	800b83e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800b80e:	4a49      	ldr	r2, [pc, #292]	; (800b934 <etharp_query+0x274>)
 800b810:	7c7b      	ldrb	r3, [r7, #17]
 800b812:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800b814:	7c7a      	ldrb	r2, [r7, #17]
 800b816:	4613      	mov	r3, r2
 800b818:	005b      	lsls	r3, r3, #1
 800b81a:	4413      	add	r3, r2
 800b81c:	00db      	lsls	r3, r3, #3
 800b81e:	3308      	adds	r3, #8
 800b820:	4a41      	ldr	r2, [pc, #260]	; (800b928 <etharp_query+0x268>)
 800b822:	4413      	add	r3, r2
 800b824:	3304      	adds	r3, #4
 800b826:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b82a:	9200      	str	r2, [sp, #0]
 800b82c:	697a      	ldr	r2, [r7, #20]
 800b82e:	6879      	ldr	r1, [r7, #4]
 800b830:	68f8      	ldr	r0, [r7, #12]
 800b832:	f001 fc6f 	bl	800d114 <ethernet_output>
 800b836:	4603      	mov	r3, r0
 800b838:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b83c:	e067      	b.n	800b90e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800b83e:	7c7a      	ldrb	r2, [r7, #17]
 800b840:	4939      	ldr	r1, [pc, #228]	; (800b928 <etharp_query+0x268>)
 800b842:	4613      	mov	r3, r2
 800b844:	005b      	lsls	r3, r3, #1
 800b846:	4413      	add	r3, r2
 800b848:	00db      	lsls	r3, r3, #3
 800b84a:	440b      	add	r3, r1
 800b84c:	3314      	adds	r3, #20
 800b84e:	781b      	ldrb	r3, [r3, #0]
 800b850:	2b01      	cmp	r3, #1
 800b852:	d15c      	bne.n	800b90e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800b854:	2300      	movs	r3, #0
 800b856:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	61fb      	str	r3, [r7, #28]
    while (p) {
 800b85c:	e01c      	b.n	800b898 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800b85e:	69fb      	ldr	r3, [r7, #28]
 800b860:	895a      	ldrh	r2, [r3, #10]
 800b862:	69fb      	ldr	r3, [r7, #28]
 800b864:	891b      	ldrh	r3, [r3, #8]
 800b866:	429a      	cmp	r2, r3
 800b868:	d10a      	bne.n	800b880 <etharp_query+0x1c0>
 800b86a:	69fb      	ldr	r3, [r7, #28]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d006      	beq.n	800b880 <etharp_query+0x1c0>
 800b872:	4b2a      	ldr	r3, [pc, #168]	; (800b91c <etharp_query+0x25c>)
 800b874:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800b878:	492f      	ldr	r1, [pc, #188]	; (800b938 <etharp_query+0x278>)
 800b87a:	482a      	ldr	r0, [pc, #168]	; (800b924 <etharp_query+0x264>)
 800b87c:	f001 fcf4 	bl	800d268 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800b880:	69fb      	ldr	r3, [r7, #28]
 800b882:	7b1b      	ldrb	r3, [r3, #12]
 800b884:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d002      	beq.n	800b892 <etharp_query+0x1d2>
        copy_needed = 1;
 800b88c:	2301      	movs	r3, #1
 800b88e:	61bb      	str	r3, [r7, #24]
        break;
 800b890:	e005      	b.n	800b89e <etharp_query+0x1de>
      }
      p = p->next;
 800b892:	69fb      	ldr	r3, [r7, #28]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	61fb      	str	r3, [r7, #28]
    while (p) {
 800b898:	69fb      	ldr	r3, [r7, #28]
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d1df      	bne.n	800b85e <etharp_query+0x19e>
    }
    if (copy_needed) {
 800b89e:	69bb      	ldr	r3, [r7, #24]
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d007      	beq.n	800b8b4 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800b8a4:	687a      	ldr	r2, [r7, #4]
 800b8a6:	f44f 7120 	mov.w	r1, #640	; 0x280
 800b8aa:	200e      	movs	r0, #14
 800b8ac:	f7f9 fda8 	bl	8005400 <pbuf_clone>
 800b8b0:	61f8      	str	r0, [r7, #28]
 800b8b2:	e004      	b.n	800b8be <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800b8b8:	69f8      	ldr	r0, [r7, #28]
 800b8ba:	f7f9 fb43 	bl	8004f44 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800b8be:	69fb      	ldr	r3, [r7, #28]
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d021      	beq.n	800b908 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800b8c4:	7c7a      	ldrb	r2, [r7, #17]
 800b8c6:	4918      	ldr	r1, [pc, #96]	; (800b928 <etharp_query+0x268>)
 800b8c8:	4613      	mov	r3, r2
 800b8ca:	005b      	lsls	r3, r3, #1
 800b8cc:	4413      	add	r3, r2
 800b8ce:	00db      	lsls	r3, r3, #3
 800b8d0:	440b      	add	r3, r1
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d00a      	beq.n	800b8ee <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800b8d8:	7c7a      	ldrb	r2, [r7, #17]
 800b8da:	4913      	ldr	r1, [pc, #76]	; (800b928 <etharp_query+0x268>)
 800b8dc:	4613      	mov	r3, r2
 800b8de:	005b      	lsls	r3, r3, #1
 800b8e0:	4413      	add	r3, r2
 800b8e2:	00db      	lsls	r3, r3, #3
 800b8e4:	440b      	add	r3, r1
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	f7f9 fa8b 	bl	8004e04 <pbuf_free>
      }
      arp_table[i].q = p;
 800b8ee:	7c7a      	ldrb	r2, [r7, #17]
 800b8f0:	490d      	ldr	r1, [pc, #52]	; (800b928 <etharp_query+0x268>)
 800b8f2:	4613      	mov	r3, r2
 800b8f4:	005b      	lsls	r3, r3, #1
 800b8f6:	4413      	add	r3, r2
 800b8f8:	00db      	lsls	r3, r3, #3
 800b8fa:	440b      	add	r3, r1
 800b8fc:	69fa      	ldr	r2, [r7, #28]
 800b8fe:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800b900:	2300      	movs	r3, #0
 800b902:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b906:	e002      	b.n	800b90e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800b908:	23ff      	movs	r3, #255	; 0xff
 800b90a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800b90e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800b912:	4618      	mov	r0, r3
 800b914:	3728      	adds	r7, #40	; 0x28
 800b916:	46bd      	mov	sp, r7
 800b918:	bd80      	pop	{r7, pc}
 800b91a:	bf00      	nop
 800b91c:	080108c8 	.word	0x080108c8
 800b920:	08010a74 	.word	0x08010a74
 800b924:	08010940 	.word	0x08010940
 800b928:	2000010c 	.word	0x2000010c
 800b92c:	08010a84 	.word	0x08010a84
 800b930:	08010a68 	.word	0x08010a68
 800b934:	200001fc 	.word	0x200001fc
 800b938:	08010aac 	.word	0x08010aac

0800b93c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800b93c:	b580      	push	{r7, lr}
 800b93e:	b08a      	sub	sp, #40	; 0x28
 800b940:	af02      	add	r7, sp, #8
 800b942:	60f8      	str	r0, [r7, #12]
 800b944:	60b9      	str	r1, [r7, #8]
 800b946:	607a      	str	r2, [r7, #4]
 800b948:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800b94a:	2300      	movs	r3, #0
 800b94c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	2b00      	cmp	r3, #0
 800b952:	d106      	bne.n	800b962 <etharp_raw+0x26>
 800b954:	4b3a      	ldr	r3, [pc, #232]	; (800ba40 <etharp_raw+0x104>)
 800b956:	f240 4257 	movw	r2, #1111	; 0x457
 800b95a:	493a      	ldr	r1, [pc, #232]	; (800ba44 <etharp_raw+0x108>)
 800b95c:	483a      	ldr	r0, [pc, #232]	; (800ba48 <etharp_raw+0x10c>)
 800b95e:	f001 fc83 	bl	800d268 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800b962:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b966:	211c      	movs	r1, #28
 800b968:	200e      	movs	r0, #14
 800b96a:	f7f8 ff69 	bl	8004840 <pbuf_alloc>
 800b96e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800b970:	69bb      	ldr	r3, [r7, #24]
 800b972:	2b00      	cmp	r3, #0
 800b974:	d102      	bne.n	800b97c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800b976:	f04f 33ff 	mov.w	r3, #4294967295
 800b97a:	e05d      	b.n	800ba38 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800b97c:	69bb      	ldr	r3, [r7, #24]
 800b97e:	895b      	ldrh	r3, [r3, #10]
 800b980:	2b1b      	cmp	r3, #27
 800b982:	d806      	bhi.n	800b992 <etharp_raw+0x56>
 800b984:	4b2e      	ldr	r3, [pc, #184]	; (800ba40 <etharp_raw+0x104>)
 800b986:	f240 4262 	movw	r2, #1122	; 0x462
 800b98a:	4930      	ldr	r1, [pc, #192]	; (800ba4c <etharp_raw+0x110>)
 800b98c:	482e      	ldr	r0, [pc, #184]	; (800ba48 <etharp_raw+0x10c>)
 800b98e:	f001 fc6b 	bl	800d268 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800b992:	69bb      	ldr	r3, [r7, #24]
 800b994:	685b      	ldr	r3, [r3, #4]
 800b996:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800b998:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800b99a:	4618      	mov	r0, r3
 800b99c:	f7f7 ffac 	bl	80038f8 <lwip_htons>
 800b9a0:	4603      	mov	r3, r0
 800b9a2:	461a      	mov	r2, r3
 800b9a4:	697b      	ldr	r3, [r7, #20]
 800b9a6:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b9ae:	2b06      	cmp	r3, #6
 800b9b0:	d006      	beq.n	800b9c0 <etharp_raw+0x84>
 800b9b2:	4b23      	ldr	r3, [pc, #140]	; (800ba40 <etharp_raw+0x104>)
 800b9b4:	f240 4269 	movw	r2, #1129	; 0x469
 800b9b8:	4925      	ldr	r1, [pc, #148]	; (800ba50 <etharp_raw+0x114>)
 800b9ba:	4823      	ldr	r0, [pc, #140]	; (800ba48 <etharp_raw+0x10c>)
 800b9bc:	f001 fc54 	bl	800d268 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800b9c0:	697b      	ldr	r3, [r7, #20]
 800b9c2:	3308      	adds	r3, #8
 800b9c4:	2206      	movs	r2, #6
 800b9c6:	6839      	ldr	r1, [r7, #0]
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	f001 fc1d 	bl	800d208 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800b9ce:	697b      	ldr	r3, [r7, #20]
 800b9d0:	3312      	adds	r3, #18
 800b9d2:	2206      	movs	r2, #6
 800b9d4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b9d6:	4618      	mov	r0, r3
 800b9d8:	f001 fc16 	bl	800d208 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800b9dc:	697b      	ldr	r3, [r7, #20]
 800b9de:	330e      	adds	r3, #14
 800b9e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b9e2:	6812      	ldr	r2, [r2, #0]
 800b9e4:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800b9e6:	697b      	ldr	r3, [r7, #20]
 800b9e8:	3318      	adds	r3, #24
 800b9ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b9ec:	6812      	ldr	r2, [r2, #0]
 800b9ee:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800b9f0:	697b      	ldr	r3, [r7, #20]
 800b9f2:	2200      	movs	r2, #0
 800b9f4:	701a      	strb	r2, [r3, #0]
 800b9f6:	2200      	movs	r2, #0
 800b9f8:	f042 0201 	orr.w	r2, r2, #1
 800b9fc:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800b9fe:	697b      	ldr	r3, [r7, #20]
 800ba00:	2200      	movs	r2, #0
 800ba02:	f042 0208 	orr.w	r2, r2, #8
 800ba06:	709a      	strb	r2, [r3, #2]
 800ba08:	2200      	movs	r2, #0
 800ba0a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800ba0c:	697b      	ldr	r3, [r7, #20]
 800ba0e:	2206      	movs	r2, #6
 800ba10:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800ba12:	697b      	ldr	r3, [r7, #20]
 800ba14:	2204      	movs	r2, #4
 800ba16:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800ba18:	f640 0306 	movw	r3, #2054	; 0x806
 800ba1c:	9300      	str	r3, [sp, #0]
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	68ba      	ldr	r2, [r7, #8]
 800ba22:	69b9      	ldr	r1, [r7, #24]
 800ba24:	68f8      	ldr	r0, [r7, #12]
 800ba26:	f001 fb75 	bl	800d114 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800ba2a:	69b8      	ldr	r0, [r7, #24]
 800ba2c:	f7f9 f9ea 	bl	8004e04 <pbuf_free>
  p = NULL;
 800ba30:	2300      	movs	r3, #0
 800ba32:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800ba34:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800ba38:	4618      	mov	r0, r3
 800ba3a:	3720      	adds	r7, #32
 800ba3c:	46bd      	mov	sp, r7
 800ba3e:	bd80      	pop	{r7, pc}
 800ba40:	080108c8 	.word	0x080108c8
 800ba44:	08010a18 	.word	0x08010a18
 800ba48:	08010940 	.word	0x08010940
 800ba4c:	08010ac8 	.word	0x08010ac8
 800ba50:	08010afc 	.word	0x08010afc

0800ba54 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800ba54:	b580      	push	{r7, lr}
 800ba56:	b088      	sub	sp, #32
 800ba58:	af04      	add	r7, sp, #16
 800ba5a:	60f8      	str	r0, [r7, #12]
 800ba5c:	60b9      	str	r1, [r7, #8]
 800ba5e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800ba70:	2201      	movs	r2, #1
 800ba72:	9203      	str	r2, [sp, #12]
 800ba74:	68ba      	ldr	r2, [r7, #8]
 800ba76:	9202      	str	r2, [sp, #8]
 800ba78:	4a06      	ldr	r2, [pc, #24]	; (800ba94 <etharp_request_dst+0x40>)
 800ba7a:	9201      	str	r2, [sp, #4]
 800ba7c:	9300      	str	r3, [sp, #0]
 800ba7e:	4603      	mov	r3, r0
 800ba80:	687a      	ldr	r2, [r7, #4]
 800ba82:	68f8      	ldr	r0, [r7, #12]
 800ba84:	f7ff ff5a 	bl	800b93c <etharp_raw>
 800ba88:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800ba8a:	4618      	mov	r0, r3
 800ba8c:	3710      	adds	r7, #16
 800ba8e:	46bd      	mov	sp, r7
 800ba90:	bd80      	pop	{r7, pc}
 800ba92:	bf00      	nop
 800ba94:	08011078 	.word	0x08011078

0800ba98 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800ba98:	b580      	push	{r7, lr}
 800ba9a:	b082      	sub	sp, #8
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	6078      	str	r0, [r7, #4]
 800baa0:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800baa2:	4a05      	ldr	r2, [pc, #20]	; (800bab8 <etharp_request+0x20>)
 800baa4:	6839      	ldr	r1, [r7, #0]
 800baa6:	6878      	ldr	r0, [r7, #4]
 800baa8:	f7ff ffd4 	bl	800ba54 <etharp_request_dst>
 800baac:	4603      	mov	r3, r0
}
 800baae:	4618      	mov	r0, r3
 800bab0:	3708      	adds	r7, #8
 800bab2:	46bd      	mov	sp, r7
 800bab4:	bd80      	pop	{r7, pc}
 800bab6:	bf00      	nop
 800bab8:	08011070 	.word	0x08011070

0800babc <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800babc:	b580      	push	{r7, lr}
 800babe:	b08e      	sub	sp, #56	; 0x38
 800bac0:	af04      	add	r7, sp, #16
 800bac2:	6078      	str	r0, [r7, #4]
 800bac4:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800bac6:	4b79      	ldr	r3, [pc, #484]	; (800bcac <icmp_input+0x1f0>)
 800bac8:	689b      	ldr	r3, [r3, #8]
 800baca:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800bacc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bace:	781b      	ldrb	r3, [r3, #0]
 800bad0:	f003 030f 	and.w	r3, r3, #15
 800bad4:	b2db      	uxtb	r3, r3
 800bad6:	009b      	lsls	r3, r3, #2
 800bad8:	b2db      	uxtb	r3, r3
 800bada:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800badc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bade:	2b13      	cmp	r3, #19
 800bae0:	f240 80cd 	bls.w	800bc7e <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	895b      	ldrh	r3, [r3, #10]
 800bae8:	2b03      	cmp	r3, #3
 800baea:	f240 80ca 	bls.w	800bc82 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	685b      	ldr	r3, [r3, #4]
 800baf2:	781b      	ldrb	r3, [r3, #0]
 800baf4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800baf8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	f000 80b7 	beq.w	800bc70 <icmp_input+0x1b4>
 800bb02:	2b08      	cmp	r3, #8
 800bb04:	f040 80b7 	bne.w	800bc76 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800bb08:	4b69      	ldr	r3, [pc, #420]	; (800bcb0 <icmp_input+0x1f4>)
 800bb0a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800bb0c:	4b67      	ldr	r3, [pc, #412]	; (800bcac <icmp_input+0x1f0>)
 800bb0e:	695b      	ldr	r3, [r3, #20]
 800bb10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bb14:	2be0      	cmp	r3, #224	; 0xe0
 800bb16:	f000 80bb 	beq.w	800bc90 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800bb1a:	4b64      	ldr	r3, [pc, #400]	; (800bcac <icmp_input+0x1f0>)
 800bb1c:	695b      	ldr	r3, [r3, #20]
 800bb1e:	4a63      	ldr	r2, [pc, #396]	; (800bcac <icmp_input+0x1f0>)
 800bb20:	6812      	ldr	r2, [r2, #0]
 800bb22:	4611      	mov	r1, r2
 800bb24:	4618      	mov	r0, r3
 800bb26:	f000 fbed 	bl	800c304 <ip4_addr_isbroadcast_u32>
 800bb2a:	4603      	mov	r3, r0
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	f040 80b1 	bne.w	800bc94 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	891b      	ldrh	r3, [r3, #8]
 800bb36:	2b07      	cmp	r3, #7
 800bb38:	f240 80a5 	bls.w	800bc86 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800bb3c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bb3e:	330e      	adds	r3, #14
 800bb40:	4619      	mov	r1, r3
 800bb42:	6878      	ldr	r0, [r7, #4]
 800bb44:	f7f9 f8c8 	bl	8004cd8 <pbuf_add_header>
 800bb48:	4603      	mov	r3, r0
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d04b      	beq.n	800bbe6 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	891a      	ldrh	r2, [r3, #8]
 800bb52:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bb54:	4413      	add	r3, r2
 800bb56:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	891b      	ldrh	r3, [r3, #8]
 800bb5c:	8b7a      	ldrh	r2, [r7, #26]
 800bb5e:	429a      	cmp	r2, r3
 800bb60:	f0c0 809a 	bcc.w	800bc98 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800bb64:	8b7b      	ldrh	r3, [r7, #26]
 800bb66:	f44f 7220 	mov.w	r2, #640	; 0x280
 800bb6a:	4619      	mov	r1, r3
 800bb6c:	200e      	movs	r0, #14
 800bb6e:	f7f8 fe67 	bl	8004840 <pbuf_alloc>
 800bb72:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800bb74:	697b      	ldr	r3, [r7, #20]
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	f000 8090 	beq.w	800bc9c <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800bb7c:	697b      	ldr	r3, [r7, #20]
 800bb7e:	895b      	ldrh	r3, [r3, #10]
 800bb80:	461a      	mov	r2, r3
 800bb82:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bb84:	3308      	adds	r3, #8
 800bb86:	429a      	cmp	r2, r3
 800bb88:	d203      	bcs.n	800bb92 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800bb8a:	6978      	ldr	r0, [r7, #20]
 800bb8c:	f7f9 f93a 	bl	8004e04 <pbuf_free>
          goto icmperr;
 800bb90:	e085      	b.n	800bc9e <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800bb92:	697b      	ldr	r3, [r7, #20]
 800bb94:	685b      	ldr	r3, [r3, #4]
 800bb96:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800bb98:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bb9a:	4618      	mov	r0, r3
 800bb9c:	f001 fb34 	bl	800d208 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800bba0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bba2:	4619      	mov	r1, r3
 800bba4:	6978      	ldr	r0, [r7, #20]
 800bba6:	f7f9 f8a7 	bl	8004cf8 <pbuf_remove_header>
 800bbaa:	4603      	mov	r3, r0
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d009      	beq.n	800bbc4 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800bbb0:	4b40      	ldr	r3, [pc, #256]	; (800bcb4 <icmp_input+0x1f8>)
 800bbb2:	22b6      	movs	r2, #182	; 0xb6
 800bbb4:	4940      	ldr	r1, [pc, #256]	; (800bcb8 <icmp_input+0x1fc>)
 800bbb6:	4841      	ldr	r0, [pc, #260]	; (800bcbc <icmp_input+0x200>)
 800bbb8:	f001 fb56 	bl	800d268 <iprintf>
          pbuf_free(r);
 800bbbc:	6978      	ldr	r0, [r7, #20]
 800bbbe:	f7f9 f921 	bl	8004e04 <pbuf_free>
          goto icmperr;
 800bbc2:	e06c      	b.n	800bc9e <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800bbc4:	6879      	ldr	r1, [r7, #4]
 800bbc6:	6978      	ldr	r0, [r7, #20]
 800bbc8:	f7f9 fa44 	bl	8005054 <pbuf_copy>
 800bbcc:	4603      	mov	r3, r0
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d003      	beq.n	800bbda <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800bbd2:	6978      	ldr	r0, [r7, #20]
 800bbd4:	f7f9 f916 	bl	8004e04 <pbuf_free>
          goto icmperr;
 800bbd8:	e061      	b.n	800bc9e <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800bbda:	6878      	ldr	r0, [r7, #4]
 800bbdc:	f7f9 f912 	bl	8004e04 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800bbe0:	697b      	ldr	r3, [r7, #20]
 800bbe2:	607b      	str	r3, [r7, #4]
 800bbe4:	e00f      	b.n	800bc06 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800bbe6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bbe8:	330e      	adds	r3, #14
 800bbea:	4619      	mov	r1, r3
 800bbec:	6878      	ldr	r0, [r7, #4]
 800bbee:	f7f9 f883 	bl	8004cf8 <pbuf_remove_header>
 800bbf2:	4603      	mov	r3, r0
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d006      	beq.n	800bc06 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800bbf8:	4b2e      	ldr	r3, [pc, #184]	; (800bcb4 <icmp_input+0x1f8>)
 800bbfa:	22c7      	movs	r2, #199	; 0xc7
 800bbfc:	4930      	ldr	r1, [pc, #192]	; (800bcc0 <icmp_input+0x204>)
 800bbfe:	482f      	ldr	r0, [pc, #188]	; (800bcbc <icmp_input+0x200>)
 800bc00:	f001 fb32 	bl	800d268 <iprintf>
          goto icmperr;
 800bc04:	e04b      	b.n	800bc9e <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	685b      	ldr	r3, [r3, #4]
 800bc0a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800bc0c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bc0e:	4619      	mov	r1, r3
 800bc10:	6878      	ldr	r0, [r7, #4]
 800bc12:	f7f9 f861 	bl	8004cd8 <pbuf_add_header>
 800bc16:	4603      	mov	r3, r0
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d12b      	bne.n	800bc74 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	685b      	ldr	r3, [r3, #4]
 800bc20:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800bc22:	69fb      	ldr	r3, [r7, #28]
 800bc24:	681a      	ldr	r2, [r3, #0]
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800bc2a:	4b20      	ldr	r3, [pc, #128]	; (800bcac <icmp_input+0x1f0>)
 800bc2c:	691a      	ldr	r2, [r3, #16]
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800bc32:	693b      	ldr	r3, [r7, #16]
 800bc34:	2200      	movs	r2, #0
 800bc36:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800bc38:	693b      	ldr	r3, [r7, #16]
 800bc3a:	2200      	movs	r2, #0
 800bc3c:	709a      	strb	r2, [r3, #2]
 800bc3e:	2200      	movs	r2, #0
 800bc40:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	22ff      	movs	r2, #255	; 0xff
 800bc46:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	2200      	movs	r2, #0
 800bc4c:	729a      	strb	r2, [r3, #10]
 800bc4e:	2200      	movs	r2, #0
 800bc50:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800bc52:	683b      	ldr	r3, [r7, #0]
 800bc54:	9302      	str	r3, [sp, #8]
 800bc56:	2301      	movs	r3, #1
 800bc58:	9301      	str	r3, [sp, #4]
 800bc5a:	2300      	movs	r3, #0
 800bc5c:	9300      	str	r3, [sp, #0]
 800bc5e:	23ff      	movs	r3, #255	; 0xff
 800bc60:	2200      	movs	r2, #0
 800bc62:	69f9      	ldr	r1, [r7, #28]
 800bc64:	6878      	ldr	r0, [r7, #4]
 800bc66:	f000 fa75 	bl	800c154 <ip4_output_if>
 800bc6a:	4603      	mov	r3, r0
 800bc6c:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800bc6e:	e001      	b.n	800bc74 <icmp_input+0x1b8>
      break;
 800bc70:	bf00      	nop
 800bc72:	e000      	b.n	800bc76 <icmp_input+0x1ba>
      break;
 800bc74:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800bc76:	6878      	ldr	r0, [r7, #4]
 800bc78:	f7f9 f8c4 	bl	8004e04 <pbuf_free>
  return;
 800bc7c:	e013      	b.n	800bca6 <icmp_input+0x1ea>
    goto lenerr;
 800bc7e:	bf00      	nop
 800bc80:	e002      	b.n	800bc88 <icmp_input+0x1cc>
    goto lenerr;
 800bc82:	bf00      	nop
 800bc84:	e000      	b.n	800bc88 <icmp_input+0x1cc>
        goto lenerr;
 800bc86:	bf00      	nop
lenerr:
  pbuf_free(p);
 800bc88:	6878      	ldr	r0, [r7, #4]
 800bc8a:	f7f9 f8bb 	bl	8004e04 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800bc8e:	e00a      	b.n	800bca6 <icmp_input+0x1ea>
        goto icmperr;
 800bc90:	bf00      	nop
 800bc92:	e004      	b.n	800bc9e <icmp_input+0x1e2>
        goto icmperr;
 800bc94:	bf00      	nop
 800bc96:	e002      	b.n	800bc9e <icmp_input+0x1e2>
          goto icmperr;
 800bc98:	bf00      	nop
 800bc9a:	e000      	b.n	800bc9e <icmp_input+0x1e2>
          goto icmperr;
 800bc9c:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800bc9e:	6878      	ldr	r0, [r7, #4]
 800bca0:	f7f9 f8b0 	bl	8004e04 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800bca4:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800bca6:	3728      	adds	r7, #40	; 0x28
 800bca8:	46bd      	mov	sp, r7
 800bcaa:	bd80      	pop	{r7, pc}
 800bcac:	20003348 	.word	0x20003348
 800bcb0:	2000335c 	.word	0x2000335c
 800bcb4:	08010b40 	.word	0x08010b40
 800bcb8:	08010b78 	.word	0x08010b78
 800bcbc:	08010bb0 	.word	0x08010bb0
 800bcc0:	08010bd8 	.word	0x08010bd8

0800bcc4 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800bcc4:	b580      	push	{r7, lr}
 800bcc6:	b082      	sub	sp, #8
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	6078      	str	r0, [r7, #4]
 800bccc:	460b      	mov	r3, r1
 800bcce:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800bcd0:	78fb      	ldrb	r3, [r7, #3]
 800bcd2:	461a      	mov	r2, r3
 800bcd4:	2103      	movs	r1, #3
 800bcd6:	6878      	ldr	r0, [r7, #4]
 800bcd8:	f000 f814 	bl	800bd04 <icmp_send_response>
}
 800bcdc:	bf00      	nop
 800bcde:	3708      	adds	r7, #8
 800bce0:	46bd      	mov	sp, r7
 800bce2:	bd80      	pop	{r7, pc}

0800bce4 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800bce4:	b580      	push	{r7, lr}
 800bce6:	b082      	sub	sp, #8
 800bce8:	af00      	add	r7, sp, #0
 800bcea:	6078      	str	r0, [r7, #4]
 800bcec:	460b      	mov	r3, r1
 800bcee:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800bcf0:	78fb      	ldrb	r3, [r7, #3]
 800bcf2:	461a      	mov	r2, r3
 800bcf4:	210b      	movs	r1, #11
 800bcf6:	6878      	ldr	r0, [r7, #4]
 800bcf8:	f000 f804 	bl	800bd04 <icmp_send_response>
}
 800bcfc:	bf00      	nop
 800bcfe:	3708      	adds	r7, #8
 800bd00:	46bd      	mov	sp, r7
 800bd02:	bd80      	pop	{r7, pc}

0800bd04 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800bd04:	b580      	push	{r7, lr}
 800bd06:	b08c      	sub	sp, #48	; 0x30
 800bd08:	af04      	add	r7, sp, #16
 800bd0a:	6078      	str	r0, [r7, #4]
 800bd0c:	460b      	mov	r3, r1
 800bd0e:	70fb      	strb	r3, [r7, #3]
 800bd10:	4613      	mov	r3, r2
 800bd12:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800bd14:	f44f 7220 	mov.w	r2, #640	; 0x280
 800bd18:	2124      	movs	r1, #36	; 0x24
 800bd1a:	2022      	movs	r0, #34	; 0x22
 800bd1c:	f7f8 fd90 	bl	8004840 <pbuf_alloc>
 800bd20:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800bd22:	69fb      	ldr	r3, [r7, #28]
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d04c      	beq.n	800bdc2 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800bd28:	69fb      	ldr	r3, [r7, #28]
 800bd2a:	895b      	ldrh	r3, [r3, #10]
 800bd2c:	2b23      	cmp	r3, #35	; 0x23
 800bd2e:	d806      	bhi.n	800bd3e <icmp_send_response+0x3a>
 800bd30:	4b26      	ldr	r3, [pc, #152]	; (800bdcc <icmp_send_response+0xc8>)
 800bd32:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800bd36:	4926      	ldr	r1, [pc, #152]	; (800bdd0 <icmp_send_response+0xcc>)
 800bd38:	4826      	ldr	r0, [pc, #152]	; (800bdd4 <icmp_send_response+0xd0>)
 800bd3a:	f001 fa95 	bl	800d268 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	685b      	ldr	r3, [r3, #4]
 800bd42:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800bd44:	69fb      	ldr	r3, [r7, #28]
 800bd46:	685b      	ldr	r3, [r3, #4]
 800bd48:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800bd4a:	697b      	ldr	r3, [r7, #20]
 800bd4c:	78fa      	ldrb	r2, [r7, #3]
 800bd4e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800bd50:	697b      	ldr	r3, [r7, #20]
 800bd52:	78ba      	ldrb	r2, [r7, #2]
 800bd54:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800bd56:	697b      	ldr	r3, [r7, #20]
 800bd58:	2200      	movs	r2, #0
 800bd5a:	711a      	strb	r2, [r3, #4]
 800bd5c:	2200      	movs	r2, #0
 800bd5e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800bd60:	697b      	ldr	r3, [r7, #20]
 800bd62:	2200      	movs	r2, #0
 800bd64:	719a      	strb	r2, [r3, #6]
 800bd66:	2200      	movs	r2, #0
 800bd68:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800bd6a:	69fb      	ldr	r3, [r7, #28]
 800bd6c:	685b      	ldr	r3, [r3, #4]
 800bd6e:	f103 0008 	add.w	r0, r3, #8
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	685b      	ldr	r3, [r3, #4]
 800bd76:	221c      	movs	r2, #28
 800bd78:	4619      	mov	r1, r3
 800bd7a:	f001 fa45 	bl	800d208 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800bd7e:	69bb      	ldr	r3, [r7, #24]
 800bd80:	68db      	ldr	r3, [r3, #12]
 800bd82:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800bd84:	f107 030c 	add.w	r3, r7, #12
 800bd88:	4618      	mov	r0, r3
 800bd8a:	f000 f825 	bl	800bdd8 <ip4_route>
 800bd8e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800bd90:	693b      	ldr	r3, [r7, #16]
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d011      	beq.n	800bdba <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800bd96:	697b      	ldr	r3, [r7, #20]
 800bd98:	2200      	movs	r2, #0
 800bd9a:	709a      	strb	r2, [r3, #2]
 800bd9c:	2200      	movs	r2, #0
 800bd9e:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800bda0:	f107 020c 	add.w	r2, r7, #12
 800bda4:	693b      	ldr	r3, [r7, #16]
 800bda6:	9302      	str	r3, [sp, #8]
 800bda8:	2301      	movs	r3, #1
 800bdaa:	9301      	str	r3, [sp, #4]
 800bdac:	2300      	movs	r3, #0
 800bdae:	9300      	str	r3, [sp, #0]
 800bdb0:	23ff      	movs	r3, #255	; 0xff
 800bdb2:	2100      	movs	r1, #0
 800bdb4:	69f8      	ldr	r0, [r7, #28]
 800bdb6:	f000 f9cd 	bl	800c154 <ip4_output_if>
  }
  pbuf_free(q);
 800bdba:	69f8      	ldr	r0, [r7, #28]
 800bdbc:	f7f9 f822 	bl	8004e04 <pbuf_free>
 800bdc0:	e000      	b.n	800bdc4 <icmp_send_response+0xc0>
    return;
 800bdc2:	bf00      	nop
}
 800bdc4:	3720      	adds	r7, #32
 800bdc6:	46bd      	mov	sp, r7
 800bdc8:	bd80      	pop	{r7, pc}
 800bdca:	bf00      	nop
 800bdcc:	08010b40 	.word	0x08010b40
 800bdd0:	08010c0c 	.word	0x08010c0c
 800bdd4:	08010bb0 	.word	0x08010bb0

0800bdd8 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800bdd8:	b480      	push	{r7}
 800bdda:	b085      	sub	sp, #20
 800bddc:	af00      	add	r7, sp, #0
 800bdde:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800bde0:	4b33      	ldr	r3, [pc, #204]	; (800beb0 <ip4_route+0xd8>)
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	60fb      	str	r3, [r7, #12]
 800bde6:	e036      	b.n	800be56 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800bdee:	f003 0301 	and.w	r3, r3, #1
 800bdf2:	b2db      	uxtb	r3, r3
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d02b      	beq.n	800be50 <ip4_route+0x78>
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800bdfe:	089b      	lsrs	r3, r3, #2
 800be00:	f003 0301 	and.w	r3, r3, #1
 800be04:	b2db      	uxtb	r3, r3
 800be06:	2b00      	cmp	r3, #0
 800be08:	d022      	beq.n	800be50 <ip4_route+0x78>
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	3304      	adds	r3, #4
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	2b00      	cmp	r3, #0
 800be12:	d01d      	beq.n	800be50 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	681a      	ldr	r2, [r3, #0]
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	3304      	adds	r3, #4
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	405a      	eors	r2, r3
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	3308      	adds	r3, #8
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	4013      	ands	r3, r2
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d101      	bne.n	800be30 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	e038      	b.n	800bea2 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800be36:	f003 0302 	and.w	r3, r3, #2
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d108      	bne.n	800be50 <ip4_route+0x78>
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	681a      	ldr	r2, [r3, #0]
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	330c      	adds	r3, #12
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	429a      	cmp	r2, r3
 800be4a:	d101      	bne.n	800be50 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	e028      	b.n	800bea2 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	60fb      	str	r3, [r7, #12]
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d1c5      	bne.n	800bde8 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800be5c:	4b15      	ldr	r3, [pc, #84]	; (800beb4 <ip4_route+0xdc>)
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	2b00      	cmp	r3, #0
 800be62:	d01a      	beq.n	800be9a <ip4_route+0xc2>
 800be64:	4b13      	ldr	r3, [pc, #76]	; (800beb4 <ip4_route+0xdc>)
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800be6c:	f003 0301 	and.w	r3, r3, #1
 800be70:	2b00      	cmp	r3, #0
 800be72:	d012      	beq.n	800be9a <ip4_route+0xc2>
 800be74:	4b0f      	ldr	r3, [pc, #60]	; (800beb4 <ip4_route+0xdc>)
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800be7c:	f003 0304 	and.w	r3, r3, #4
 800be80:	2b00      	cmp	r3, #0
 800be82:	d00a      	beq.n	800be9a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800be84:	4b0b      	ldr	r3, [pc, #44]	; (800beb4 <ip4_route+0xdc>)
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	3304      	adds	r3, #4
 800be8a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d004      	beq.n	800be9a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	b2db      	uxtb	r3, r3
 800be96:	2b7f      	cmp	r3, #127	; 0x7f
 800be98:	d101      	bne.n	800be9e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800be9a:	2300      	movs	r3, #0
 800be9c:	e001      	b.n	800bea2 <ip4_route+0xca>
  }

  return netif_default;
 800be9e:	4b05      	ldr	r3, [pc, #20]	; (800beb4 <ip4_route+0xdc>)
 800bea0:	681b      	ldr	r3, [r3, #0]
}
 800bea2:	4618      	mov	r0, r3
 800bea4:	3714      	adds	r7, #20
 800bea6:	46bd      	mov	sp, r7
 800bea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beac:	4770      	bx	lr
 800beae:	bf00      	nop
 800beb0:	20006868 	.word	0x20006868
 800beb4:	2000686c 	.word	0x2000686c

0800beb8 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800beb8:	b580      	push	{r7, lr}
 800beba:	b082      	sub	sp, #8
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800bec6:	f003 0301 	and.w	r3, r3, #1
 800beca:	b2db      	uxtb	r3, r3
 800becc:	2b00      	cmp	r3, #0
 800bece:	d016      	beq.n	800befe <ip4_input_accept+0x46>
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	3304      	adds	r3, #4
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d011      	beq.n	800befe <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800beda:	4b0b      	ldr	r3, [pc, #44]	; (800bf08 <ip4_input_accept+0x50>)
 800bedc:	695a      	ldr	r2, [r3, #20]
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	3304      	adds	r3, #4
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	429a      	cmp	r2, r3
 800bee6:	d008      	beq.n	800befa <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800bee8:	4b07      	ldr	r3, [pc, #28]	; (800bf08 <ip4_input_accept+0x50>)
 800beea:	695b      	ldr	r3, [r3, #20]
 800beec:	6879      	ldr	r1, [r7, #4]
 800beee:	4618      	mov	r0, r3
 800bef0:	f000 fa08 	bl	800c304 <ip4_addr_isbroadcast_u32>
 800bef4:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d001      	beq.n	800befe <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800befa:	2301      	movs	r3, #1
 800befc:	e000      	b.n	800bf00 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800befe:	2300      	movs	r3, #0
}
 800bf00:	4618      	mov	r0, r3
 800bf02:	3708      	adds	r7, #8
 800bf04:	46bd      	mov	sp, r7
 800bf06:	bd80      	pop	{r7, pc}
 800bf08:	20003348 	.word	0x20003348

0800bf0c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800bf0c:	b580      	push	{r7, lr}
 800bf0e:	b086      	sub	sp, #24
 800bf10:	af00      	add	r7, sp, #0
 800bf12:	6078      	str	r0, [r7, #4]
 800bf14:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	685b      	ldr	r3, [r3, #4]
 800bf1a:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800bf1c:	697b      	ldr	r3, [r7, #20]
 800bf1e:	781b      	ldrb	r3, [r3, #0]
 800bf20:	091b      	lsrs	r3, r3, #4
 800bf22:	b2db      	uxtb	r3, r3
 800bf24:	2b04      	cmp	r3, #4
 800bf26:	d004      	beq.n	800bf32 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800bf28:	6878      	ldr	r0, [r7, #4]
 800bf2a:	f7f8 ff6b 	bl	8004e04 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800bf2e:	2300      	movs	r3, #0
 800bf30:	e107      	b.n	800c142 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800bf32:	697b      	ldr	r3, [r7, #20]
 800bf34:	781b      	ldrb	r3, [r3, #0]
 800bf36:	f003 030f 	and.w	r3, r3, #15
 800bf3a:	b2db      	uxtb	r3, r3
 800bf3c:	009b      	lsls	r3, r3, #2
 800bf3e:	b2db      	uxtb	r3, r3
 800bf40:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800bf42:	697b      	ldr	r3, [r7, #20]
 800bf44:	885b      	ldrh	r3, [r3, #2]
 800bf46:	b29b      	uxth	r3, r3
 800bf48:	4618      	mov	r0, r3
 800bf4a:	f7f7 fcd5 	bl	80038f8 <lwip_htons>
 800bf4e:	4603      	mov	r3, r0
 800bf50:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	891b      	ldrh	r3, [r3, #8]
 800bf56:	89ba      	ldrh	r2, [r7, #12]
 800bf58:	429a      	cmp	r2, r3
 800bf5a:	d204      	bcs.n	800bf66 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800bf5c:	89bb      	ldrh	r3, [r7, #12]
 800bf5e:	4619      	mov	r1, r3
 800bf60:	6878      	ldr	r0, [r7, #4]
 800bf62:	f7f8 fdc9 	bl	8004af8 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	895b      	ldrh	r3, [r3, #10]
 800bf6a:	89fa      	ldrh	r2, [r7, #14]
 800bf6c:	429a      	cmp	r2, r3
 800bf6e:	d807      	bhi.n	800bf80 <ip4_input+0x74>
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	891b      	ldrh	r3, [r3, #8]
 800bf74:	89ba      	ldrh	r2, [r7, #12]
 800bf76:	429a      	cmp	r2, r3
 800bf78:	d802      	bhi.n	800bf80 <ip4_input+0x74>
 800bf7a:	89fb      	ldrh	r3, [r7, #14]
 800bf7c:	2b13      	cmp	r3, #19
 800bf7e:	d804      	bhi.n	800bf8a <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800bf80:	6878      	ldr	r0, [r7, #4]
 800bf82:	f7f8 ff3f 	bl	8004e04 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800bf86:	2300      	movs	r3, #0
 800bf88:	e0db      	b.n	800c142 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800bf8a:	697b      	ldr	r3, [r7, #20]
 800bf8c:	691b      	ldr	r3, [r3, #16]
 800bf8e:	4a6f      	ldr	r2, [pc, #444]	; (800c14c <ip4_input+0x240>)
 800bf90:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800bf92:	697b      	ldr	r3, [r7, #20]
 800bf94:	68db      	ldr	r3, [r3, #12]
 800bf96:	4a6d      	ldr	r2, [pc, #436]	; (800c14c <ip4_input+0x240>)
 800bf98:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800bf9a:	4b6c      	ldr	r3, [pc, #432]	; (800c14c <ip4_input+0x240>)
 800bf9c:	695b      	ldr	r3, [r3, #20]
 800bf9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bfa2:	2be0      	cmp	r3, #224	; 0xe0
 800bfa4:	d112      	bne.n	800bfcc <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800bfa6:	683b      	ldr	r3, [r7, #0]
 800bfa8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800bfac:	f003 0301 	and.w	r3, r3, #1
 800bfb0:	b2db      	uxtb	r3, r3
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d007      	beq.n	800bfc6 <ip4_input+0xba>
 800bfb6:	683b      	ldr	r3, [r7, #0]
 800bfb8:	3304      	adds	r3, #4
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d002      	beq.n	800bfc6 <ip4_input+0xba>
      netif = inp;
 800bfc0:	683b      	ldr	r3, [r7, #0]
 800bfc2:	613b      	str	r3, [r7, #16]
 800bfc4:	e02a      	b.n	800c01c <ip4_input+0x110>
    } else {
      netif = NULL;
 800bfc6:	2300      	movs	r3, #0
 800bfc8:	613b      	str	r3, [r7, #16]
 800bfca:	e027      	b.n	800c01c <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800bfcc:	6838      	ldr	r0, [r7, #0]
 800bfce:	f7ff ff73 	bl	800beb8 <ip4_input_accept>
 800bfd2:	4603      	mov	r3, r0
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d002      	beq.n	800bfde <ip4_input+0xd2>
      netif = inp;
 800bfd8:	683b      	ldr	r3, [r7, #0]
 800bfda:	613b      	str	r3, [r7, #16]
 800bfdc:	e01e      	b.n	800c01c <ip4_input+0x110>
    } else {
      netif = NULL;
 800bfde:	2300      	movs	r3, #0
 800bfe0:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800bfe2:	4b5a      	ldr	r3, [pc, #360]	; (800c14c <ip4_input+0x240>)
 800bfe4:	695b      	ldr	r3, [r3, #20]
 800bfe6:	b2db      	uxtb	r3, r3
 800bfe8:	2b7f      	cmp	r3, #127	; 0x7f
 800bfea:	d017      	beq.n	800c01c <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800bfec:	4b58      	ldr	r3, [pc, #352]	; (800c150 <ip4_input+0x244>)
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	613b      	str	r3, [r7, #16]
 800bff2:	e00e      	b.n	800c012 <ip4_input+0x106>
          if (netif == inp) {
 800bff4:	693a      	ldr	r2, [r7, #16]
 800bff6:	683b      	ldr	r3, [r7, #0]
 800bff8:	429a      	cmp	r2, r3
 800bffa:	d006      	beq.n	800c00a <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800bffc:	6938      	ldr	r0, [r7, #16]
 800bffe:	f7ff ff5b 	bl	800beb8 <ip4_input_accept>
 800c002:	4603      	mov	r3, r0
 800c004:	2b00      	cmp	r3, #0
 800c006:	d108      	bne.n	800c01a <ip4_input+0x10e>
 800c008:	e000      	b.n	800c00c <ip4_input+0x100>
            continue;
 800c00a:	bf00      	nop
        NETIF_FOREACH(netif) {
 800c00c:	693b      	ldr	r3, [r7, #16]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	613b      	str	r3, [r7, #16]
 800c012:	693b      	ldr	r3, [r7, #16]
 800c014:	2b00      	cmp	r3, #0
 800c016:	d1ed      	bne.n	800bff4 <ip4_input+0xe8>
 800c018:	e000      	b.n	800c01c <ip4_input+0x110>
            break;
 800c01a:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800c01c:	4b4b      	ldr	r3, [pc, #300]	; (800c14c <ip4_input+0x240>)
 800c01e:	691b      	ldr	r3, [r3, #16]
 800c020:	6839      	ldr	r1, [r7, #0]
 800c022:	4618      	mov	r0, r3
 800c024:	f000 f96e 	bl	800c304 <ip4_addr_isbroadcast_u32>
 800c028:	4603      	mov	r3, r0
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d105      	bne.n	800c03a <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800c02e:	4b47      	ldr	r3, [pc, #284]	; (800c14c <ip4_input+0x240>)
 800c030:	691b      	ldr	r3, [r3, #16]
 800c032:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800c036:	2be0      	cmp	r3, #224	; 0xe0
 800c038:	d104      	bne.n	800c044 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800c03a:	6878      	ldr	r0, [r7, #4]
 800c03c:	f7f8 fee2 	bl	8004e04 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800c040:	2300      	movs	r3, #0
 800c042:	e07e      	b.n	800c142 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800c044:	693b      	ldr	r3, [r7, #16]
 800c046:	2b00      	cmp	r3, #0
 800c048:	d104      	bne.n	800c054 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800c04a:	6878      	ldr	r0, [r7, #4]
 800c04c:	f7f8 feda 	bl	8004e04 <pbuf_free>
    return ERR_OK;
 800c050:	2300      	movs	r3, #0
 800c052:	e076      	b.n	800c142 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800c054:	697b      	ldr	r3, [r7, #20]
 800c056:	88db      	ldrh	r3, [r3, #6]
 800c058:	b29b      	uxth	r3, r3
 800c05a:	461a      	mov	r2, r3
 800c05c:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800c060:	4013      	ands	r3, r2
 800c062:	2b00      	cmp	r3, #0
 800c064:	d00b      	beq.n	800c07e <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800c066:	6878      	ldr	r0, [r7, #4]
 800c068:	f000 fc92 	bl	800c990 <ip4_reass>
 800c06c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	2b00      	cmp	r3, #0
 800c072:	d101      	bne.n	800c078 <ip4_input+0x16c>
      return ERR_OK;
 800c074:	2300      	movs	r3, #0
 800c076:	e064      	b.n	800c142 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	685b      	ldr	r3, [r3, #4]
 800c07c:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800c07e:	4a33      	ldr	r2, [pc, #204]	; (800c14c <ip4_input+0x240>)
 800c080:	693b      	ldr	r3, [r7, #16]
 800c082:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800c084:	4a31      	ldr	r2, [pc, #196]	; (800c14c <ip4_input+0x240>)
 800c086:	683b      	ldr	r3, [r7, #0]
 800c088:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800c08a:	4a30      	ldr	r2, [pc, #192]	; (800c14c <ip4_input+0x240>)
 800c08c:	697b      	ldr	r3, [r7, #20]
 800c08e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800c090:	697b      	ldr	r3, [r7, #20]
 800c092:	781b      	ldrb	r3, [r3, #0]
 800c094:	f003 030f 	and.w	r3, r3, #15
 800c098:	b2db      	uxtb	r3, r3
 800c09a:	009b      	lsls	r3, r3, #2
 800c09c:	b2db      	uxtb	r3, r3
 800c09e:	b29a      	uxth	r2, r3
 800c0a0:	4b2a      	ldr	r3, [pc, #168]	; (800c14c <ip4_input+0x240>)
 800c0a2:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800c0a4:	89fb      	ldrh	r3, [r7, #14]
 800c0a6:	4619      	mov	r1, r3
 800c0a8:	6878      	ldr	r0, [r7, #4]
 800c0aa:	f7f8 fe25 	bl	8004cf8 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800c0ae:	697b      	ldr	r3, [r7, #20]
 800c0b0:	7a5b      	ldrb	r3, [r3, #9]
 800c0b2:	2b11      	cmp	r3, #17
 800c0b4:	d006      	beq.n	800c0c4 <ip4_input+0x1b8>
 800c0b6:	2b11      	cmp	r3, #17
 800c0b8:	dc13      	bgt.n	800c0e2 <ip4_input+0x1d6>
 800c0ba:	2b01      	cmp	r3, #1
 800c0bc:	d00c      	beq.n	800c0d8 <ip4_input+0x1cc>
 800c0be:	2b06      	cmp	r3, #6
 800c0c0:	d005      	beq.n	800c0ce <ip4_input+0x1c2>
 800c0c2:	e00e      	b.n	800c0e2 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800c0c4:	6839      	ldr	r1, [r7, #0]
 800c0c6:	6878      	ldr	r0, [r7, #4]
 800c0c8:	f7fe f8e6 	bl	800a298 <udp_input>
        break;
 800c0cc:	e026      	b.n	800c11c <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800c0ce:	6839      	ldr	r1, [r7, #0]
 800c0d0:	6878      	ldr	r0, [r7, #4]
 800c0d2:	f7fa fced 	bl	8006ab0 <tcp_input>
        break;
 800c0d6:	e021      	b.n	800c11c <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800c0d8:	6839      	ldr	r1, [r7, #0]
 800c0da:	6878      	ldr	r0, [r7, #4]
 800c0dc:	f7ff fcee 	bl	800babc <icmp_input>
        break;
 800c0e0:	e01c      	b.n	800c11c <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800c0e2:	4b1a      	ldr	r3, [pc, #104]	; (800c14c <ip4_input+0x240>)
 800c0e4:	695b      	ldr	r3, [r3, #20]
 800c0e6:	6939      	ldr	r1, [r7, #16]
 800c0e8:	4618      	mov	r0, r3
 800c0ea:	f000 f90b 	bl	800c304 <ip4_addr_isbroadcast_u32>
 800c0ee:	4603      	mov	r3, r0
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d10f      	bne.n	800c114 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800c0f4:	4b15      	ldr	r3, [pc, #84]	; (800c14c <ip4_input+0x240>)
 800c0f6:	695b      	ldr	r3, [r3, #20]
 800c0f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800c0fc:	2be0      	cmp	r3, #224	; 0xe0
 800c0fe:	d009      	beq.n	800c114 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800c100:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800c104:	4619      	mov	r1, r3
 800c106:	6878      	ldr	r0, [r7, #4]
 800c108:	f7f8 fe69 	bl	8004dde <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800c10c:	2102      	movs	r1, #2
 800c10e:	6878      	ldr	r0, [r7, #4]
 800c110:	f7ff fdd8 	bl	800bcc4 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800c114:	6878      	ldr	r0, [r7, #4]
 800c116:	f7f8 fe75 	bl	8004e04 <pbuf_free>
        break;
 800c11a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800c11c:	4b0b      	ldr	r3, [pc, #44]	; (800c14c <ip4_input+0x240>)
 800c11e:	2200      	movs	r2, #0
 800c120:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800c122:	4b0a      	ldr	r3, [pc, #40]	; (800c14c <ip4_input+0x240>)
 800c124:	2200      	movs	r2, #0
 800c126:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800c128:	4b08      	ldr	r3, [pc, #32]	; (800c14c <ip4_input+0x240>)
 800c12a:	2200      	movs	r2, #0
 800c12c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800c12e:	4b07      	ldr	r3, [pc, #28]	; (800c14c <ip4_input+0x240>)
 800c130:	2200      	movs	r2, #0
 800c132:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800c134:	4b05      	ldr	r3, [pc, #20]	; (800c14c <ip4_input+0x240>)
 800c136:	2200      	movs	r2, #0
 800c138:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800c13a:	4b04      	ldr	r3, [pc, #16]	; (800c14c <ip4_input+0x240>)
 800c13c:	2200      	movs	r2, #0
 800c13e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800c140:	2300      	movs	r3, #0
}
 800c142:	4618      	mov	r0, r3
 800c144:	3718      	adds	r7, #24
 800c146:	46bd      	mov	sp, r7
 800c148:	bd80      	pop	{r7, pc}
 800c14a:	bf00      	nop
 800c14c:	20003348 	.word	0x20003348
 800c150:	20006868 	.word	0x20006868

0800c154 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800c154:	b580      	push	{r7, lr}
 800c156:	b08a      	sub	sp, #40	; 0x28
 800c158:	af04      	add	r7, sp, #16
 800c15a:	60f8      	str	r0, [r7, #12]
 800c15c:	60b9      	str	r1, [r7, #8]
 800c15e:	607a      	str	r2, [r7, #4]
 800c160:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800c162:	68bb      	ldr	r3, [r7, #8]
 800c164:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d009      	beq.n	800c180 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800c16c:	68bb      	ldr	r3, [r7, #8]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d003      	beq.n	800c17a <ip4_output_if+0x26>
 800c172:	68bb      	ldr	r3, [r7, #8]
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	2b00      	cmp	r3, #0
 800c178:	d102      	bne.n	800c180 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800c17a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c17c:	3304      	adds	r3, #4
 800c17e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800c180:	78fa      	ldrb	r2, [r7, #3]
 800c182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c184:	9302      	str	r3, [sp, #8]
 800c186:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c18a:	9301      	str	r3, [sp, #4]
 800c18c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c190:	9300      	str	r3, [sp, #0]
 800c192:	4613      	mov	r3, r2
 800c194:	687a      	ldr	r2, [r7, #4]
 800c196:	6979      	ldr	r1, [r7, #20]
 800c198:	68f8      	ldr	r0, [r7, #12]
 800c19a:	f000 f805 	bl	800c1a8 <ip4_output_if_src>
 800c19e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800c1a0:	4618      	mov	r0, r3
 800c1a2:	3718      	adds	r7, #24
 800c1a4:	46bd      	mov	sp, r7
 800c1a6:	bd80      	pop	{r7, pc}

0800c1a8 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800c1a8:	b580      	push	{r7, lr}
 800c1aa:	b088      	sub	sp, #32
 800c1ac:	af00      	add	r7, sp, #0
 800c1ae:	60f8      	str	r0, [r7, #12]
 800c1b0:	60b9      	str	r1, [r7, #8]
 800c1b2:	607a      	str	r2, [r7, #4]
 800c1b4:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	7b9b      	ldrb	r3, [r3, #14]
 800c1ba:	2b01      	cmp	r3, #1
 800c1bc:	d006      	beq.n	800c1cc <ip4_output_if_src+0x24>
 800c1be:	4b4b      	ldr	r3, [pc, #300]	; (800c2ec <ip4_output_if_src+0x144>)
 800c1c0:	f44f 7255 	mov.w	r2, #852	; 0x354
 800c1c4:	494a      	ldr	r1, [pc, #296]	; (800c2f0 <ip4_output_if_src+0x148>)
 800c1c6:	484b      	ldr	r0, [pc, #300]	; (800c2f4 <ip4_output_if_src+0x14c>)
 800c1c8:	f001 f84e 	bl	800d268 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d060      	beq.n	800c294 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800c1d2:	2314      	movs	r3, #20
 800c1d4:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800c1d6:	2114      	movs	r1, #20
 800c1d8:	68f8      	ldr	r0, [r7, #12]
 800c1da:	f7f8 fd7d 	bl	8004cd8 <pbuf_add_header>
 800c1de:	4603      	mov	r3, r0
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d002      	beq.n	800c1ea <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800c1e4:	f06f 0301 	mvn.w	r3, #1
 800c1e8:	e07c      	b.n	800c2e4 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	685b      	ldr	r3, [r3, #4]
 800c1ee:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	895b      	ldrh	r3, [r3, #10]
 800c1f4:	2b13      	cmp	r3, #19
 800c1f6:	d806      	bhi.n	800c206 <ip4_output_if_src+0x5e>
 800c1f8:	4b3c      	ldr	r3, [pc, #240]	; (800c2ec <ip4_output_if_src+0x144>)
 800c1fa:	f44f 7262 	mov.w	r2, #904	; 0x388
 800c1fe:	493e      	ldr	r1, [pc, #248]	; (800c2f8 <ip4_output_if_src+0x150>)
 800c200:	483c      	ldr	r0, [pc, #240]	; (800c2f4 <ip4_output_if_src+0x14c>)
 800c202:	f001 f831 	bl	800d268 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800c206:	69fb      	ldr	r3, [r7, #28]
 800c208:	78fa      	ldrb	r2, [r7, #3]
 800c20a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800c20c:	69fb      	ldr	r3, [r7, #28]
 800c20e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800c212:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	681a      	ldr	r2, [r3, #0]
 800c218:	69fb      	ldr	r3, [r7, #28]
 800c21a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800c21c:	8b7b      	ldrh	r3, [r7, #26]
 800c21e:	089b      	lsrs	r3, r3, #2
 800c220:	b29b      	uxth	r3, r3
 800c222:	b2db      	uxtb	r3, r3
 800c224:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c228:	b2da      	uxtb	r2, r3
 800c22a:	69fb      	ldr	r3, [r7, #28]
 800c22c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800c22e:	69fb      	ldr	r3, [r7, #28]
 800c230:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800c234:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	891b      	ldrh	r3, [r3, #8]
 800c23a:	4618      	mov	r0, r3
 800c23c:	f7f7 fb5c 	bl	80038f8 <lwip_htons>
 800c240:	4603      	mov	r3, r0
 800c242:	461a      	mov	r2, r3
 800c244:	69fb      	ldr	r3, [r7, #28]
 800c246:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800c248:	69fb      	ldr	r3, [r7, #28]
 800c24a:	2200      	movs	r2, #0
 800c24c:	719a      	strb	r2, [r3, #6]
 800c24e:	2200      	movs	r2, #0
 800c250:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800c252:	4b2a      	ldr	r3, [pc, #168]	; (800c2fc <ip4_output_if_src+0x154>)
 800c254:	881b      	ldrh	r3, [r3, #0]
 800c256:	4618      	mov	r0, r3
 800c258:	f7f7 fb4e 	bl	80038f8 <lwip_htons>
 800c25c:	4603      	mov	r3, r0
 800c25e:	461a      	mov	r2, r3
 800c260:	69fb      	ldr	r3, [r7, #28]
 800c262:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800c264:	4b25      	ldr	r3, [pc, #148]	; (800c2fc <ip4_output_if_src+0x154>)
 800c266:	881b      	ldrh	r3, [r3, #0]
 800c268:	3301      	adds	r3, #1
 800c26a:	b29a      	uxth	r2, r3
 800c26c:	4b23      	ldr	r3, [pc, #140]	; (800c2fc <ip4_output_if_src+0x154>)
 800c26e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800c270:	68bb      	ldr	r3, [r7, #8]
 800c272:	2b00      	cmp	r3, #0
 800c274:	d104      	bne.n	800c280 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800c276:	4b22      	ldr	r3, [pc, #136]	; (800c300 <ip4_output_if_src+0x158>)
 800c278:	681a      	ldr	r2, [r3, #0]
 800c27a:	69fb      	ldr	r3, [r7, #28]
 800c27c:	60da      	str	r2, [r3, #12]
 800c27e:	e003      	b.n	800c288 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800c280:	68bb      	ldr	r3, [r7, #8]
 800c282:	681a      	ldr	r2, [r3, #0]
 800c284:	69fb      	ldr	r3, [r7, #28]
 800c286:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800c288:	69fb      	ldr	r3, [r7, #28]
 800c28a:	2200      	movs	r2, #0
 800c28c:	729a      	strb	r2, [r3, #10]
 800c28e:	2200      	movs	r2, #0
 800c290:	72da      	strb	r2, [r3, #11]
 800c292:	e00f      	b.n	800c2b4 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	895b      	ldrh	r3, [r3, #10]
 800c298:	2b13      	cmp	r3, #19
 800c29a:	d802      	bhi.n	800c2a2 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800c29c:	f06f 0301 	mvn.w	r3, #1
 800c2a0:	e020      	b.n	800c2e4 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	685b      	ldr	r3, [r3, #4]
 800c2a6:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800c2a8:	69fb      	ldr	r3, [r7, #28]
 800c2aa:	691b      	ldr	r3, [r3, #16]
 800c2ac:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800c2ae:	f107 0314 	add.w	r3, r7, #20
 800c2b2:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800c2b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2b6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d00c      	beq.n	800c2d6 <ip4_output_if_src+0x12e>
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	891a      	ldrh	r2, [r3, #8]
 800c2c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2c2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c2c4:	429a      	cmp	r2, r3
 800c2c6:	d906      	bls.n	800c2d6 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800c2c8:	687a      	ldr	r2, [r7, #4]
 800c2ca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c2cc:	68f8      	ldr	r0, [r7, #12]
 800c2ce:	f000 fd4d 	bl	800cd6c <ip4_frag>
 800c2d2:	4603      	mov	r3, r0
 800c2d4:	e006      	b.n	800c2e4 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800c2d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2d8:	695b      	ldr	r3, [r3, #20]
 800c2da:	687a      	ldr	r2, [r7, #4]
 800c2dc:	68f9      	ldr	r1, [r7, #12]
 800c2de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c2e0:	4798      	blx	r3
 800c2e2:	4603      	mov	r3, r0
}
 800c2e4:	4618      	mov	r0, r3
 800c2e6:	3720      	adds	r7, #32
 800c2e8:	46bd      	mov	sp, r7
 800c2ea:	bd80      	pop	{r7, pc}
 800c2ec:	08010c38 	.word	0x08010c38
 800c2f0:	08010c6c 	.word	0x08010c6c
 800c2f4:	08010c78 	.word	0x08010c78
 800c2f8:	08010ca0 	.word	0x08010ca0
 800c2fc:	200001fe 	.word	0x200001fe
 800c300:	0801106c 	.word	0x0801106c

0800c304 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800c304:	b480      	push	{r7}
 800c306:	b085      	sub	sp, #20
 800c308:	af00      	add	r7, sp, #0
 800c30a:	6078      	str	r0, [r7, #4]
 800c30c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c318:	d002      	beq.n	800c320 <ip4_addr_isbroadcast_u32+0x1c>
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d101      	bne.n	800c324 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800c320:	2301      	movs	r3, #1
 800c322:	e02a      	b.n	800c37a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800c324:	683b      	ldr	r3, [r7, #0]
 800c326:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c32a:	f003 0302 	and.w	r3, r3, #2
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d101      	bne.n	800c336 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800c332:	2300      	movs	r3, #0
 800c334:	e021      	b.n	800c37a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800c336:	683b      	ldr	r3, [r7, #0]
 800c338:	3304      	adds	r3, #4
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	687a      	ldr	r2, [r7, #4]
 800c33e:	429a      	cmp	r2, r3
 800c340:	d101      	bne.n	800c346 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800c342:	2300      	movs	r3, #0
 800c344:	e019      	b.n	800c37a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800c346:	68fa      	ldr	r2, [r7, #12]
 800c348:	683b      	ldr	r3, [r7, #0]
 800c34a:	3304      	adds	r3, #4
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	405a      	eors	r2, r3
 800c350:	683b      	ldr	r3, [r7, #0]
 800c352:	3308      	adds	r3, #8
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	4013      	ands	r3, r2
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d10d      	bne.n	800c378 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800c35c:	683b      	ldr	r3, [r7, #0]
 800c35e:	3308      	adds	r3, #8
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	43da      	mvns	r2, r3
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800c368:	683b      	ldr	r3, [r7, #0]
 800c36a:	3308      	adds	r3, #8
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800c370:	429a      	cmp	r2, r3
 800c372:	d101      	bne.n	800c378 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800c374:	2301      	movs	r3, #1
 800c376:	e000      	b.n	800c37a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800c378:	2300      	movs	r3, #0
  }
}
 800c37a:	4618      	mov	r0, r3
 800c37c:	3714      	adds	r7, #20
 800c37e:	46bd      	mov	sp, r7
 800c380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c384:	4770      	bx	lr
	...

0800c388 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800c388:	b580      	push	{r7, lr}
 800c38a:	b084      	sub	sp, #16
 800c38c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800c38e:	2300      	movs	r3, #0
 800c390:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800c392:	4b12      	ldr	r3, [pc, #72]	; (800c3dc <ip_reass_tmr+0x54>)
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800c398:	e018      	b.n	800c3cc <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	7fdb      	ldrb	r3, [r3, #31]
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d00b      	beq.n	800c3ba <ip_reass_tmr+0x32>
      r->timer--;
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	7fdb      	ldrb	r3, [r3, #31]
 800c3a6:	3b01      	subs	r3, #1
 800c3a8:	b2da      	uxtb	r2, r3
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	60fb      	str	r3, [r7, #12]
 800c3b8:	e008      	b.n	800c3cc <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800c3c4:	68b9      	ldr	r1, [r7, #8]
 800c3c6:	6878      	ldr	r0, [r7, #4]
 800c3c8:	f000 f80a 	bl	800c3e0 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d1e3      	bne.n	800c39a <ip_reass_tmr+0x12>
    }
  }
}
 800c3d2:	bf00      	nop
 800c3d4:	bf00      	nop
 800c3d6:	3710      	adds	r7, #16
 800c3d8:	46bd      	mov	sp, r7
 800c3da:	bd80      	pop	{r7, pc}
 800c3dc:	20000200 	.word	0x20000200

0800c3e0 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800c3e0:	b580      	push	{r7, lr}
 800c3e2:	b088      	sub	sp, #32
 800c3e4:	af00      	add	r7, sp, #0
 800c3e6:	6078      	str	r0, [r7, #4]
 800c3e8:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800c3ea:	2300      	movs	r3, #0
 800c3ec:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800c3ee:	683a      	ldr	r2, [r7, #0]
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	429a      	cmp	r2, r3
 800c3f4:	d105      	bne.n	800c402 <ip_reass_free_complete_datagram+0x22>
 800c3f6:	4b45      	ldr	r3, [pc, #276]	; (800c50c <ip_reass_free_complete_datagram+0x12c>)
 800c3f8:	22ab      	movs	r2, #171	; 0xab
 800c3fa:	4945      	ldr	r1, [pc, #276]	; (800c510 <ip_reass_free_complete_datagram+0x130>)
 800c3fc:	4845      	ldr	r0, [pc, #276]	; (800c514 <ip_reass_free_complete_datagram+0x134>)
 800c3fe:	f000 ff33 	bl	800d268 <iprintf>
  if (prev != NULL) {
 800c402:	683b      	ldr	r3, [r7, #0]
 800c404:	2b00      	cmp	r3, #0
 800c406:	d00a      	beq.n	800c41e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800c408:	683b      	ldr	r3, [r7, #0]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	687a      	ldr	r2, [r7, #4]
 800c40e:	429a      	cmp	r2, r3
 800c410:	d005      	beq.n	800c41e <ip_reass_free_complete_datagram+0x3e>
 800c412:	4b3e      	ldr	r3, [pc, #248]	; (800c50c <ip_reass_free_complete_datagram+0x12c>)
 800c414:	22ad      	movs	r2, #173	; 0xad
 800c416:	4940      	ldr	r1, [pc, #256]	; (800c518 <ip_reass_free_complete_datagram+0x138>)
 800c418:	483e      	ldr	r0, [pc, #248]	; (800c514 <ip_reass_free_complete_datagram+0x134>)
 800c41a:	f000 ff25 	bl	800d268 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	685b      	ldr	r3, [r3, #4]
 800c422:	685b      	ldr	r3, [r3, #4]
 800c424:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800c426:	697b      	ldr	r3, [r7, #20]
 800c428:	889b      	ldrh	r3, [r3, #4]
 800c42a:	b29b      	uxth	r3, r3
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d12a      	bne.n	800c486 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	685b      	ldr	r3, [r3, #4]
 800c434:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800c436:	697b      	ldr	r3, [r7, #20]
 800c438:	681a      	ldr	r2, [r3, #0]
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800c43e:	69bb      	ldr	r3, [r7, #24]
 800c440:	6858      	ldr	r0, [r3, #4]
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	3308      	adds	r3, #8
 800c446:	2214      	movs	r2, #20
 800c448:	4619      	mov	r1, r3
 800c44a:	f000 fedd 	bl	800d208 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800c44e:	2101      	movs	r1, #1
 800c450:	69b8      	ldr	r0, [r7, #24]
 800c452:	f7ff fc47 	bl	800bce4 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800c456:	69b8      	ldr	r0, [r7, #24]
 800c458:	f7f8 fd5c 	bl	8004f14 <pbuf_clen>
 800c45c:	4603      	mov	r3, r0
 800c45e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800c460:	8bfa      	ldrh	r2, [r7, #30]
 800c462:	8a7b      	ldrh	r3, [r7, #18]
 800c464:	4413      	add	r3, r2
 800c466:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c46a:	db05      	blt.n	800c478 <ip_reass_free_complete_datagram+0x98>
 800c46c:	4b27      	ldr	r3, [pc, #156]	; (800c50c <ip_reass_free_complete_datagram+0x12c>)
 800c46e:	22bc      	movs	r2, #188	; 0xbc
 800c470:	492a      	ldr	r1, [pc, #168]	; (800c51c <ip_reass_free_complete_datagram+0x13c>)
 800c472:	4828      	ldr	r0, [pc, #160]	; (800c514 <ip_reass_free_complete_datagram+0x134>)
 800c474:	f000 fef8 	bl	800d268 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800c478:	8bfa      	ldrh	r2, [r7, #30]
 800c47a:	8a7b      	ldrh	r3, [r7, #18]
 800c47c:	4413      	add	r3, r2
 800c47e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800c480:	69b8      	ldr	r0, [r7, #24]
 800c482:	f7f8 fcbf 	bl	8004e04 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	685b      	ldr	r3, [r3, #4]
 800c48a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800c48c:	e01f      	b.n	800c4ce <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800c48e:	69bb      	ldr	r3, [r7, #24]
 800c490:	685b      	ldr	r3, [r3, #4]
 800c492:	617b      	str	r3, [r7, #20]
    pcur = p;
 800c494:	69bb      	ldr	r3, [r7, #24]
 800c496:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800c498:	697b      	ldr	r3, [r7, #20]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800c49e:	68f8      	ldr	r0, [r7, #12]
 800c4a0:	f7f8 fd38 	bl	8004f14 <pbuf_clen>
 800c4a4:	4603      	mov	r3, r0
 800c4a6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800c4a8:	8bfa      	ldrh	r2, [r7, #30]
 800c4aa:	8a7b      	ldrh	r3, [r7, #18]
 800c4ac:	4413      	add	r3, r2
 800c4ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c4b2:	db05      	blt.n	800c4c0 <ip_reass_free_complete_datagram+0xe0>
 800c4b4:	4b15      	ldr	r3, [pc, #84]	; (800c50c <ip_reass_free_complete_datagram+0x12c>)
 800c4b6:	22cc      	movs	r2, #204	; 0xcc
 800c4b8:	4918      	ldr	r1, [pc, #96]	; (800c51c <ip_reass_free_complete_datagram+0x13c>)
 800c4ba:	4816      	ldr	r0, [pc, #88]	; (800c514 <ip_reass_free_complete_datagram+0x134>)
 800c4bc:	f000 fed4 	bl	800d268 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800c4c0:	8bfa      	ldrh	r2, [r7, #30]
 800c4c2:	8a7b      	ldrh	r3, [r7, #18]
 800c4c4:	4413      	add	r3, r2
 800c4c6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800c4c8:	68f8      	ldr	r0, [r7, #12]
 800c4ca:	f7f8 fc9b 	bl	8004e04 <pbuf_free>
  while (p != NULL) {
 800c4ce:	69bb      	ldr	r3, [r7, #24]
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d1dc      	bne.n	800c48e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800c4d4:	6839      	ldr	r1, [r7, #0]
 800c4d6:	6878      	ldr	r0, [r7, #4]
 800c4d8:	f000 f8c2 	bl	800c660 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800c4dc:	4b10      	ldr	r3, [pc, #64]	; (800c520 <ip_reass_free_complete_datagram+0x140>)
 800c4de:	881b      	ldrh	r3, [r3, #0]
 800c4e0:	8bfa      	ldrh	r2, [r7, #30]
 800c4e2:	429a      	cmp	r2, r3
 800c4e4:	d905      	bls.n	800c4f2 <ip_reass_free_complete_datagram+0x112>
 800c4e6:	4b09      	ldr	r3, [pc, #36]	; (800c50c <ip_reass_free_complete_datagram+0x12c>)
 800c4e8:	22d2      	movs	r2, #210	; 0xd2
 800c4ea:	490e      	ldr	r1, [pc, #56]	; (800c524 <ip_reass_free_complete_datagram+0x144>)
 800c4ec:	4809      	ldr	r0, [pc, #36]	; (800c514 <ip_reass_free_complete_datagram+0x134>)
 800c4ee:	f000 febb 	bl	800d268 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800c4f2:	4b0b      	ldr	r3, [pc, #44]	; (800c520 <ip_reass_free_complete_datagram+0x140>)
 800c4f4:	881a      	ldrh	r2, [r3, #0]
 800c4f6:	8bfb      	ldrh	r3, [r7, #30]
 800c4f8:	1ad3      	subs	r3, r2, r3
 800c4fa:	b29a      	uxth	r2, r3
 800c4fc:	4b08      	ldr	r3, [pc, #32]	; (800c520 <ip_reass_free_complete_datagram+0x140>)
 800c4fe:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800c500:	8bfb      	ldrh	r3, [r7, #30]
}
 800c502:	4618      	mov	r0, r3
 800c504:	3720      	adds	r7, #32
 800c506:	46bd      	mov	sp, r7
 800c508:	bd80      	pop	{r7, pc}
 800c50a:	bf00      	nop
 800c50c:	08010cd0 	.word	0x08010cd0
 800c510:	08010d0c 	.word	0x08010d0c
 800c514:	08010d18 	.word	0x08010d18
 800c518:	08010d40 	.word	0x08010d40
 800c51c:	08010d54 	.word	0x08010d54
 800c520:	20000204 	.word	0x20000204
 800c524:	08010d74 	.word	0x08010d74

0800c528 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800c528:	b580      	push	{r7, lr}
 800c52a:	b08a      	sub	sp, #40	; 0x28
 800c52c:	af00      	add	r7, sp, #0
 800c52e:	6078      	str	r0, [r7, #4]
 800c530:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800c532:	2300      	movs	r3, #0
 800c534:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800c536:	2300      	movs	r3, #0
 800c538:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800c53a:	2300      	movs	r3, #0
 800c53c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800c53e:	2300      	movs	r3, #0
 800c540:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800c542:	2300      	movs	r3, #0
 800c544:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800c546:	4b28      	ldr	r3, [pc, #160]	; (800c5e8 <ip_reass_remove_oldest_datagram+0xc0>)
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800c54c:	e030      	b.n	800c5b0 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800c54e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c550:	695a      	ldr	r2, [r3, #20]
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	68db      	ldr	r3, [r3, #12]
 800c556:	429a      	cmp	r2, r3
 800c558:	d10c      	bne.n	800c574 <ip_reass_remove_oldest_datagram+0x4c>
 800c55a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c55c:	699a      	ldr	r2, [r3, #24]
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	691b      	ldr	r3, [r3, #16]
 800c562:	429a      	cmp	r2, r3
 800c564:	d106      	bne.n	800c574 <ip_reass_remove_oldest_datagram+0x4c>
 800c566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c568:	899a      	ldrh	r2, [r3, #12]
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	889b      	ldrh	r3, [r3, #4]
 800c56e:	b29b      	uxth	r3, r3
 800c570:	429a      	cmp	r2, r3
 800c572:	d014      	beq.n	800c59e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800c574:	693b      	ldr	r3, [r7, #16]
 800c576:	3301      	adds	r3, #1
 800c578:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800c57a:	6a3b      	ldr	r3, [r7, #32]
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d104      	bne.n	800c58a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800c580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c582:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800c584:	69fb      	ldr	r3, [r7, #28]
 800c586:	61bb      	str	r3, [r7, #24]
 800c588:	e009      	b.n	800c59e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800c58a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c58c:	7fda      	ldrb	r2, [r3, #31]
 800c58e:	6a3b      	ldr	r3, [r7, #32]
 800c590:	7fdb      	ldrb	r3, [r3, #31]
 800c592:	429a      	cmp	r2, r3
 800c594:	d803      	bhi.n	800c59e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800c596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c598:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800c59a:	69fb      	ldr	r3, [r7, #28]
 800c59c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800c59e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d001      	beq.n	800c5aa <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800c5a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5a8:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800c5aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800c5b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d1cb      	bne.n	800c54e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800c5b6:	6a3b      	ldr	r3, [r7, #32]
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d008      	beq.n	800c5ce <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800c5bc:	69b9      	ldr	r1, [r7, #24]
 800c5be:	6a38      	ldr	r0, [r7, #32]
 800c5c0:	f7ff ff0e 	bl	800c3e0 <ip_reass_free_complete_datagram>
 800c5c4:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800c5c6:	697a      	ldr	r2, [r7, #20]
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	4413      	add	r3, r2
 800c5cc:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800c5ce:	697a      	ldr	r2, [r7, #20]
 800c5d0:	683b      	ldr	r3, [r7, #0]
 800c5d2:	429a      	cmp	r2, r3
 800c5d4:	da02      	bge.n	800c5dc <ip_reass_remove_oldest_datagram+0xb4>
 800c5d6:	693b      	ldr	r3, [r7, #16]
 800c5d8:	2b01      	cmp	r3, #1
 800c5da:	dcac      	bgt.n	800c536 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800c5dc:	697b      	ldr	r3, [r7, #20]
}
 800c5de:	4618      	mov	r0, r3
 800c5e0:	3728      	adds	r7, #40	; 0x28
 800c5e2:	46bd      	mov	sp, r7
 800c5e4:	bd80      	pop	{r7, pc}
 800c5e6:	bf00      	nop
 800c5e8:	20000200 	.word	0x20000200

0800c5ec <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800c5ec:	b580      	push	{r7, lr}
 800c5ee:	b084      	sub	sp, #16
 800c5f0:	af00      	add	r7, sp, #0
 800c5f2:	6078      	str	r0, [r7, #4]
 800c5f4:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800c5f6:	2004      	movs	r0, #4
 800c5f8:	f7f7 fdd4 	bl	80041a4 <memp_malloc>
 800c5fc:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	2b00      	cmp	r3, #0
 800c602:	d110      	bne.n	800c626 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800c604:	6839      	ldr	r1, [r7, #0]
 800c606:	6878      	ldr	r0, [r7, #4]
 800c608:	f7ff ff8e 	bl	800c528 <ip_reass_remove_oldest_datagram>
 800c60c:	4602      	mov	r2, r0
 800c60e:	683b      	ldr	r3, [r7, #0]
 800c610:	4293      	cmp	r3, r2
 800c612:	dc03      	bgt.n	800c61c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800c614:	2004      	movs	r0, #4
 800c616:	f7f7 fdc5 	bl	80041a4 <memp_malloc>
 800c61a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d101      	bne.n	800c626 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800c622:	2300      	movs	r3, #0
 800c624:	e016      	b.n	800c654 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800c626:	2220      	movs	r2, #32
 800c628:	2100      	movs	r1, #0
 800c62a:	68f8      	ldr	r0, [r7, #12]
 800c62c:	f000 fe14 	bl	800d258 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	220f      	movs	r2, #15
 800c634:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800c636:	4b09      	ldr	r3, [pc, #36]	; (800c65c <ip_reass_enqueue_new_datagram+0x70>)
 800c638:	681a      	ldr	r2, [r3, #0]
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800c63e:	4a07      	ldr	r2, [pc, #28]	; (800c65c <ip_reass_enqueue_new_datagram+0x70>)
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	3308      	adds	r3, #8
 800c648:	2214      	movs	r2, #20
 800c64a:	6879      	ldr	r1, [r7, #4]
 800c64c:	4618      	mov	r0, r3
 800c64e:	f000 fddb 	bl	800d208 <memcpy>
  return ipr;
 800c652:	68fb      	ldr	r3, [r7, #12]
}
 800c654:	4618      	mov	r0, r3
 800c656:	3710      	adds	r7, #16
 800c658:	46bd      	mov	sp, r7
 800c65a:	bd80      	pop	{r7, pc}
 800c65c:	20000200 	.word	0x20000200

0800c660 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800c660:	b580      	push	{r7, lr}
 800c662:	b082      	sub	sp, #8
 800c664:	af00      	add	r7, sp, #0
 800c666:	6078      	str	r0, [r7, #4]
 800c668:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800c66a:	4b10      	ldr	r3, [pc, #64]	; (800c6ac <ip_reass_dequeue_datagram+0x4c>)
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	687a      	ldr	r2, [r7, #4]
 800c670:	429a      	cmp	r2, r3
 800c672:	d104      	bne.n	800c67e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	4a0c      	ldr	r2, [pc, #48]	; (800c6ac <ip_reass_dequeue_datagram+0x4c>)
 800c67a:	6013      	str	r3, [r2, #0]
 800c67c:	e00d      	b.n	800c69a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800c67e:	683b      	ldr	r3, [r7, #0]
 800c680:	2b00      	cmp	r3, #0
 800c682:	d106      	bne.n	800c692 <ip_reass_dequeue_datagram+0x32>
 800c684:	4b0a      	ldr	r3, [pc, #40]	; (800c6b0 <ip_reass_dequeue_datagram+0x50>)
 800c686:	f240 1245 	movw	r2, #325	; 0x145
 800c68a:	490a      	ldr	r1, [pc, #40]	; (800c6b4 <ip_reass_dequeue_datagram+0x54>)
 800c68c:	480a      	ldr	r0, [pc, #40]	; (800c6b8 <ip_reass_dequeue_datagram+0x58>)
 800c68e:	f000 fdeb 	bl	800d268 <iprintf>
    prev->next = ipr->next;
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	681a      	ldr	r2, [r3, #0]
 800c696:	683b      	ldr	r3, [r7, #0]
 800c698:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800c69a:	6879      	ldr	r1, [r7, #4]
 800c69c:	2004      	movs	r0, #4
 800c69e:	f7f7 fdcd 	bl	800423c <memp_free>
}
 800c6a2:	bf00      	nop
 800c6a4:	3708      	adds	r7, #8
 800c6a6:	46bd      	mov	sp, r7
 800c6a8:	bd80      	pop	{r7, pc}
 800c6aa:	bf00      	nop
 800c6ac:	20000200 	.word	0x20000200
 800c6b0:	08010cd0 	.word	0x08010cd0
 800c6b4:	08010d98 	.word	0x08010d98
 800c6b8:	08010d18 	.word	0x08010d18

0800c6bc <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800c6bc:	b580      	push	{r7, lr}
 800c6be:	b08c      	sub	sp, #48	; 0x30
 800c6c0:	af00      	add	r7, sp, #0
 800c6c2:	60f8      	str	r0, [r7, #12]
 800c6c4:	60b9      	str	r1, [r7, #8]
 800c6c6:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800c6c8:	2300      	movs	r3, #0
 800c6ca:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800c6cc:	2301      	movs	r3, #1
 800c6ce:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800c6d0:	68bb      	ldr	r3, [r7, #8]
 800c6d2:	685b      	ldr	r3, [r3, #4]
 800c6d4:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800c6d6:	69fb      	ldr	r3, [r7, #28]
 800c6d8:	885b      	ldrh	r3, [r3, #2]
 800c6da:	b29b      	uxth	r3, r3
 800c6dc:	4618      	mov	r0, r3
 800c6de:	f7f7 f90b 	bl	80038f8 <lwip_htons>
 800c6e2:	4603      	mov	r3, r0
 800c6e4:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800c6e6:	69fb      	ldr	r3, [r7, #28]
 800c6e8:	781b      	ldrb	r3, [r3, #0]
 800c6ea:	f003 030f 	and.w	r3, r3, #15
 800c6ee:	b2db      	uxtb	r3, r3
 800c6f0:	009b      	lsls	r3, r3, #2
 800c6f2:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800c6f4:	7e7b      	ldrb	r3, [r7, #25]
 800c6f6:	b29b      	uxth	r3, r3
 800c6f8:	8b7a      	ldrh	r2, [r7, #26]
 800c6fa:	429a      	cmp	r2, r3
 800c6fc:	d202      	bcs.n	800c704 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800c6fe:	f04f 33ff 	mov.w	r3, #4294967295
 800c702:	e135      	b.n	800c970 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800c704:	7e7b      	ldrb	r3, [r7, #25]
 800c706:	b29b      	uxth	r3, r3
 800c708:	8b7a      	ldrh	r2, [r7, #26]
 800c70a:	1ad3      	subs	r3, r2, r3
 800c70c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800c70e:	69fb      	ldr	r3, [r7, #28]
 800c710:	88db      	ldrh	r3, [r3, #6]
 800c712:	b29b      	uxth	r3, r3
 800c714:	4618      	mov	r0, r3
 800c716:	f7f7 f8ef 	bl	80038f8 <lwip_htons>
 800c71a:	4603      	mov	r3, r0
 800c71c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c720:	b29b      	uxth	r3, r3
 800c722:	00db      	lsls	r3, r3, #3
 800c724:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800c726:	68bb      	ldr	r3, [r7, #8]
 800c728:	685b      	ldr	r3, [r3, #4]
 800c72a:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800c72c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c72e:	2200      	movs	r2, #0
 800c730:	701a      	strb	r2, [r3, #0]
 800c732:	2200      	movs	r2, #0
 800c734:	705a      	strb	r2, [r3, #1]
 800c736:	2200      	movs	r2, #0
 800c738:	709a      	strb	r2, [r3, #2]
 800c73a:	2200      	movs	r2, #0
 800c73c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800c73e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c740:	8afa      	ldrh	r2, [r7, #22]
 800c742:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800c744:	8afa      	ldrh	r2, [r7, #22]
 800c746:	8b7b      	ldrh	r3, [r7, #26]
 800c748:	4413      	add	r3, r2
 800c74a:	b29a      	uxth	r2, r3
 800c74c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c74e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800c750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c752:	88db      	ldrh	r3, [r3, #6]
 800c754:	b29b      	uxth	r3, r3
 800c756:	8afa      	ldrh	r2, [r7, #22]
 800c758:	429a      	cmp	r2, r3
 800c75a:	d902      	bls.n	800c762 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800c75c:	f04f 33ff 	mov.w	r3, #4294967295
 800c760:	e106      	b.n	800c970 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	685b      	ldr	r3, [r3, #4]
 800c766:	627b      	str	r3, [r7, #36]	; 0x24
 800c768:	e068      	b.n	800c83c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800c76a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c76c:	685b      	ldr	r3, [r3, #4]
 800c76e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800c770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c772:	889b      	ldrh	r3, [r3, #4]
 800c774:	b29a      	uxth	r2, r3
 800c776:	693b      	ldr	r3, [r7, #16]
 800c778:	889b      	ldrh	r3, [r3, #4]
 800c77a:	b29b      	uxth	r3, r3
 800c77c:	429a      	cmp	r2, r3
 800c77e:	d235      	bcs.n	800c7ec <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800c780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c782:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c784:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800c786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d020      	beq.n	800c7ce <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800c78c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c78e:	889b      	ldrh	r3, [r3, #4]
 800c790:	b29a      	uxth	r2, r3
 800c792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c794:	88db      	ldrh	r3, [r3, #6]
 800c796:	b29b      	uxth	r3, r3
 800c798:	429a      	cmp	r2, r3
 800c79a:	d307      	bcc.n	800c7ac <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800c79c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c79e:	88db      	ldrh	r3, [r3, #6]
 800c7a0:	b29a      	uxth	r2, r3
 800c7a2:	693b      	ldr	r3, [r7, #16]
 800c7a4:	889b      	ldrh	r3, [r3, #4]
 800c7a6:	b29b      	uxth	r3, r3
 800c7a8:	429a      	cmp	r2, r3
 800c7aa:	d902      	bls.n	800c7b2 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800c7ac:	f04f 33ff 	mov.w	r3, #4294967295
 800c7b0:	e0de      	b.n	800c970 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800c7b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7b4:	68ba      	ldr	r2, [r7, #8]
 800c7b6:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800c7b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7ba:	88db      	ldrh	r3, [r3, #6]
 800c7bc:	b29a      	uxth	r2, r3
 800c7be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7c0:	889b      	ldrh	r3, [r3, #4]
 800c7c2:	b29b      	uxth	r3, r3
 800c7c4:	429a      	cmp	r2, r3
 800c7c6:	d03d      	beq.n	800c844 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800c7c8:	2300      	movs	r3, #0
 800c7ca:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800c7cc:	e03a      	b.n	800c844 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800c7ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7d0:	88db      	ldrh	r3, [r3, #6]
 800c7d2:	b29a      	uxth	r2, r3
 800c7d4:	693b      	ldr	r3, [r7, #16]
 800c7d6:	889b      	ldrh	r3, [r3, #4]
 800c7d8:	b29b      	uxth	r3, r3
 800c7da:	429a      	cmp	r2, r3
 800c7dc:	d902      	bls.n	800c7e4 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800c7de:	f04f 33ff 	mov.w	r3, #4294967295
 800c7e2:	e0c5      	b.n	800c970 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	68ba      	ldr	r2, [r7, #8]
 800c7e8:	605a      	str	r2, [r3, #4]
      break;
 800c7ea:	e02b      	b.n	800c844 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800c7ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7ee:	889b      	ldrh	r3, [r3, #4]
 800c7f0:	b29a      	uxth	r2, r3
 800c7f2:	693b      	ldr	r3, [r7, #16]
 800c7f4:	889b      	ldrh	r3, [r3, #4]
 800c7f6:	b29b      	uxth	r3, r3
 800c7f8:	429a      	cmp	r2, r3
 800c7fa:	d102      	bne.n	800c802 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800c7fc:	f04f 33ff 	mov.w	r3, #4294967295
 800c800:	e0b6      	b.n	800c970 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800c802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c804:	889b      	ldrh	r3, [r3, #4]
 800c806:	b29a      	uxth	r2, r3
 800c808:	693b      	ldr	r3, [r7, #16]
 800c80a:	88db      	ldrh	r3, [r3, #6]
 800c80c:	b29b      	uxth	r3, r3
 800c80e:	429a      	cmp	r2, r3
 800c810:	d202      	bcs.n	800c818 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800c812:	f04f 33ff 	mov.w	r3, #4294967295
 800c816:	e0ab      	b.n	800c970 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800c818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d009      	beq.n	800c832 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800c81e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c820:	88db      	ldrh	r3, [r3, #6]
 800c822:	b29a      	uxth	r2, r3
 800c824:	693b      	ldr	r3, [r7, #16]
 800c826:	889b      	ldrh	r3, [r3, #4]
 800c828:	b29b      	uxth	r3, r3
 800c82a:	429a      	cmp	r2, r3
 800c82c:	d001      	beq.n	800c832 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800c82e:	2300      	movs	r3, #0
 800c830:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800c832:	693b      	ldr	r3, [r7, #16]
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800c838:	693b      	ldr	r3, [r7, #16]
 800c83a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800c83c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d193      	bne.n	800c76a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800c842:	e000      	b.n	800c846 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800c844:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800c846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d12d      	bne.n	800c8a8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800c84c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d01c      	beq.n	800c88c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800c852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c854:	88db      	ldrh	r3, [r3, #6]
 800c856:	b29a      	uxth	r2, r3
 800c858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c85a:	889b      	ldrh	r3, [r3, #4]
 800c85c:	b29b      	uxth	r3, r3
 800c85e:	429a      	cmp	r2, r3
 800c860:	d906      	bls.n	800c870 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800c862:	4b45      	ldr	r3, [pc, #276]	; (800c978 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800c864:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800c868:	4944      	ldr	r1, [pc, #272]	; (800c97c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800c86a:	4845      	ldr	r0, [pc, #276]	; (800c980 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800c86c:	f000 fcfc 	bl	800d268 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800c870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c872:	68ba      	ldr	r2, [r7, #8]
 800c874:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800c876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c878:	88db      	ldrh	r3, [r3, #6]
 800c87a:	b29a      	uxth	r2, r3
 800c87c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c87e:	889b      	ldrh	r3, [r3, #4]
 800c880:	b29b      	uxth	r3, r3
 800c882:	429a      	cmp	r2, r3
 800c884:	d010      	beq.n	800c8a8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800c886:	2300      	movs	r3, #0
 800c888:	623b      	str	r3, [r7, #32]
 800c88a:	e00d      	b.n	800c8a8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	685b      	ldr	r3, [r3, #4]
 800c890:	2b00      	cmp	r3, #0
 800c892:	d006      	beq.n	800c8a2 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800c894:	4b38      	ldr	r3, [pc, #224]	; (800c978 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800c896:	f44f 72df 	mov.w	r2, #446	; 0x1be
 800c89a:	493a      	ldr	r1, [pc, #232]	; (800c984 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800c89c:	4838      	ldr	r0, [pc, #224]	; (800c980 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800c89e:	f000 fce3 	bl	800d268 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	68ba      	ldr	r2, [r7, #8]
 800c8a6:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d105      	bne.n	800c8ba <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	7f9b      	ldrb	r3, [r3, #30]
 800c8b2:	f003 0301 	and.w	r3, r3, #1
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d059      	beq.n	800c96e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800c8ba:	6a3b      	ldr	r3, [r7, #32]
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d04f      	beq.n	800c960 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	685b      	ldr	r3, [r3, #4]
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d006      	beq.n	800c8d6 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	685b      	ldr	r3, [r3, #4]
 800c8cc:	685b      	ldr	r3, [r3, #4]
 800c8ce:	889b      	ldrh	r3, [r3, #4]
 800c8d0:	b29b      	uxth	r3, r3
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d002      	beq.n	800c8dc <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800c8d6:	2300      	movs	r3, #0
 800c8d8:	623b      	str	r3, [r7, #32]
 800c8da:	e041      	b.n	800c960 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800c8dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8de:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800c8e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800c8e6:	e012      	b.n	800c90e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800c8e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8ea:	685b      	ldr	r3, [r3, #4]
 800c8ec:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800c8ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8f0:	88db      	ldrh	r3, [r3, #6]
 800c8f2:	b29a      	uxth	r2, r3
 800c8f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8f6:	889b      	ldrh	r3, [r3, #4]
 800c8f8:	b29b      	uxth	r3, r3
 800c8fa:	429a      	cmp	r2, r3
 800c8fc:	d002      	beq.n	800c904 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800c8fe:	2300      	movs	r3, #0
 800c900:	623b      	str	r3, [r7, #32]
            break;
 800c902:	e007      	b.n	800c914 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800c904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c906:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800c908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800c90e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c910:	2b00      	cmp	r3, #0
 800c912:	d1e9      	bne.n	800c8e8 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800c914:	6a3b      	ldr	r3, [r7, #32]
 800c916:	2b00      	cmp	r3, #0
 800c918:	d022      	beq.n	800c960 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	685b      	ldr	r3, [r3, #4]
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d106      	bne.n	800c930 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800c922:	4b15      	ldr	r3, [pc, #84]	; (800c978 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800c924:	f240 12df 	movw	r2, #479	; 0x1df
 800c928:	4917      	ldr	r1, [pc, #92]	; (800c988 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800c92a:	4815      	ldr	r0, [pc, #84]	; (800c980 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800c92c:	f000 fc9c 	bl	800d268 <iprintf>
          LWIP_ASSERT("sanity check",
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	685b      	ldr	r3, [r3, #4]
 800c934:	685b      	ldr	r3, [r3, #4]
 800c936:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c938:	429a      	cmp	r2, r3
 800c93a:	d106      	bne.n	800c94a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800c93c:	4b0e      	ldr	r3, [pc, #56]	; (800c978 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800c93e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800c942:	4911      	ldr	r1, [pc, #68]	; (800c988 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800c944:	480e      	ldr	r0, [pc, #56]	; (800c980 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800c946:	f000 fc8f 	bl	800d268 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800c94a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d006      	beq.n	800c960 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800c952:	4b09      	ldr	r3, [pc, #36]	; (800c978 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800c954:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800c958:	490c      	ldr	r1, [pc, #48]	; (800c98c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800c95a:	4809      	ldr	r0, [pc, #36]	; (800c980 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800c95c:	f000 fc84 	bl	800d268 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800c960:	6a3b      	ldr	r3, [r7, #32]
 800c962:	2b00      	cmp	r3, #0
 800c964:	bf14      	ite	ne
 800c966:	2301      	movne	r3, #1
 800c968:	2300      	moveq	r3, #0
 800c96a:	b2db      	uxtb	r3, r3
 800c96c:	e000      	b.n	800c970 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800c96e:	2300      	movs	r3, #0
}
 800c970:	4618      	mov	r0, r3
 800c972:	3730      	adds	r7, #48	; 0x30
 800c974:	46bd      	mov	sp, r7
 800c976:	bd80      	pop	{r7, pc}
 800c978:	08010cd0 	.word	0x08010cd0
 800c97c:	08010db4 	.word	0x08010db4
 800c980:	08010d18 	.word	0x08010d18
 800c984:	08010dd4 	.word	0x08010dd4
 800c988:	08010e0c 	.word	0x08010e0c
 800c98c:	08010e1c 	.word	0x08010e1c

0800c990 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800c990:	b580      	push	{r7, lr}
 800c992:	b08e      	sub	sp, #56	; 0x38
 800c994:	af00      	add	r7, sp, #0
 800c996:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	685b      	ldr	r3, [r3, #4]
 800c99c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800c99e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9a0:	781b      	ldrb	r3, [r3, #0]
 800c9a2:	f003 030f 	and.w	r3, r3, #15
 800c9a6:	b2db      	uxtb	r3, r3
 800c9a8:	009b      	lsls	r3, r3, #2
 800c9aa:	b2db      	uxtb	r3, r3
 800c9ac:	2b14      	cmp	r3, #20
 800c9ae:	f040 8167 	bne.w	800cc80 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800c9b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9b4:	88db      	ldrh	r3, [r3, #6]
 800c9b6:	b29b      	uxth	r3, r3
 800c9b8:	4618      	mov	r0, r3
 800c9ba:	f7f6 ff9d 	bl	80038f8 <lwip_htons>
 800c9be:	4603      	mov	r3, r0
 800c9c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c9c4:	b29b      	uxth	r3, r3
 800c9c6:	00db      	lsls	r3, r3, #3
 800c9c8:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800c9ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9cc:	885b      	ldrh	r3, [r3, #2]
 800c9ce:	b29b      	uxth	r3, r3
 800c9d0:	4618      	mov	r0, r3
 800c9d2:	f7f6 ff91 	bl	80038f8 <lwip_htons>
 800c9d6:	4603      	mov	r3, r0
 800c9d8:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800c9da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9dc:	781b      	ldrb	r3, [r3, #0]
 800c9de:	f003 030f 	and.w	r3, r3, #15
 800c9e2:	b2db      	uxtb	r3, r3
 800c9e4:	009b      	lsls	r3, r3, #2
 800c9e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800c9ea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c9ee:	b29b      	uxth	r3, r3
 800c9f0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c9f2:	429a      	cmp	r2, r3
 800c9f4:	f0c0 8146 	bcc.w	800cc84 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800c9f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c9fc:	b29b      	uxth	r3, r3
 800c9fe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ca00:	1ad3      	subs	r3, r2, r3
 800ca02:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800ca04:	6878      	ldr	r0, [r7, #4]
 800ca06:	f7f8 fa85 	bl	8004f14 <pbuf_clen>
 800ca0a:	4603      	mov	r3, r0
 800ca0c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800ca0e:	4b9f      	ldr	r3, [pc, #636]	; (800cc8c <ip4_reass+0x2fc>)
 800ca10:	881b      	ldrh	r3, [r3, #0]
 800ca12:	461a      	mov	r2, r3
 800ca14:	8c3b      	ldrh	r3, [r7, #32]
 800ca16:	4413      	add	r3, r2
 800ca18:	2b0a      	cmp	r3, #10
 800ca1a:	dd10      	ble.n	800ca3e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800ca1c:	8c3b      	ldrh	r3, [r7, #32]
 800ca1e:	4619      	mov	r1, r3
 800ca20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ca22:	f7ff fd81 	bl	800c528 <ip_reass_remove_oldest_datagram>
 800ca26:	4603      	mov	r3, r0
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	f000 812d 	beq.w	800cc88 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800ca2e:	4b97      	ldr	r3, [pc, #604]	; (800cc8c <ip4_reass+0x2fc>)
 800ca30:	881b      	ldrh	r3, [r3, #0]
 800ca32:	461a      	mov	r2, r3
 800ca34:	8c3b      	ldrh	r3, [r7, #32]
 800ca36:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800ca38:	2b0a      	cmp	r3, #10
 800ca3a:	f300 8125 	bgt.w	800cc88 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800ca3e:	4b94      	ldr	r3, [pc, #592]	; (800cc90 <ip4_reass+0x300>)
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	633b      	str	r3, [r7, #48]	; 0x30
 800ca44:	e015      	b.n	800ca72 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800ca46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca48:	695a      	ldr	r2, [r3, #20]
 800ca4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca4c:	68db      	ldr	r3, [r3, #12]
 800ca4e:	429a      	cmp	r2, r3
 800ca50:	d10c      	bne.n	800ca6c <ip4_reass+0xdc>
 800ca52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca54:	699a      	ldr	r2, [r3, #24]
 800ca56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca58:	691b      	ldr	r3, [r3, #16]
 800ca5a:	429a      	cmp	r2, r3
 800ca5c:	d106      	bne.n	800ca6c <ip4_reass+0xdc>
 800ca5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca60:	899a      	ldrh	r2, [r3, #12]
 800ca62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca64:	889b      	ldrh	r3, [r3, #4]
 800ca66:	b29b      	uxth	r3, r3
 800ca68:	429a      	cmp	r2, r3
 800ca6a:	d006      	beq.n	800ca7a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800ca6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	633b      	str	r3, [r7, #48]	; 0x30
 800ca72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d1e6      	bne.n	800ca46 <ip4_reass+0xb6>
 800ca78:	e000      	b.n	800ca7c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800ca7a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800ca7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d109      	bne.n	800ca96 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800ca82:	8c3b      	ldrh	r3, [r7, #32]
 800ca84:	4619      	mov	r1, r3
 800ca86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ca88:	f7ff fdb0 	bl	800c5ec <ip_reass_enqueue_new_datagram>
 800ca8c:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800ca8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d11c      	bne.n	800cace <ip4_reass+0x13e>
      goto nullreturn;
 800ca94:	e109      	b.n	800ccaa <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800ca96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca98:	88db      	ldrh	r3, [r3, #6]
 800ca9a:	b29b      	uxth	r3, r3
 800ca9c:	4618      	mov	r0, r3
 800ca9e:	f7f6 ff2b 	bl	80038f8 <lwip_htons>
 800caa2:	4603      	mov	r3, r0
 800caa4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d110      	bne.n	800cace <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800caac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caae:	89db      	ldrh	r3, [r3, #14]
 800cab0:	4618      	mov	r0, r3
 800cab2:	f7f6 ff21 	bl	80038f8 <lwip_htons>
 800cab6:	4603      	mov	r3, r0
 800cab8:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d006      	beq.n	800cace <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800cac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cac2:	3308      	adds	r3, #8
 800cac4:	2214      	movs	r2, #20
 800cac6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cac8:	4618      	mov	r0, r3
 800caca:	f000 fb9d 	bl	800d208 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800cace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cad0:	88db      	ldrh	r3, [r3, #6]
 800cad2:	b29b      	uxth	r3, r3
 800cad4:	f003 0320 	and.w	r3, r3, #32
 800cad8:	2b00      	cmp	r3, #0
 800cada:	bf0c      	ite	eq
 800cadc:	2301      	moveq	r3, #1
 800cade:	2300      	movne	r3, #0
 800cae0:	b2db      	uxtb	r3, r3
 800cae2:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800cae4:	69fb      	ldr	r3, [r7, #28]
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d00e      	beq.n	800cb08 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800caea:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800caec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800caee:	4413      	add	r3, r2
 800caf0:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800caf2:	8b7a      	ldrh	r2, [r7, #26]
 800caf4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800caf6:	429a      	cmp	r2, r3
 800caf8:	f0c0 80a0 	bcc.w	800cc3c <ip4_reass+0x2ac>
 800cafc:	8b7b      	ldrh	r3, [r7, #26]
 800cafe:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800cb02:	4293      	cmp	r3, r2
 800cb04:	f200 809a 	bhi.w	800cc3c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800cb08:	69fa      	ldr	r2, [r7, #28]
 800cb0a:	6879      	ldr	r1, [r7, #4]
 800cb0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cb0e:	f7ff fdd5 	bl	800c6bc <ip_reass_chain_frag_into_datagram_and_validate>
 800cb12:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800cb14:	697b      	ldr	r3, [r7, #20]
 800cb16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb1a:	f000 8091 	beq.w	800cc40 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800cb1e:	4b5b      	ldr	r3, [pc, #364]	; (800cc8c <ip4_reass+0x2fc>)
 800cb20:	881a      	ldrh	r2, [r3, #0]
 800cb22:	8c3b      	ldrh	r3, [r7, #32]
 800cb24:	4413      	add	r3, r2
 800cb26:	b29a      	uxth	r2, r3
 800cb28:	4b58      	ldr	r3, [pc, #352]	; (800cc8c <ip4_reass+0x2fc>)
 800cb2a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800cb2c:	69fb      	ldr	r3, [r7, #28]
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d00d      	beq.n	800cb4e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800cb32:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800cb34:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cb36:	4413      	add	r3, r2
 800cb38:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800cb3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb3c:	8a7a      	ldrh	r2, [r7, #18]
 800cb3e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800cb40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb42:	7f9b      	ldrb	r3, [r3, #30]
 800cb44:	f043 0301 	orr.w	r3, r3, #1
 800cb48:	b2da      	uxtb	r2, r3
 800cb4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb4c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800cb4e:	697b      	ldr	r3, [r7, #20]
 800cb50:	2b01      	cmp	r3, #1
 800cb52:	d171      	bne.n	800cc38 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800cb54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb56:	8b9b      	ldrh	r3, [r3, #28]
 800cb58:	3314      	adds	r3, #20
 800cb5a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800cb5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb5e:	685b      	ldr	r3, [r3, #4]
 800cb60:	685b      	ldr	r3, [r3, #4]
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800cb66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb68:	685b      	ldr	r3, [r3, #4]
 800cb6a:	685b      	ldr	r3, [r3, #4]
 800cb6c:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800cb6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb70:	3308      	adds	r3, #8
 800cb72:	2214      	movs	r2, #20
 800cb74:	4619      	mov	r1, r3
 800cb76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cb78:	f000 fb46 	bl	800d208 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800cb7c:	8a3b      	ldrh	r3, [r7, #16]
 800cb7e:	4618      	mov	r0, r3
 800cb80:	f7f6 feba 	bl	80038f8 <lwip_htons>
 800cb84:	4603      	mov	r3, r0
 800cb86:	461a      	mov	r2, r3
 800cb88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb8a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800cb8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb8e:	2200      	movs	r2, #0
 800cb90:	719a      	strb	r2, [r3, #6]
 800cb92:	2200      	movs	r2, #0
 800cb94:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800cb96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb98:	2200      	movs	r2, #0
 800cb9a:	729a      	strb	r2, [r3, #10]
 800cb9c:	2200      	movs	r2, #0
 800cb9e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800cba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cba2:	685b      	ldr	r3, [r3, #4]
 800cba4:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800cba6:	e00d      	b.n	800cbc4 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800cba8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbaa:	685b      	ldr	r3, [r3, #4]
 800cbac:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800cbae:	2114      	movs	r1, #20
 800cbb0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800cbb2:	f7f8 f8a1 	bl	8004cf8 <pbuf_remove_header>
      pbuf_cat(p, r);
 800cbb6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800cbb8:	6878      	ldr	r0, [r7, #4]
 800cbba:	f7f8 f9e5 	bl	8004f88 <pbuf_cat>
      r = iprh->next_pbuf;
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800cbc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d1ee      	bne.n	800cba8 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800cbca:	4b31      	ldr	r3, [pc, #196]	; (800cc90 <ip4_reass+0x300>)
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cbd0:	429a      	cmp	r2, r3
 800cbd2:	d102      	bne.n	800cbda <ip4_reass+0x24a>
      ipr_prev = NULL;
 800cbd4:	2300      	movs	r3, #0
 800cbd6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cbd8:	e010      	b.n	800cbfc <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800cbda:	4b2d      	ldr	r3, [pc, #180]	; (800cc90 <ip4_reass+0x300>)
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cbe0:	e007      	b.n	800cbf2 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800cbe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cbe8:	429a      	cmp	r2, r3
 800cbea:	d006      	beq.n	800cbfa <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800cbec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cbf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d1f4      	bne.n	800cbe2 <ip4_reass+0x252>
 800cbf8:	e000      	b.n	800cbfc <ip4_reass+0x26c>
          break;
 800cbfa:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800cbfc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cbfe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cc00:	f7ff fd2e 	bl	800c660 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800cc04:	6878      	ldr	r0, [r7, #4]
 800cc06:	f7f8 f985 	bl	8004f14 <pbuf_clen>
 800cc0a:	4603      	mov	r3, r0
 800cc0c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800cc0e:	4b1f      	ldr	r3, [pc, #124]	; (800cc8c <ip4_reass+0x2fc>)
 800cc10:	881b      	ldrh	r3, [r3, #0]
 800cc12:	8c3a      	ldrh	r2, [r7, #32]
 800cc14:	429a      	cmp	r2, r3
 800cc16:	d906      	bls.n	800cc26 <ip4_reass+0x296>
 800cc18:	4b1e      	ldr	r3, [pc, #120]	; (800cc94 <ip4_reass+0x304>)
 800cc1a:	f240 229b 	movw	r2, #667	; 0x29b
 800cc1e:	491e      	ldr	r1, [pc, #120]	; (800cc98 <ip4_reass+0x308>)
 800cc20:	481e      	ldr	r0, [pc, #120]	; (800cc9c <ip4_reass+0x30c>)
 800cc22:	f000 fb21 	bl	800d268 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800cc26:	4b19      	ldr	r3, [pc, #100]	; (800cc8c <ip4_reass+0x2fc>)
 800cc28:	881a      	ldrh	r2, [r3, #0]
 800cc2a:	8c3b      	ldrh	r3, [r7, #32]
 800cc2c:	1ad3      	subs	r3, r2, r3
 800cc2e:	b29a      	uxth	r2, r3
 800cc30:	4b16      	ldr	r3, [pc, #88]	; (800cc8c <ip4_reass+0x2fc>)
 800cc32:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	e03c      	b.n	800ccb2 <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800cc38:	2300      	movs	r3, #0
 800cc3a:	e03a      	b.n	800ccb2 <ip4_reass+0x322>
      goto nullreturn_ipr;
 800cc3c:	bf00      	nop
 800cc3e:	e000      	b.n	800cc42 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 800cc40:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800cc42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d106      	bne.n	800cc56 <ip4_reass+0x2c6>
 800cc48:	4b12      	ldr	r3, [pc, #72]	; (800cc94 <ip4_reass+0x304>)
 800cc4a:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800cc4e:	4914      	ldr	r1, [pc, #80]	; (800cca0 <ip4_reass+0x310>)
 800cc50:	4812      	ldr	r0, [pc, #72]	; (800cc9c <ip4_reass+0x30c>)
 800cc52:	f000 fb09 	bl	800d268 <iprintf>
  if (ipr->p == NULL) {
 800cc56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc58:	685b      	ldr	r3, [r3, #4]
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d124      	bne.n	800cca8 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800cc5e:	4b0c      	ldr	r3, [pc, #48]	; (800cc90 <ip4_reass+0x300>)
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cc64:	429a      	cmp	r2, r3
 800cc66:	d006      	beq.n	800cc76 <ip4_reass+0x2e6>
 800cc68:	4b0a      	ldr	r3, [pc, #40]	; (800cc94 <ip4_reass+0x304>)
 800cc6a:	f240 22ab 	movw	r2, #683	; 0x2ab
 800cc6e:	490d      	ldr	r1, [pc, #52]	; (800cca4 <ip4_reass+0x314>)
 800cc70:	480a      	ldr	r0, [pc, #40]	; (800cc9c <ip4_reass+0x30c>)
 800cc72:	f000 faf9 	bl	800d268 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800cc76:	2100      	movs	r1, #0
 800cc78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cc7a:	f7ff fcf1 	bl	800c660 <ip_reass_dequeue_datagram>
 800cc7e:	e014      	b.n	800ccaa <ip4_reass+0x31a>
    goto nullreturn;
 800cc80:	bf00      	nop
 800cc82:	e012      	b.n	800ccaa <ip4_reass+0x31a>
    goto nullreturn;
 800cc84:	bf00      	nop
 800cc86:	e010      	b.n	800ccaa <ip4_reass+0x31a>
      goto nullreturn;
 800cc88:	bf00      	nop
 800cc8a:	e00e      	b.n	800ccaa <ip4_reass+0x31a>
 800cc8c:	20000204 	.word	0x20000204
 800cc90:	20000200 	.word	0x20000200
 800cc94:	08010cd0 	.word	0x08010cd0
 800cc98:	08010e40 	.word	0x08010e40
 800cc9c:	08010d18 	.word	0x08010d18
 800cca0:	08010e5c 	.word	0x08010e5c
 800cca4:	08010e68 	.word	0x08010e68
  }

nullreturn:
 800cca8:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800ccaa:	6878      	ldr	r0, [r7, #4]
 800ccac:	f7f8 f8aa 	bl	8004e04 <pbuf_free>
  return NULL;
 800ccb0:	2300      	movs	r3, #0
}
 800ccb2:	4618      	mov	r0, r3
 800ccb4:	3738      	adds	r7, #56	; 0x38
 800ccb6:	46bd      	mov	sp, r7
 800ccb8:	bd80      	pop	{r7, pc}
 800ccba:	bf00      	nop

0800ccbc <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800ccbc:	b580      	push	{r7, lr}
 800ccbe:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800ccc0:	2005      	movs	r0, #5
 800ccc2:	f7f7 fa6f 	bl	80041a4 <memp_malloc>
 800ccc6:	4603      	mov	r3, r0
}
 800ccc8:	4618      	mov	r0, r3
 800ccca:	bd80      	pop	{r7, pc}

0800cccc <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800cccc:	b580      	push	{r7, lr}
 800ccce:	b082      	sub	sp, #8
 800ccd0:	af00      	add	r7, sp, #0
 800ccd2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d106      	bne.n	800cce8 <ip_frag_free_pbuf_custom_ref+0x1c>
 800ccda:	4b07      	ldr	r3, [pc, #28]	; (800ccf8 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800ccdc:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800cce0:	4906      	ldr	r1, [pc, #24]	; (800ccfc <ip_frag_free_pbuf_custom_ref+0x30>)
 800cce2:	4807      	ldr	r0, [pc, #28]	; (800cd00 <ip_frag_free_pbuf_custom_ref+0x34>)
 800cce4:	f000 fac0 	bl	800d268 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800cce8:	6879      	ldr	r1, [r7, #4]
 800ccea:	2005      	movs	r0, #5
 800ccec:	f7f7 faa6 	bl	800423c <memp_free>
}
 800ccf0:	bf00      	nop
 800ccf2:	3708      	adds	r7, #8
 800ccf4:	46bd      	mov	sp, r7
 800ccf6:	bd80      	pop	{r7, pc}
 800ccf8:	08010cd0 	.word	0x08010cd0
 800ccfc:	08010e88 	.word	0x08010e88
 800cd00:	08010d18 	.word	0x08010d18

0800cd04 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800cd04:	b580      	push	{r7, lr}
 800cd06:	b084      	sub	sp, #16
 800cd08:	af00      	add	r7, sp, #0
 800cd0a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d106      	bne.n	800cd24 <ipfrag_free_pbuf_custom+0x20>
 800cd16:	4b11      	ldr	r3, [pc, #68]	; (800cd5c <ipfrag_free_pbuf_custom+0x58>)
 800cd18:	f240 22ce 	movw	r2, #718	; 0x2ce
 800cd1c:	4910      	ldr	r1, [pc, #64]	; (800cd60 <ipfrag_free_pbuf_custom+0x5c>)
 800cd1e:	4811      	ldr	r0, [pc, #68]	; (800cd64 <ipfrag_free_pbuf_custom+0x60>)
 800cd20:	f000 faa2 	bl	800d268 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800cd24:	68fa      	ldr	r2, [r7, #12]
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	429a      	cmp	r2, r3
 800cd2a:	d006      	beq.n	800cd3a <ipfrag_free_pbuf_custom+0x36>
 800cd2c:	4b0b      	ldr	r3, [pc, #44]	; (800cd5c <ipfrag_free_pbuf_custom+0x58>)
 800cd2e:	f240 22cf 	movw	r2, #719	; 0x2cf
 800cd32:	490d      	ldr	r1, [pc, #52]	; (800cd68 <ipfrag_free_pbuf_custom+0x64>)
 800cd34:	480b      	ldr	r0, [pc, #44]	; (800cd64 <ipfrag_free_pbuf_custom+0x60>)
 800cd36:	f000 fa97 	bl	800d268 <iprintf>
  if (pcr->original != NULL) {
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	695b      	ldr	r3, [r3, #20]
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d004      	beq.n	800cd4c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	695b      	ldr	r3, [r3, #20]
 800cd46:	4618      	mov	r0, r3
 800cd48:	f7f8 f85c 	bl	8004e04 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800cd4c:	68f8      	ldr	r0, [r7, #12]
 800cd4e:	f7ff ffbd 	bl	800cccc <ip_frag_free_pbuf_custom_ref>
}
 800cd52:	bf00      	nop
 800cd54:	3710      	adds	r7, #16
 800cd56:	46bd      	mov	sp, r7
 800cd58:	bd80      	pop	{r7, pc}
 800cd5a:	bf00      	nop
 800cd5c:	08010cd0 	.word	0x08010cd0
 800cd60:	08010e94 	.word	0x08010e94
 800cd64:	08010d18 	.word	0x08010d18
 800cd68:	08010ea0 	.word	0x08010ea0

0800cd6c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800cd6c:	b580      	push	{r7, lr}
 800cd6e:	b094      	sub	sp, #80	; 0x50
 800cd70:	af02      	add	r7, sp, #8
 800cd72:	60f8      	str	r0, [r7, #12]
 800cd74:	60b9      	str	r1, [r7, #8]
 800cd76:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800cd78:	2300      	movs	r3, #0
 800cd7a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800cd7e:	68bb      	ldr	r3, [r7, #8]
 800cd80:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800cd82:	3b14      	subs	r3, #20
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	da00      	bge.n	800cd8a <ip4_frag+0x1e>
 800cd88:	3307      	adds	r3, #7
 800cd8a:	10db      	asrs	r3, r3, #3
 800cd8c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800cd8e:	2314      	movs	r3, #20
 800cd90:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	685b      	ldr	r3, [r3, #4]
 800cd96:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 800cd98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd9a:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800cd9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd9e:	781b      	ldrb	r3, [r3, #0]
 800cda0:	f003 030f 	and.w	r3, r3, #15
 800cda4:	b2db      	uxtb	r3, r3
 800cda6:	009b      	lsls	r3, r3, #2
 800cda8:	b2db      	uxtb	r3, r3
 800cdaa:	2b14      	cmp	r3, #20
 800cdac:	d002      	beq.n	800cdb4 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800cdae:	f06f 0305 	mvn.w	r3, #5
 800cdb2:	e110      	b.n	800cfd6 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	895b      	ldrh	r3, [r3, #10]
 800cdb8:	2b13      	cmp	r3, #19
 800cdba:	d809      	bhi.n	800cdd0 <ip4_frag+0x64>
 800cdbc:	4b88      	ldr	r3, [pc, #544]	; (800cfe0 <ip4_frag+0x274>)
 800cdbe:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800cdc2:	4988      	ldr	r1, [pc, #544]	; (800cfe4 <ip4_frag+0x278>)
 800cdc4:	4888      	ldr	r0, [pc, #544]	; (800cfe8 <ip4_frag+0x27c>)
 800cdc6:	f000 fa4f 	bl	800d268 <iprintf>
 800cdca:	f06f 0305 	mvn.w	r3, #5
 800cdce:	e102      	b.n	800cfd6 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800cdd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdd2:	88db      	ldrh	r3, [r3, #6]
 800cdd4:	b29b      	uxth	r3, r3
 800cdd6:	4618      	mov	r0, r3
 800cdd8:	f7f6 fd8e 	bl	80038f8 <lwip_htons>
 800cddc:	4603      	mov	r3, r0
 800cdde:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 800cde0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800cde2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cde6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800cdea:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800cdec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800cdf0:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	891b      	ldrh	r3, [r3, #8]
 800cdf6:	3b14      	subs	r3, #20
 800cdf8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 800cdfc:	e0e1      	b.n	800cfc2 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800cdfe:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ce00:	00db      	lsls	r3, r3, #3
 800ce02:	b29b      	uxth	r3, r3
 800ce04:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ce08:	4293      	cmp	r3, r2
 800ce0a:	bf28      	it	cs
 800ce0c:	4613      	movcs	r3, r2
 800ce0e:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800ce10:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ce14:	2114      	movs	r1, #20
 800ce16:	200e      	movs	r0, #14
 800ce18:	f7f7 fd12 	bl	8004840 <pbuf_alloc>
 800ce1c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 800ce1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	f000 80d5 	beq.w	800cfd0 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800ce26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce28:	895b      	ldrh	r3, [r3, #10]
 800ce2a:	2b13      	cmp	r3, #19
 800ce2c:	d806      	bhi.n	800ce3c <ip4_frag+0xd0>
 800ce2e:	4b6c      	ldr	r3, [pc, #432]	; (800cfe0 <ip4_frag+0x274>)
 800ce30:	f44f 7249 	mov.w	r2, #804	; 0x324
 800ce34:	496d      	ldr	r1, [pc, #436]	; (800cfec <ip4_frag+0x280>)
 800ce36:	486c      	ldr	r0, [pc, #432]	; (800cfe8 <ip4_frag+0x27c>)
 800ce38:	f000 fa16 	bl	800d268 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800ce3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce3e:	685b      	ldr	r3, [r3, #4]
 800ce40:	2214      	movs	r2, #20
 800ce42:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ce44:	4618      	mov	r0, r3
 800ce46:	f000 f9df 	bl	800d208 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800ce4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce4c:	685b      	ldr	r3, [r3, #4]
 800ce4e:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 800ce50:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ce52:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 800ce56:	e064      	b.n	800cf22 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	895a      	ldrh	r2, [r3, #10]
 800ce5c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ce5e:	1ad3      	subs	r3, r2, r3
 800ce60:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	895b      	ldrh	r3, [r3, #10]
 800ce66:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800ce68:	429a      	cmp	r2, r3
 800ce6a:	d906      	bls.n	800ce7a <ip4_frag+0x10e>
 800ce6c:	4b5c      	ldr	r3, [pc, #368]	; (800cfe0 <ip4_frag+0x274>)
 800ce6e:	f240 322d 	movw	r2, #813	; 0x32d
 800ce72:	495f      	ldr	r1, [pc, #380]	; (800cff0 <ip4_frag+0x284>)
 800ce74:	485c      	ldr	r0, [pc, #368]	; (800cfe8 <ip4_frag+0x27c>)
 800ce76:	f000 f9f7 	bl	800d268 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800ce7a:	8bfa      	ldrh	r2, [r7, #30]
 800ce7c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800ce80:	4293      	cmp	r3, r2
 800ce82:	bf28      	it	cs
 800ce84:	4613      	movcs	r3, r2
 800ce86:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800ce8a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d105      	bne.n	800ce9e <ip4_frag+0x132>
        poff = 0;
 800ce92:	2300      	movs	r3, #0
 800ce94:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	60fb      	str	r3, [r7, #12]
        continue;
 800ce9c:	e041      	b.n	800cf22 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800ce9e:	f7ff ff0d 	bl	800ccbc <ip_frag_alloc_pbuf_custom_ref>
 800cea2:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800cea4:	69bb      	ldr	r3, [r7, #24]
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d103      	bne.n	800ceb2 <ip4_frag+0x146>
        pbuf_free(rambuf);
 800ceaa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ceac:	f7f7 ffaa 	bl	8004e04 <pbuf_free>
        goto memerr;
 800ceb0:	e08f      	b.n	800cfd2 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800ceb2:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800ceb8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ceba:	4413      	add	r3, r2
 800cebc:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 800cec0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800cec4:	9201      	str	r2, [sp, #4]
 800cec6:	9300      	str	r3, [sp, #0]
 800cec8:	4603      	mov	r3, r0
 800ceca:	2241      	movs	r2, #65	; 0x41
 800cecc:	2000      	movs	r0, #0
 800cece:	f7f7 fddf 	bl	8004a90 <pbuf_alloced_custom>
 800ced2:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800ced4:	697b      	ldr	r3, [r7, #20]
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d106      	bne.n	800cee8 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800ceda:	69b8      	ldr	r0, [r7, #24]
 800cedc:	f7ff fef6 	bl	800cccc <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800cee0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cee2:	f7f7 ff8f 	bl	8004e04 <pbuf_free>
        goto memerr;
 800cee6:	e074      	b.n	800cfd2 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800cee8:	68f8      	ldr	r0, [r7, #12]
 800ceea:	f7f8 f82b 	bl	8004f44 <pbuf_ref>
      pcr->original = p;
 800ceee:	69bb      	ldr	r3, [r7, #24]
 800cef0:	68fa      	ldr	r2, [r7, #12]
 800cef2:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800cef4:	69bb      	ldr	r3, [r7, #24]
 800cef6:	4a3f      	ldr	r2, [pc, #252]	; (800cff4 <ip4_frag+0x288>)
 800cef8:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800cefa:	6979      	ldr	r1, [r7, #20]
 800cefc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cefe:	f7f8 f843 	bl	8004f88 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800cf02:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800cf06:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800cf0a:	1ad3      	subs	r3, r2, r3
 800cf0c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 800cf10:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d004      	beq.n	800cf22 <ip4_frag+0x1b6>
        poff = 0;
 800cf18:	2300      	movs	r3, #0
 800cf1a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800cf22:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d196      	bne.n	800ce58 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800cf2a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800cf2c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800cf30:	4413      	add	r3, r2
 800cf32:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800cf34:	68bb      	ldr	r3, [r7, #8]
 800cf36:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800cf38:	f1a3 0213 	sub.w	r2, r3, #19
 800cf3c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800cf40:	429a      	cmp	r2, r3
 800cf42:	bfcc      	ite	gt
 800cf44:	2301      	movgt	r3, #1
 800cf46:	2300      	movle	r3, #0
 800cf48:	b2db      	uxtb	r3, r3
 800cf4a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800cf4c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800cf50:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cf54:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 800cf56:	6a3b      	ldr	r3, [r7, #32]
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d002      	beq.n	800cf62 <ip4_frag+0x1f6>
 800cf5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d003      	beq.n	800cf6a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800cf62:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800cf64:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800cf68:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800cf6a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800cf6c:	4618      	mov	r0, r3
 800cf6e:	f7f6 fcc3 	bl	80038f8 <lwip_htons>
 800cf72:	4603      	mov	r3, r0
 800cf74:	461a      	mov	r2, r3
 800cf76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf78:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800cf7a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800cf7c:	3314      	adds	r3, #20
 800cf7e:	b29b      	uxth	r3, r3
 800cf80:	4618      	mov	r0, r3
 800cf82:	f7f6 fcb9 	bl	80038f8 <lwip_htons>
 800cf86:	4603      	mov	r3, r0
 800cf88:	461a      	mov	r2, r3
 800cf8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf8c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800cf8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf90:	2200      	movs	r2, #0
 800cf92:	729a      	strb	r2, [r3, #10]
 800cf94:	2200      	movs	r2, #0
 800cf96:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800cf98:	68bb      	ldr	r3, [r7, #8]
 800cf9a:	695b      	ldr	r3, [r3, #20]
 800cf9c:	687a      	ldr	r2, [r7, #4]
 800cf9e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cfa0:	68b8      	ldr	r0, [r7, #8]
 800cfa2:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800cfa4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cfa6:	f7f7 ff2d 	bl	8004e04 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800cfaa:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800cfae:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800cfb0:	1ad3      	subs	r3, r2, r3
 800cfb2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 800cfb6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800cfba:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800cfbc:	4413      	add	r3, r2
 800cfbe:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 800cfc2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	f47f af19 	bne.w	800cdfe <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800cfcc:	2300      	movs	r3, #0
 800cfce:	e002      	b.n	800cfd6 <ip4_frag+0x26a>
      goto memerr;
 800cfd0:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800cfd2:	f04f 33ff 	mov.w	r3, #4294967295
}
 800cfd6:	4618      	mov	r0, r3
 800cfd8:	3748      	adds	r7, #72	; 0x48
 800cfda:	46bd      	mov	sp, r7
 800cfdc:	bd80      	pop	{r7, pc}
 800cfde:	bf00      	nop
 800cfe0:	08010cd0 	.word	0x08010cd0
 800cfe4:	08010eac 	.word	0x08010eac
 800cfe8:	08010d18 	.word	0x08010d18
 800cfec:	08010ec8 	.word	0x08010ec8
 800cff0:	08010ee8 	.word	0x08010ee8
 800cff4:	0800cd05 	.word	0x0800cd05

0800cff8 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800cff8:	b580      	push	{r7, lr}
 800cffa:	b086      	sub	sp, #24
 800cffc:	af00      	add	r7, sp, #0
 800cffe:	6078      	str	r0, [r7, #4]
 800d000:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800d002:	230e      	movs	r3, #14
 800d004:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	895b      	ldrh	r3, [r3, #10]
 800d00a:	2b0e      	cmp	r3, #14
 800d00c:	d96e      	bls.n	800d0ec <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	7bdb      	ldrb	r3, [r3, #15]
 800d012:	2b00      	cmp	r3, #0
 800d014:	d106      	bne.n	800d024 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800d016:	683b      	ldr	r3, [r7, #0]
 800d018:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d01c:	3301      	adds	r3, #1
 800d01e:	b2da      	uxtb	r2, r3
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	685b      	ldr	r3, [r3, #4]
 800d028:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800d02a:	693b      	ldr	r3, [r7, #16]
 800d02c:	7b1a      	ldrb	r2, [r3, #12]
 800d02e:	7b5b      	ldrb	r3, [r3, #13]
 800d030:	021b      	lsls	r3, r3, #8
 800d032:	4313      	orrs	r3, r2
 800d034:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800d036:	693b      	ldr	r3, [r7, #16]
 800d038:	781b      	ldrb	r3, [r3, #0]
 800d03a:	f003 0301 	and.w	r3, r3, #1
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d023      	beq.n	800d08a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800d042:	693b      	ldr	r3, [r7, #16]
 800d044:	781b      	ldrb	r3, [r3, #0]
 800d046:	2b01      	cmp	r3, #1
 800d048:	d10f      	bne.n	800d06a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800d04a:	693b      	ldr	r3, [r7, #16]
 800d04c:	785b      	ldrb	r3, [r3, #1]
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d11b      	bne.n	800d08a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800d052:	693b      	ldr	r3, [r7, #16]
 800d054:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800d056:	2b5e      	cmp	r3, #94	; 0x5e
 800d058:	d117      	bne.n	800d08a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	7b5b      	ldrb	r3, [r3, #13]
 800d05e:	f043 0310 	orr.w	r3, r3, #16
 800d062:	b2da      	uxtb	r2, r3
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	735a      	strb	r2, [r3, #13]
 800d068:	e00f      	b.n	800d08a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800d06a:	693b      	ldr	r3, [r7, #16]
 800d06c:	2206      	movs	r2, #6
 800d06e:	4928      	ldr	r1, [pc, #160]	; (800d110 <ethernet_input+0x118>)
 800d070:	4618      	mov	r0, r3
 800d072:	f000 f8bb 	bl	800d1ec <memcmp>
 800d076:	4603      	mov	r3, r0
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d106      	bne.n	800d08a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	7b5b      	ldrb	r3, [r3, #13]
 800d080:	f043 0308 	orr.w	r3, r3, #8
 800d084:	b2da      	uxtb	r2, r3
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800d08a:	89fb      	ldrh	r3, [r7, #14]
 800d08c:	2b08      	cmp	r3, #8
 800d08e:	d003      	beq.n	800d098 <ethernet_input+0xa0>
 800d090:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800d094:	d014      	beq.n	800d0c0 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800d096:	e032      	b.n	800d0fe <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800d098:	683b      	ldr	r3, [r7, #0]
 800d09a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d09e:	f003 0308 	and.w	r3, r3, #8
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d024      	beq.n	800d0f0 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800d0a6:	8afb      	ldrh	r3, [r7, #22]
 800d0a8:	4619      	mov	r1, r3
 800d0aa:	6878      	ldr	r0, [r7, #4]
 800d0ac:	f7f7 fe24 	bl	8004cf8 <pbuf_remove_header>
 800d0b0:	4603      	mov	r3, r0
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d11e      	bne.n	800d0f4 <ethernet_input+0xfc>
        ip4_input(p, netif);
 800d0b6:	6839      	ldr	r1, [r7, #0]
 800d0b8:	6878      	ldr	r0, [r7, #4]
 800d0ba:	f7fe ff27 	bl	800bf0c <ip4_input>
      break;
 800d0be:	e013      	b.n	800d0e8 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800d0c0:	683b      	ldr	r3, [r7, #0]
 800d0c2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d0c6:	f003 0308 	and.w	r3, r3, #8
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d014      	beq.n	800d0f8 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800d0ce:	8afb      	ldrh	r3, [r7, #22]
 800d0d0:	4619      	mov	r1, r3
 800d0d2:	6878      	ldr	r0, [r7, #4]
 800d0d4:	f7f7 fe10 	bl	8004cf8 <pbuf_remove_header>
 800d0d8:	4603      	mov	r3, r0
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d10e      	bne.n	800d0fc <ethernet_input+0x104>
        etharp_input(p, netif);
 800d0de:	6839      	ldr	r1, [r7, #0]
 800d0e0:	6878      	ldr	r0, [r7, #4]
 800d0e2:	f7fe f8c7 	bl	800b274 <etharp_input>
      break;
 800d0e6:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800d0e8:	2300      	movs	r3, #0
 800d0ea:	e00c      	b.n	800d106 <ethernet_input+0x10e>
    goto free_and_return;
 800d0ec:	bf00      	nop
 800d0ee:	e006      	b.n	800d0fe <ethernet_input+0x106>
        goto free_and_return;
 800d0f0:	bf00      	nop
 800d0f2:	e004      	b.n	800d0fe <ethernet_input+0x106>
        goto free_and_return;
 800d0f4:	bf00      	nop
 800d0f6:	e002      	b.n	800d0fe <ethernet_input+0x106>
        goto free_and_return;
 800d0f8:	bf00      	nop
 800d0fa:	e000      	b.n	800d0fe <ethernet_input+0x106>
        goto free_and_return;
 800d0fc:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800d0fe:	6878      	ldr	r0, [r7, #4]
 800d100:	f7f7 fe80 	bl	8004e04 <pbuf_free>
  return ERR_OK;
 800d104:	2300      	movs	r3, #0
}
 800d106:	4618      	mov	r0, r3
 800d108:	3718      	adds	r7, #24
 800d10a:	46bd      	mov	sp, r7
 800d10c:	bd80      	pop	{r7, pc}
 800d10e:	bf00      	nop
 800d110:	08011070 	.word	0x08011070

0800d114 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800d114:	b580      	push	{r7, lr}
 800d116:	b086      	sub	sp, #24
 800d118:	af00      	add	r7, sp, #0
 800d11a:	60f8      	str	r0, [r7, #12]
 800d11c:	60b9      	str	r1, [r7, #8]
 800d11e:	607a      	str	r2, [r7, #4]
 800d120:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800d122:	8c3b      	ldrh	r3, [r7, #32]
 800d124:	4618      	mov	r0, r3
 800d126:	f7f6 fbe7 	bl	80038f8 <lwip_htons>
 800d12a:	4603      	mov	r3, r0
 800d12c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800d12e:	210e      	movs	r1, #14
 800d130:	68b8      	ldr	r0, [r7, #8]
 800d132:	f7f7 fdd1 	bl	8004cd8 <pbuf_add_header>
 800d136:	4603      	mov	r3, r0
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d125      	bne.n	800d188 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800d13c:	68bb      	ldr	r3, [r7, #8]
 800d13e:	685b      	ldr	r3, [r3, #4]
 800d140:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800d142:	693b      	ldr	r3, [r7, #16]
 800d144:	8afa      	ldrh	r2, [r7, #22]
 800d146:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800d148:	693b      	ldr	r3, [r7, #16]
 800d14a:	2206      	movs	r2, #6
 800d14c:	6839      	ldr	r1, [r7, #0]
 800d14e:	4618      	mov	r0, r3
 800d150:	f000 f85a 	bl	800d208 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800d154:	693b      	ldr	r3, [r7, #16]
 800d156:	3306      	adds	r3, #6
 800d158:	2206      	movs	r2, #6
 800d15a:	6879      	ldr	r1, [r7, #4]
 800d15c:	4618      	mov	r0, r3
 800d15e:	f000 f853 	bl	800d208 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d168:	2b06      	cmp	r3, #6
 800d16a:	d006      	beq.n	800d17a <ethernet_output+0x66>
 800d16c:	4b0a      	ldr	r3, [pc, #40]	; (800d198 <ethernet_output+0x84>)
 800d16e:	f44f 7299 	mov.w	r2, #306	; 0x132
 800d172:	490a      	ldr	r1, [pc, #40]	; (800d19c <ethernet_output+0x88>)
 800d174:	480a      	ldr	r0, [pc, #40]	; (800d1a0 <ethernet_output+0x8c>)
 800d176:	f000 f877 	bl	800d268 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	699b      	ldr	r3, [r3, #24]
 800d17e:	68b9      	ldr	r1, [r7, #8]
 800d180:	68f8      	ldr	r0, [r7, #12]
 800d182:	4798      	blx	r3
 800d184:	4603      	mov	r3, r0
 800d186:	e002      	b.n	800d18e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800d188:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800d18a:	f06f 0301 	mvn.w	r3, #1
}
 800d18e:	4618      	mov	r0, r3
 800d190:	3718      	adds	r7, #24
 800d192:	46bd      	mov	sp, r7
 800d194:	bd80      	pop	{r7, pc}
 800d196:	bf00      	nop
 800d198:	08010ef8 	.word	0x08010ef8
 800d19c:	08010f30 	.word	0x08010f30
 800d1a0:	08010f64 	.word	0x08010f64

0800d1a4 <__libc_init_array>:
 800d1a4:	b570      	push	{r4, r5, r6, lr}
 800d1a6:	4d0d      	ldr	r5, [pc, #52]	; (800d1dc <__libc_init_array+0x38>)
 800d1a8:	4c0d      	ldr	r4, [pc, #52]	; (800d1e0 <__libc_init_array+0x3c>)
 800d1aa:	1b64      	subs	r4, r4, r5
 800d1ac:	10a4      	asrs	r4, r4, #2
 800d1ae:	2600      	movs	r6, #0
 800d1b0:	42a6      	cmp	r6, r4
 800d1b2:	d109      	bne.n	800d1c8 <__libc_init_array+0x24>
 800d1b4:	4d0b      	ldr	r5, [pc, #44]	; (800d1e4 <__libc_init_array+0x40>)
 800d1b6:	4c0c      	ldr	r4, [pc, #48]	; (800d1e8 <__libc_init_array+0x44>)
 800d1b8:	f001 fa22 	bl	800e600 <_init>
 800d1bc:	1b64      	subs	r4, r4, r5
 800d1be:	10a4      	asrs	r4, r4, #2
 800d1c0:	2600      	movs	r6, #0
 800d1c2:	42a6      	cmp	r6, r4
 800d1c4:	d105      	bne.n	800d1d2 <__libc_init_array+0x2e>
 800d1c6:	bd70      	pop	{r4, r5, r6, pc}
 800d1c8:	f855 3b04 	ldr.w	r3, [r5], #4
 800d1cc:	4798      	blx	r3
 800d1ce:	3601      	adds	r6, #1
 800d1d0:	e7ee      	b.n	800d1b0 <__libc_init_array+0xc>
 800d1d2:	f855 3b04 	ldr.w	r3, [r5], #4
 800d1d6:	4798      	blx	r3
 800d1d8:	3601      	adds	r6, #1
 800d1da:	e7f2      	b.n	800d1c2 <__libc_init_array+0x1e>
 800d1dc:	080111d4 	.word	0x080111d4
 800d1e0:	080111d4 	.word	0x080111d4
 800d1e4:	080111d4 	.word	0x080111d4
 800d1e8:	080111d8 	.word	0x080111d8

0800d1ec <memcmp>:
 800d1ec:	b530      	push	{r4, r5, lr}
 800d1ee:	3901      	subs	r1, #1
 800d1f0:	2400      	movs	r4, #0
 800d1f2:	42a2      	cmp	r2, r4
 800d1f4:	d101      	bne.n	800d1fa <memcmp+0xe>
 800d1f6:	2000      	movs	r0, #0
 800d1f8:	e005      	b.n	800d206 <memcmp+0x1a>
 800d1fa:	5d03      	ldrb	r3, [r0, r4]
 800d1fc:	3401      	adds	r4, #1
 800d1fe:	5d0d      	ldrb	r5, [r1, r4]
 800d200:	42ab      	cmp	r3, r5
 800d202:	d0f6      	beq.n	800d1f2 <memcmp+0x6>
 800d204:	1b58      	subs	r0, r3, r5
 800d206:	bd30      	pop	{r4, r5, pc}

0800d208 <memcpy>:
 800d208:	440a      	add	r2, r1
 800d20a:	4291      	cmp	r1, r2
 800d20c:	f100 33ff 	add.w	r3, r0, #4294967295
 800d210:	d100      	bne.n	800d214 <memcpy+0xc>
 800d212:	4770      	bx	lr
 800d214:	b510      	push	{r4, lr}
 800d216:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d21a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d21e:	4291      	cmp	r1, r2
 800d220:	d1f9      	bne.n	800d216 <memcpy+0xe>
 800d222:	bd10      	pop	{r4, pc}

0800d224 <memmove>:
 800d224:	4288      	cmp	r0, r1
 800d226:	b510      	push	{r4, lr}
 800d228:	eb01 0402 	add.w	r4, r1, r2
 800d22c:	d902      	bls.n	800d234 <memmove+0x10>
 800d22e:	4284      	cmp	r4, r0
 800d230:	4623      	mov	r3, r4
 800d232:	d807      	bhi.n	800d244 <memmove+0x20>
 800d234:	1e43      	subs	r3, r0, #1
 800d236:	42a1      	cmp	r1, r4
 800d238:	d008      	beq.n	800d24c <memmove+0x28>
 800d23a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d23e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d242:	e7f8      	b.n	800d236 <memmove+0x12>
 800d244:	4402      	add	r2, r0
 800d246:	4601      	mov	r1, r0
 800d248:	428a      	cmp	r2, r1
 800d24a:	d100      	bne.n	800d24e <memmove+0x2a>
 800d24c:	bd10      	pop	{r4, pc}
 800d24e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d252:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d256:	e7f7      	b.n	800d248 <memmove+0x24>

0800d258 <memset>:
 800d258:	4402      	add	r2, r0
 800d25a:	4603      	mov	r3, r0
 800d25c:	4293      	cmp	r3, r2
 800d25e:	d100      	bne.n	800d262 <memset+0xa>
 800d260:	4770      	bx	lr
 800d262:	f803 1b01 	strb.w	r1, [r3], #1
 800d266:	e7f9      	b.n	800d25c <memset+0x4>

0800d268 <iprintf>:
 800d268:	b40f      	push	{r0, r1, r2, r3}
 800d26a:	4b0a      	ldr	r3, [pc, #40]	; (800d294 <iprintf+0x2c>)
 800d26c:	b513      	push	{r0, r1, r4, lr}
 800d26e:	681c      	ldr	r4, [r3, #0]
 800d270:	b124      	cbz	r4, 800d27c <iprintf+0x14>
 800d272:	69a3      	ldr	r3, [r4, #24]
 800d274:	b913      	cbnz	r3, 800d27c <iprintf+0x14>
 800d276:	4620      	mov	r0, r4
 800d278:	f000 f8ec 	bl	800d454 <__sinit>
 800d27c:	ab05      	add	r3, sp, #20
 800d27e:	9a04      	ldr	r2, [sp, #16]
 800d280:	68a1      	ldr	r1, [r4, #8]
 800d282:	9301      	str	r3, [sp, #4]
 800d284:	4620      	mov	r0, r4
 800d286:	f000 fbcf 	bl	800da28 <_vfiprintf_r>
 800d28a:	b002      	add	sp, #8
 800d28c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d290:	b004      	add	sp, #16
 800d292:	4770      	bx	lr
 800d294:	20000014 	.word	0x20000014

0800d298 <rand>:
 800d298:	4b17      	ldr	r3, [pc, #92]	; (800d2f8 <rand+0x60>)
 800d29a:	b510      	push	{r4, lr}
 800d29c:	681c      	ldr	r4, [r3, #0]
 800d29e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d2a0:	b9b3      	cbnz	r3, 800d2d0 <rand+0x38>
 800d2a2:	2018      	movs	r0, #24
 800d2a4:	f000 f988 	bl	800d5b8 <malloc>
 800d2a8:	63a0      	str	r0, [r4, #56]	; 0x38
 800d2aa:	b928      	cbnz	r0, 800d2b8 <rand+0x20>
 800d2ac:	4602      	mov	r2, r0
 800d2ae:	4b13      	ldr	r3, [pc, #76]	; (800d2fc <rand+0x64>)
 800d2b0:	4813      	ldr	r0, [pc, #76]	; (800d300 <rand+0x68>)
 800d2b2:	214e      	movs	r1, #78	; 0x4e
 800d2b4:	f000 f858 	bl	800d368 <__assert_func>
 800d2b8:	4a12      	ldr	r2, [pc, #72]	; (800d304 <rand+0x6c>)
 800d2ba:	4b13      	ldr	r3, [pc, #76]	; (800d308 <rand+0x70>)
 800d2bc:	e9c0 2300 	strd	r2, r3, [r0]
 800d2c0:	4b12      	ldr	r3, [pc, #72]	; (800d30c <rand+0x74>)
 800d2c2:	6083      	str	r3, [r0, #8]
 800d2c4:	230b      	movs	r3, #11
 800d2c6:	8183      	strh	r3, [r0, #12]
 800d2c8:	2201      	movs	r2, #1
 800d2ca:	2300      	movs	r3, #0
 800d2cc:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800d2d0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800d2d2:	480f      	ldr	r0, [pc, #60]	; (800d310 <rand+0x78>)
 800d2d4:	690a      	ldr	r2, [r1, #16]
 800d2d6:	694b      	ldr	r3, [r1, #20]
 800d2d8:	4c0e      	ldr	r4, [pc, #56]	; (800d314 <rand+0x7c>)
 800d2da:	4350      	muls	r0, r2
 800d2dc:	fb04 0003 	mla	r0, r4, r3, r0
 800d2e0:	fba2 3404 	umull	r3, r4, r2, r4
 800d2e4:	1c5a      	adds	r2, r3, #1
 800d2e6:	4404      	add	r4, r0
 800d2e8:	f144 0000 	adc.w	r0, r4, #0
 800d2ec:	e9c1 2004 	strd	r2, r0, [r1, #16]
 800d2f0:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800d2f4:	bd10      	pop	{r4, pc}
 800d2f6:	bf00      	nop
 800d2f8:	20000014 	.word	0x20000014
 800d2fc:	08011084 	.word	0x08011084
 800d300:	0801109b 	.word	0x0801109b
 800d304:	abcd330e 	.word	0xabcd330e
 800d308:	e66d1234 	.word	0xe66d1234
 800d30c:	0005deec 	.word	0x0005deec
 800d310:	5851f42d 	.word	0x5851f42d
 800d314:	4c957f2d 	.word	0x4c957f2d

0800d318 <siprintf>:
 800d318:	b40e      	push	{r1, r2, r3}
 800d31a:	b500      	push	{lr}
 800d31c:	b09c      	sub	sp, #112	; 0x70
 800d31e:	ab1d      	add	r3, sp, #116	; 0x74
 800d320:	9002      	str	r0, [sp, #8]
 800d322:	9006      	str	r0, [sp, #24]
 800d324:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d328:	4809      	ldr	r0, [pc, #36]	; (800d350 <siprintf+0x38>)
 800d32a:	9107      	str	r1, [sp, #28]
 800d32c:	9104      	str	r1, [sp, #16]
 800d32e:	4909      	ldr	r1, [pc, #36]	; (800d354 <siprintf+0x3c>)
 800d330:	f853 2b04 	ldr.w	r2, [r3], #4
 800d334:	9105      	str	r1, [sp, #20]
 800d336:	6800      	ldr	r0, [r0, #0]
 800d338:	9301      	str	r3, [sp, #4]
 800d33a:	a902      	add	r1, sp, #8
 800d33c:	f000 fa4a 	bl	800d7d4 <_svfiprintf_r>
 800d340:	9b02      	ldr	r3, [sp, #8]
 800d342:	2200      	movs	r2, #0
 800d344:	701a      	strb	r2, [r3, #0]
 800d346:	b01c      	add	sp, #112	; 0x70
 800d348:	f85d eb04 	ldr.w	lr, [sp], #4
 800d34c:	b003      	add	sp, #12
 800d34e:	4770      	bx	lr
 800d350:	20000014 	.word	0x20000014
 800d354:	ffff0208 	.word	0xffff0208

0800d358 <strcpy>:
 800d358:	4603      	mov	r3, r0
 800d35a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d35e:	f803 2b01 	strb.w	r2, [r3], #1
 800d362:	2a00      	cmp	r2, #0
 800d364:	d1f9      	bne.n	800d35a <strcpy+0x2>
 800d366:	4770      	bx	lr

0800d368 <__assert_func>:
 800d368:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d36a:	4614      	mov	r4, r2
 800d36c:	461a      	mov	r2, r3
 800d36e:	4b09      	ldr	r3, [pc, #36]	; (800d394 <__assert_func+0x2c>)
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	4605      	mov	r5, r0
 800d374:	68d8      	ldr	r0, [r3, #12]
 800d376:	b14c      	cbz	r4, 800d38c <__assert_func+0x24>
 800d378:	4b07      	ldr	r3, [pc, #28]	; (800d398 <__assert_func+0x30>)
 800d37a:	9100      	str	r1, [sp, #0]
 800d37c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d380:	4906      	ldr	r1, [pc, #24]	; (800d39c <__assert_func+0x34>)
 800d382:	462b      	mov	r3, r5
 800d384:	f000 f8e4 	bl	800d550 <fiprintf>
 800d388:	f000 ff38 	bl	800e1fc <abort>
 800d38c:	4b04      	ldr	r3, [pc, #16]	; (800d3a0 <__assert_func+0x38>)
 800d38e:	461c      	mov	r4, r3
 800d390:	e7f3      	b.n	800d37a <__assert_func+0x12>
 800d392:	bf00      	nop
 800d394:	20000014 	.word	0x20000014
 800d398:	080110fa 	.word	0x080110fa
 800d39c:	08011107 	.word	0x08011107
 800d3a0:	08011135 	.word	0x08011135

0800d3a4 <std>:
 800d3a4:	2300      	movs	r3, #0
 800d3a6:	b510      	push	{r4, lr}
 800d3a8:	4604      	mov	r4, r0
 800d3aa:	e9c0 3300 	strd	r3, r3, [r0]
 800d3ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d3b2:	6083      	str	r3, [r0, #8]
 800d3b4:	8181      	strh	r1, [r0, #12]
 800d3b6:	6643      	str	r3, [r0, #100]	; 0x64
 800d3b8:	81c2      	strh	r2, [r0, #14]
 800d3ba:	6183      	str	r3, [r0, #24]
 800d3bc:	4619      	mov	r1, r3
 800d3be:	2208      	movs	r2, #8
 800d3c0:	305c      	adds	r0, #92	; 0x5c
 800d3c2:	f7ff ff49 	bl	800d258 <memset>
 800d3c6:	4b05      	ldr	r3, [pc, #20]	; (800d3dc <std+0x38>)
 800d3c8:	6263      	str	r3, [r4, #36]	; 0x24
 800d3ca:	4b05      	ldr	r3, [pc, #20]	; (800d3e0 <std+0x3c>)
 800d3cc:	62a3      	str	r3, [r4, #40]	; 0x28
 800d3ce:	4b05      	ldr	r3, [pc, #20]	; (800d3e4 <std+0x40>)
 800d3d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d3d2:	4b05      	ldr	r3, [pc, #20]	; (800d3e8 <std+0x44>)
 800d3d4:	6224      	str	r4, [r4, #32]
 800d3d6:	6323      	str	r3, [r4, #48]	; 0x30
 800d3d8:	bd10      	pop	{r4, pc}
 800d3da:	bf00      	nop
 800d3dc:	0800dfd1 	.word	0x0800dfd1
 800d3e0:	0800dff3 	.word	0x0800dff3
 800d3e4:	0800e02b 	.word	0x0800e02b
 800d3e8:	0800e04f 	.word	0x0800e04f

0800d3ec <_cleanup_r>:
 800d3ec:	4901      	ldr	r1, [pc, #4]	; (800d3f4 <_cleanup_r+0x8>)
 800d3ee:	f000 b8c1 	b.w	800d574 <_fwalk_reent>
 800d3f2:	bf00      	nop
 800d3f4:	0800e339 	.word	0x0800e339

0800d3f8 <__sfmoreglue>:
 800d3f8:	b570      	push	{r4, r5, r6, lr}
 800d3fa:	1e4a      	subs	r2, r1, #1
 800d3fc:	2568      	movs	r5, #104	; 0x68
 800d3fe:	4355      	muls	r5, r2
 800d400:	460e      	mov	r6, r1
 800d402:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d406:	f000 f92f 	bl	800d668 <_malloc_r>
 800d40a:	4604      	mov	r4, r0
 800d40c:	b140      	cbz	r0, 800d420 <__sfmoreglue+0x28>
 800d40e:	2100      	movs	r1, #0
 800d410:	e9c0 1600 	strd	r1, r6, [r0]
 800d414:	300c      	adds	r0, #12
 800d416:	60a0      	str	r0, [r4, #8]
 800d418:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d41c:	f7ff ff1c 	bl	800d258 <memset>
 800d420:	4620      	mov	r0, r4
 800d422:	bd70      	pop	{r4, r5, r6, pc}

0800d424 <__sfp_lock_acquire>:
 800d424:	4801      	ldr	r0, [pc, #4]	; (800d42c <__sfp_lock_acquire+0x8>)
 800d426:	f000 b8c5 	b.w	800d5b4 <__retarget_lock_acquire_recursive>
 800d42a:	bf00      	nop
 800d42c:	2000689c 	.word	0x2000689c

0800d430 <__sfp_lock_release>:
 800d430:	4801      	ldr	r0, [pc, #4]	; (800d438 <__sfp_lock_release+0x8>)
 800d432:	f000 b8c0 	b.w	800d5b6 <__retarget_lock_release_recursive>
 800d436:	bf00      	nop
 800d438:	2000689c 	.word	0x2000689c

0800d43c <__sinit_lock_acquire>:
 800d43c:	4801      	ldr	r0, [pc, #4]	; (800d444 <__sinit_lock_acquire+0x8>)
 800d43e:	f000 b8b9 	b.w	800d5b4 <__retarget_lock_acquire_recursive>
 800d442:	bf00      	nop
 800d444:	20006897 	.word	0x20006897

0800d448 <__sinit_lock_release>:
 800d448:	4801      	ldr	r0, [pc, #4]	; (800d450 <__sinit_lock_release+0x8>)
 800d44a:	f000 b8b4 	b.w	800d5b6 <__retarget_lock_release_recursive>
 800d44e:	bf00      	nop
 800d450:	20006897 	.word	0x20006897

0800d454 <__sinit>:
 800d454:	b510      	push	{r4, lr}
 800d456:	4604      	mov	r4, r0
 800d458:	f7ff fff0 	bl	800d43c <__sinit_lock_acquire>
 800d45c:	69a3      	ldr	r3, [r4, #24]
 800d45e:	b11b      	cbz	r3, 800d468 <__sinit+0x14>
 800d460:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d464:	f7ff bff0 	b.w	800d448 <__sinit_lock_release>
 800d468:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d46c:	6523      	str	r3, [r4, #80]	; 0x50
 800d46e:	4b13      	ldr	r3, [pc, #76]	; (800d4bc <__sinit+0x68>)
 800d470:	4a13      	ldr	r2, [pc, #76]	; (800d4c0 <__sinit+0x6c>)
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	62a2      	str	r2, [r4, #40]	; 0x28
 800d476:	42a3      	cmp	r3, r4
 800d478:	bf04      	itt	eq
 800d47a:	2301      	moveq	r3, #1
 800d47c:	61a3      	streq	r3, [r4, #24]
 800d47e:	4620      	mov	r0, r4
 800d480:	f000 f820 	bl	800d4c4 <__sfp>
 800d484:	6060      	str	r0, [r4, #4]
 800d486:	4620      	mov	r0, r4
 800d488:	f000 f81c 	bl	800d4c4 <__sfp>
 800d48c:	60a0      	str	r0, [r4, #8]
 800d48e:	4620      	mov	r0, r4
 800d490:	f000 f818 	bl	800d4c4 <__sfp>
 800d494:	2200      	movs	r2, #0
 800d496:	60e0      	str	r0, [r4, #12]
 800d498:	2104      	movs	r1, #4
 800d49a:	6860      	ldr	r0, [r4, #4]
 800d49c:	f7ff ff82 	bl	800d3a4 <std>
 800d4a0:	68a0      	ldr	r0, [r4, #8]
 800d4a2:	2201      	movs	r2, #1
 800d4a4:	2109      	movs	r1, #9
 800d4a6:	f7ff ff7d 	bl	800d3a4 <std>
 800d4aa:	68e0      	ldr	r0, [r4, #12]
 800d4ac:	2202      	movs	r2, #2
 800d4ae:	2112      	movs	r1, #18
 800d4b0:	f7ff ff78 	bl	800d3a4 <std>
 800d4b4:	2301      	movs	r3, #1
 800d4b6:	61a3      	str	r3, [r4, #24]
 800d4b8:	e7d2      	b.n	800d460 <__sinit+0xc>
 800d4ba:	bf00      	nop
 800d4bc:	08011080 	.word	0x08011080
 800d4c0:	0800d3ed 	.word	0x0800d3ed

0800d4c4 <__sfp>:
 800d4c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4c6:	4607      	mov	r7, r0
 800d4c8:	f7ff ffac 	bl	800d424 <__sfp_lock_acquire>
 800d4cc:	4b1e      	ldr	r3, [pc, #120]	; (800d548 <__sfp+0x84>)
 800d4ce:	681e      	ldr	r6, [r3, #0]
 800d4d0:	69b3      	ldr	r3, [r6, #24]
 800d4d2:	b913      	cbnz	r3, 800d4da <__sfp+0x16>
 800d4d4:	4630      	mov	r0, r6
 800d4d6:	f7ff ffbd 	bl	800d454 <__sinit>
 800d4da:	3648      	adds	r6, #72	; 0x48
 800d4dc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d4e0:	3b01      	subs	r3, #1
 800d4e2:	d503      	bpl.n	800d4ec <__sfp+0x28>
 800d4e4:	6833      	ldr	r3, [r6, #0]
 800d4e6:	b30b      	cbz	r3, 800d52c <__sfp+0x68>
 800d4e8:	6836      	ldr	r6, [r6, #0]
 800d4ea:	e7f7      	b.n	800d4dc <__sfp+0x18>
 800d4ec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d4f0:	b9d5      	cbnz	r5, 800d528 <__sfp+0x64>
 800d4f2:	4b16      	ldr	r3, [pc, #88]	; (800d54c <__sfp+0x88>)
 800d4f4:	60e3      	str	r3, [r4, #12]
 800d4f6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d4fa:	6665      	str	r5, [r4, #100]	; 0x64
 800d4fc:	f000 f859 	bl	800d5b2 <__retarget_lock_init_recursive>
 800d500:	f7ff ff96 	bl	800d430 <__sfp_lock_release>
 800d504:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d508:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d50c:	6025      	str	r5, [r4, #0]
 800d50e:	61a5      	str	r5, [r4, #24]
 800d510:	2208      	movs	r2, #8
 800d512:	4629      	mov	r1, r5
 800d514:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d518:	f7ff fe9e 	bl	800d258 <memset>
 800d51c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d520:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d524:	4620      	mov	r0, r4
 800d526:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d528:	3468      	adds	r4, #104	; 0x68
 800d52a:	e7d9      	b.n	800d4e0 <__sfp+0x1c>
 800d52c:	2104      	movs	r1, #4
 800d52e:	4638      	mov	r0, r7
 800d530:	f7ff ff62 	bl	800d3f8 <__sfmoreglue>
 800d534:	4604      	mov	r4, r0
 800d536:	6030      	str	r0, [r6, #0]
 800d538:	2800      	cmp	r0, #0
 800d53a:	d1d5      	bne.n	800d4e8 <__sfp+0x24>
 800d53c:	f7ff ff78 	bl	800d430 <__sfp_lock_release>
 800d540:	230c      	movs	r3, #12
 800d542:	603b      	str	r3, [r7, #0]
 800d544:	e7ee      	b.n	800d524 <__sfp+0x60>
 800d546:	bf00      	nop
 800d548:	08011080 	.word	0x08011080
 800d54c:	ffff0001 	.word	0xffff0001

0800d550 <fiprintf>:
 800d550:	b40e      	push	{r1, r2, r3}
 800d552:	b503      	push	{r0, r1, lr}
 800d554:	4601      	mov	r1, r0
 800d556:	ab03      	add	r3, sp, #12
 800d558:	4805      	ldr	r0, [pc, #20]	; (800d570 <fiprintf+0x20>)
 800d55a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d55e:	6800      	ldr	r0, [r0, #0]
 800d560:	9301      	str	r3, [sp, #4]
 800d562:	f000 fa61 	bl	800da28 <_vfiprintf_r>
 800d566:	b002      	add	sp, #8
 800d568:	f85d eb04 	ldr.w	lr, [sp], #4
 800d56c:	b003      	add	sp, #12
 800d56e:	4770      	bx	lr
 800d570:	20000014 	.word	0x20000014

0800d574 <_fwalk_reent>:
 800d574:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d578:	4606      	mov	r6, r0
 800d57a:	4688      	mov	r8, r1
 800d57c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d580:	2700      	movs	r7, #0
 800d582:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d586:	f1b9 0901 	subs.w	r9, r9, #1
 800d58a:	d505      	bpl.n	800d598 <_fwalk_reent+0x24>
 800d58c:	6824      	ldr	r4, [r4, #0]
 800d58e:	2c00      	cmp	r4, #0
 800d590:	d1f7      	bne.n	800d582 <_fwalk_reent+0xe>
 800d592:	4638      	mov	r0, r7
 800d594:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d598:	89ab      	ldrh	r3, [r5, #12]
 800d59a:	2b01      	cmp	r3, #1
 800d59c:	d907      	bls.n	800d5ae <_fwalk_reent+0x3a>
 800d59e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d5a2:	3301      	adds	r3, #1
 800d5a4:	d003      	beq.n	800d5ae <_fwalk_reent+0x3a>
 800d5a6:	4629      	mov	r1, r5
 800d5a8:	4630      	mov	r0, r6
 800d5aa:	47c0      	blx	r8
 800d5ac:	4307      	orrs	r7, r0
 800d5ae:	3568      	adds	r5, #104	; 0x68
 800d5b0:	e7e9      	b.n	800d586 <_fwalk_reent+0x12>

0800d5b2 <__retarget_lock_init_recursive>:
 800d5b2:	4770      	bx	lr

0800d5b4 <__retarget_lock_acquire_recursive>:
 800d5b4:	4770      	bx	lr

0800d5b6 <__retarget_lock_release_recursive>:
 800d5b6:	4770      	bx	lr

0800d5b8 <malloc>:
 800d5b8:	4b02      	ldr	r3, [pc, #8]	; (800d5c4 <malloc+0xc>)
 800d5ba:	4601      	mov	r1, r0
 800d5bc:	6818      	ldr	r0, [r3, #0]
 800d5be:	f000 b853 	b.w	800d668 <_malloc_r>
 800d5c2:	bf00      	nop
 800d5c4:	20000014 	.word	0x20000014

0800d5c8 <_free_r>:
 800d5c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d5ca:	2900      	cmp	r1, #0
 800d5cc:	d048      	beq.n	800d660 <_free_r+0x98>
 800d5ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d5d2:	9001      	str	r0, [sp, #4]
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	f1a1 0404 	sub.w	r4, r1, #4
 800d5da:	bfb8      	it	lt
 800d5dc:	18e4      	addlt	r4, r4, r3
 800d5de:	f000 ff5d 	bl	800e49c <__malloc_lock>
 800d5e2:	4a20      	ldr	r2, [pc, #128]	; (800d664 <_free_r+0x9c>)
 800d5e4:	9801      	ldr	r0, [sp, #4]
 800d5e6:	6813      	ldr	r3, [r2, #0]
 800d5e8:	4615      	mov	r5, r2
 800d5ea:	b933      	cbnz	r3, 800d5fa <_free_r+0x32>
 800d5ec:	6063      	str	r3, [r4, #4]
 800d5ee:	6014      	str	r4, [r2, #0]
 800d5f0:	b003      	add	sp, #12
 800d5f2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d5f6:	f000 bf57 	b.w	800e4a8 <__malloc_unlock>
 800d5fa:	42a3      	cmp	r3, r4
 800d5fc:	d90b      	bls.n	800d616 <_free_r+0x4e>
 800d5fe:	6821      	ldr	r1, [r4, #0]
 800d600:	1862      	adds	r2, r4, r1
 800d602:	4293      	cmp	r3, r2
 800d604:	bf04      	itt	eq
 800d606:	681a      	ldreq	r2, [r3, #0]
 800d608:	685b      	ldreq	r3, [r3, #4]
 800d60a:	6063      	str	r3, [r4, #4]
 800d60c:	bf04      	itt	eq
 800d60e:	1852      	addeq	r2, r2, r1
 800d610:	6022      	streq	r2, [r4, #0]
 800d612:	602c      	str	r4, [r5, #0]
 800d614:	e7ec      	b.n	800d5f0 <_free_r+0x28>
 800d616:	461a      	mov	r2, r3
 800d618:	685b      	ldr	r3, [r3, #4]
 800d61a:	b10b      	cbz	r3, 800d620 <_free_r+0x58>
 800d61c:	42a3      	cmp	r3, r4
 800d61e:	d9fa      	bls.n	800d616 <_free_r+0x4e>
 800d620:	6811      	ldr	r1, [r2, #0]
 800d622:	1855      	adds	r5, r2, r1
 800d624:	42a5      	cmp	r5, r4
 800d626:	d10b      	bne.n	800d640 <_free_r+0x78>
 800d628:	6824      	ldr	r4, [r4, #0]
 800d62a:	4421      	add	r1, r4
 800d62c:	1854      	adds	r4, r2, r1
 800d62e:	42a3      	cmp	r3, r4
 800d630:	6011      	str	r1, [r2, #0]
 800d632:	d1dd      	bne.n	800d5f0 <_free_r+0x28>
 800d634:	681c      	ldr	r4, [r3, #0]
 800d636:	685b      	ldr	r3, [r3, #4]
 800d638:	6053      	str	r3, [r2, #4]
 800d63a:	4421      	add	r1, r4
 800d63c:	6011      	str	r1, [r2, #0]
 800d63e:	e7d7      	b.n	800d5f0 <_free_r+0x28>
 800d640:	d902      	bls.n	800d648 <_free_r+0x80>
 800d642:	230c      	movs	r3, #12
 800d644:	6003      	str	r3, [r0, #0]
 800d646:	e7d3      	b.n	800d5f0 <_free_r+0x28>
 800d648:	6825      	ldr	r5, [r4, #0]
 800d64a:	1961      	adds	r1, r4, r5
 800d64c:	428b      	cmp	r3, r1
 800d64e:	bf04      	itt	eq
 800d650:	6819      	ldreq	r1, [r3, #0]
 800d652:	685b      	ldreq	r3, [r3, #4]
 800d654:	6063      	str	r3, [r4, #4]
 800d656:	bf04      	itt	eq
 800d658:	1949      	addeq	r1, r1, r5
 800d65a:	6021      	streq	r1, [r4, #0]
 800d65c:	6054      	str	r4, [r2, #4]
 800d65e:	e7c7      	b.n	800d5f0 <_free_r+0x28>
 800d660:	b003      	add	sp, #12
 800d662:	bd30      	pop	{r4, r5, pc}
 800d664:	20000208 	.word	0x20000208

0800d668 <_malloc_r>:
 800d668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d66a:	1ccd      	adds	r5, r1, #3
 800d66c:	f025 0503 	bic.w	r5, r5, #3
 800d670:	3508      	adds	r5, #8
 800d672:	2d0c      	cmp	r5, #12
 800d674:	bf38      	it	cc
 800d676:	250c      	movcc	r5, #12
 800d678:	2d00      	cmp	r5, #0
 800d67a:	4606      	mov	r6, r0
 800d67c:	db01      	blt.n	800d682 <_malloc_r+0x1a>
 800d67e:	42a9      	cmp	r1, r5
 800d680:	d903      	bls.n	800d68a <_malloc_r+0x22>
 800d682:	230c      	movs	r3, #12
 800d684:	6033      	str	r3, [r6, #0]
 800d686:	2000      	movs	r0, #0
 800d688:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d68a:	f000 ff07 	bl	800e49c <__malloc_lock>
 800d68e:	4921      	ldr	r1, [pc, #132]	; (800d714 <_malloc_r+0xac>)
 800d690:	680a      	ldr	r2, [r1, #0]
 800d692:	4614      	mov	r4, r2
 800d694:	b99c      	cbnz	r4, 800d6be <_malloc_r+0x56>
 800d696:	4f20      	ldr	r7, [pc, #128]	; (800d718 <_malloc_r+0xb0>)
 800d698:	683b      	ldr	r3, [r7, #0]
 800d69a:	b923      	cbnz	r3, 800d6a6 <_malloc_r+0x3e>
 800d69c:	4621      	mov	r1, r4
 800d69e:	4630      	mov	r0, r6
 800d6a0:	f000 fc86 	bl	800dfb0 <_sbrk_r>
 800d6a4:	6038      	str	r0, [r7, #0]
 800d6a6:	4629      	mov	r1, r5
 800d6a8:	4630      	mov	r0, r6
 800d6aa:	f000 fc81 	bl	800dfb0 <_sbrk_r>
 800d6ae:	1c43      	adds	r3, r0, #1
 800d6b0:	d123      	bne.n	800d6fa <_malloc_r+0x92>
 800d6b2:	230c      	movs	r3, #12
 800d6b4:	6033      	str	r3, [r6, #0]
 800d6b6:	4630      	mov	r0, r6
 800d6b8:	f000 fef6 	bl	800e4a8 <__malloc_unlock>
 800d6bc:	e7e3      	b.n	800d686 <_malloc_r+0x1e>
 800d6be:	6823      	ldr	r3, [r4, #0]
 800d6c0:	1b5b      	subs	r3, r3, r5
 800d6c2:	d417      	bmi.n	800d6f4 <_malloc_r+0x8c>
 800d6c4:	2b0b      	cmp	r3, #11
 800d6c6:	d903      	bls.n	800d6d0 <_malloc_r+0x68>
 800d6c8:	6023      	str	r3, [r4, #0]
 800d6ca:	441c      	add	r4, r3
 800d6cc:	6025      	str	r5, [r4, #0]
 800d6ce:	e004      	b.n	800d6da <_malloc_r+0x72>
 800d6d0:	6863      	ldr	r3, [r4, #4]
 800d6d2:	42a2      	cmp	r2, r4
 800d6d4:	bf0c      	ite	eq
 800d6d6:	600b      	streq	r3, [r1, #0]
 800d6d8:	6053      	strne	r3, [r2, #4]
 800d6da:	4630      	mov	r0, r6
 800d6dc:	f000 fee4 	bl	800e4a8 <__malloc_unlock>
 800d6e0:	f104 000b 	add.w	r0, r4, #11
 800d6e4:	1d23      	adds	r3, r4, #4
 800d6e6:	f020 0007 	bic.w	r0, r0, #7
 800d6ea:	1ac2      	subs	r2, r0, r3
 800d6ec:	d0cc      	beq.n	800d688 <_malloc_r+0x20>
 800d6ee:	1a1b      	subs	r3, r3, r0
 800d6f0:	50a3      	str	r3, [r4, r2]
 800d6f2:	e7c9      	b.n	800d688 <_malloc_r+0x20>
 800d6f4:	4622      	mov	r2, r4
 800d6f6:	6864      	ldr	r4, [r4, #4]
 800d6f8:	e7cc      	b.n	800d694 <_malloc_r+0x2c>
 800d6fa:	1cc4      	adds	r4, r0, #3
 800d6fc:	f024 0403 	bic.w	r4, r4, #3
 800d700:	42a0      	cmp	r0, r4
 800d702:	d0e3      	beq.n	800d6cc <_malloc_r+0x64>
 800d704:	1a21      	subs	r1, r4, r0
 800d706:	4630      	mov	r0, r6
 800d708:	f000 fc52 	bl	800dfb0 <_sbrk_r>
 800d70c:	3001      	adds	r0, #1
 800d70e:	d1dd      	bne.n	800d6cc <_malloc_r+0x64>
 800d710:	e7cf      	b.n	800d6b2 <_malloc_r+0x4a>
 800d712:	bf00      	nop
 800d714:	20000208 	.word	0x20000208
 800d718:	2000020c 	.word	0x2000020c

0800d71c <__ssputs_r>:
 800d71c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d720:	688e      	ldr	r6, [r1, #8]
 800d722:	429e      	cmp	r6, r3
 800d724:	4682      	mov	sl, r0
 800d726:	460c      	mov	r4, r1
 800d728:	4690      	mov	r8, r2
 800d72a:	461f      	mov	r7, r3
 800d72c:	d838      	bhi.n	800d7a0 <__ssputs_r+0x84>
 800d72e:	898a      	ldrh	r2, [r1, #12]
 800d730:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d734:	d032      	beq.n	800d79c <__ssputs_r+0x80>
 800d736:	6825      	ldr	r5, [r4, #0]
 800d738:	6909      	ldr	r1, [r1, #16]
 800d73a:	eba5 0901 	sub.w	r9, r5, r1
 800d73e:	6965      	ldr	r5, [r4, #20]
 800d740:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d744:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d748:	3301      	adds	r3, #1
 800d74a:	444b      	add	r3, r9
 800d74c:	106d      	asrs	r5, r5, #1
 800d74e:	429d      	cmp	r5, r3
 800d750:	bf38      	it	cc
 800d752:	461d      	movcc	r5, r3
 800d754:	0553      	lsls	r3, r2, #21
 800d756:	d531      	bpl.n	800d7bc <__ssputs_r+0xa0>
 800d758:	4629      	mov	r1, r5
 800d75a:	f7ff ff85 	bl	800d668 <_malloc_r>
 800d75e:	4606      	mov	r6, r0
 800d760:	b950      	cbnz	r0, 800d778 <__ssputs_r+0x5c>
 800d762:	230c      	movs	r3, #12
 800d764:	f8ca 3000 	str.w	r3, [sl]
 800d768:	89a3      	ldrh	r3, [r4, #12]
 800d76a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d76e:	81a3      	strh	r3, [r4, #12]
 800d770:	f04f 30ff 	mov.w	r0, #4294967295
 800d774:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d778:	6921      	ldr	r1, [r4, #16]
 800d77a:	464a      	mov	r2, r9
 800d77c:	f7ff fd44 	bl	800d208 <memcpy>
 800d780:	89a3      	ldrh	r3, [r4, #12]
 800d782:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d786:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d78a:	81a3      	strh	r3, [r4, #12]
 800d78c:	6126      	str	r6, [r4, #16]
 800d78e:	6165      	str	r5, [r4, #20]
 800d790:	444e      	add	r6, r9
 800d792:	eba5 0509 	sub.w	r5, r5, r9
 800d796:	6026      	str	r6, [r4, #0]
 800d798:	60a5      	str	r5, [r4, #8]
 800d79a:	463e      	mov	r6, r7
 800d79c:	42be      	cmp	r6, r7
 800d79e:	d900      	bls.n	800d7a2 <__ssputs_r+0x86>
 800d7a0:	463e      	mov	r6, r7
 800d7a2:	4632      	mov	r2, r6
 800d7a4:	6820      	ldr	r0, [r4, #0]
 800d7a6:	4641      	mov	r1, r8
 800d7a8:	f7ff fd3c 	bl	800d224 <memmove>
 800d7ac:	68a3      	ldr	r3, [r4, #8]
 800d7ae:	6822      	ldr	r2, [r4, #0]
 800d7b0:	1b9b      	subs	r3, r3, r6
 800d7b2:	4432      	add	r2, r6
 800d7b4:	60a3      	str	r3, [r4, #8]
 800d7b6:	6022      	str	r2, [r4, #0]
 800d7b8:	2000      	movs	r0, #0
 800d7ba:	e7db      	b.n	800d774 <__ssputs_r+0x58>
 800d7bc:	462a      	mov	r2, r5
 800d7be:	f000 fe79 	bl	800e4b4 <_realloc_r>
 800d7c2:	4606      	mov	r6, r0
 800d7c4:	2800      	cmp	r0, #0
 800d7c6:	d1e1      	bne.n	800d78c <__ssputs_r+0x70>
 800d7c8:	6921      	ldr	r1, [r4, #16]
 800d7ca:	4650      	mov	r0, sl
 800d7cc:	f7ff fefc 	bl	800d5c8 <_free_r>
 800d7d0:	e7c7      	b.n	800d762 <__ssputs_r+0x46>
	...

0800d7d4 <_svfiprintf_r>:
 800d7d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7d8:	4698      	mov	r8, r3
 800d7da:	898b      	ldrh	r3, [r1, #12]
 800d7dc:	061b      	lsls	r3, r3, #24
 800d7de:	b09d      	sub	sp, #116	; 0x74
 800d7e0:	4607      	mov	r7, r0
 800d7e2:	460d      	mov	r5, r1
 800d7e4:	4614      	mov	r4, r2
 800d7e6:	d50e      	bpl.n	800d806 <_svfiprintf_r+0x32>
 800d7e8:	690b      	ldr	r3, [r1, #16]
 800d7ea:	b963      	cbnz	r3, 800d806 <_svfiprintf_r+0x32>
 800d7ec:	2140      	movs	r1, #64	; 0x40
 800d7ee:	f7ff ff3b 	bl	800d668 <_malloc_r>
 800d7f2:	6028      	str	r0, [r5, #0]
 800d7f4:	6128      	str	r0, [r5, #16]
 800d7f6:	b920      	cbnz	r0, 800d802 <_svfiprintf_r+0x2e>
 800d7f8:	230c      	movs	r3, #12
 800d7fa:	603b      	str	r3, [r7, #0]
 800d7fc:	f04f 30ff 	mov.w	r0, #4294967295
 800d800:	e0d1      	b.n	800d9a6 <_svfiprintf_r+0x1d2>
 800d802:	2340      	movs	r3, #64	; 0x40
 800d804:	616b      	str	r3, [r5, #20]
 800d806:	2300      	movs	r3, #0
 800d808:	9309      	str	r3, [sp, #36]	; 0x24
 800d80a:	2320      	movs	r3, #32
 800d80c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d810:	f8cd 800c 	str.w	r8, [sp, #12]
 800d814:	2330      	movs	r3, #48	; 0x30
 800d816:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d9c0 <_svfiprintf_r+0x1ec>
 800d81a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d81e:	f04f 0901 	mov.w	r9, #1
 800d822:	4623      	mov	r3, r4
 800d824:	469a      	mov	sl, r3
 800d826:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d82a:	b10a      	cbz	r2, 800d830 <_svfiprintf_r+0x5c>
 800d82c:	2a25      	cmp	r2, #37	; 0x25
 800d82e:	d1f9      	bne.n	800d824 <_svfiprintf_r+0x50>
 800d830:	ebba 0b04 	subs.w	fp, sl, r4
 800d834:	d00b      	beq.n	800d84e <_svfiprintf_r+0x7a>
 800d836:	465b      	mov	r3, fp
 800d838:	4622      	mov	r2, r4
 800d83a:	4629      	mov	r1, r5
 800d83c:	4638      	mov	r0, r7
 800d83e:	f7ff ff6d 	bl	800d71c <__ssputs_r>
 800d842:	3001      	adds	r0, #1
 800d844:	f000 80aa 	beq.w	800d99c <_svfiprintf_r+0x1c8>
 800d848:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d84a:	445a      	add	r2, fp
 800d84c:	9209      	str	r2, [sp, #36]	; 0x24
 800d84e:	f89a 3000 	ldrb.w	r3, [sl]
 800d852:	2b00      	cmp	r3, #0
 800d854:	f000 80a2 	beq.w	800d99c <_svfiprintf_r+0x1c8>
 800d858:	2300      	movs	r3, #0
 800d85a:	f04f 32ff 	mov.w	r2, #4294967295
 800d85e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d862:	f10a 0a01 	add.w	sl, sl, #1
 800d866:	9304      	str	r3, [sp, #16]
 800d868:	9307      	str	r3, [sp, #28]
 800d86a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d86e:	931a      	str	r3, [sp, #104]	; 0x68
 800d870:	4654      	mov	r4, sl
 800d872:	2205      	movs	r2, #5
 800d874:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d878:	4851      	ldr	r0, [pc, #324]	; (800d9c0 <_svfiprintf_r+0x1ec>)
 800d87a:	f7f2 fcb9 	bl	80001f0 <memchr>
 800d87e:	9a04      	ldr	r2, [sp, #16]
 800d880:	b9d8      	cbnz	r0, 800d8ba <_svfiprintf_r+0xe6>
 800d882:	06d0      	lsls	r0, r2, #27
 800d884:	bf44      	itt	mi
 800d886:	2320      	movmi	r3, #32
 800d888:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d88c:	0711      	lsls	r1, r2, #28
 800d88e:	bf44      	itt	mi
 800d890:	232b      	movmi	r3, #43	; 0x2b
 800d892:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d896:	f89a 3000 	ldrb.w	r3, [sl]
 800d89a:	2b2a      	cmp	r3, #42	; 0x2a
 800d89c:	d015      	beq.n	800d8ca <_svfiprintf_r+0xf6>
 800d89e:	9a07      	ldr	r2, [sp, #28]
 800d8a0:	4654      	mov	r4, sl
 800d8a2:	2000      	movs	r0, #0
 800d8a4:	f04f 0c0a 	mov.w	ip, #10
 800d8a8:	4621      	mov	r1, r4
 800d8aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d8ae:	3b30      	subs	r3, #48	; 0x30
 800d8b0:	2b09      	cmp	r3, #9
 800d8b2:	d94e      	bls.n	800d952 <_svfiprintf_r+0x17e>
 800d8b4:	b1b0      	cbz	r0, 800d8e4 <_svfiprintf_r+0x110>
 800d8b6:	9207      	str	r2, [sp, #28]
 800d8b8:	e014      	b.n	800d8e4 <_svfiprintf_r+0x110>
 800d8ba:	eba0 0308 	sub.w	r3, r0, r8
 800d8be:	fa09 f303 	lsl.w	r3, r9, r3
 800d8c2:	4313      	orrs	r3, r2
 800d8c4:	9304      	str	r3, [sp, #16]
 800d8c6:	46a2      	mov	sl, r4
 800d8c8:	e7d2      	b.n	800d870 <_svfiprintf_r+0x9c>
 800d8ca:	9b03      	ldr	r3, [sp, #12]
 800d8cc:	1d19      	adds	r1, r3, #4
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	9103      	str	r1, [sp, #12]
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	bfbb      	ittet	lt
 800d8d6:	425b      	neglt	r3, r3
 800d8d8:	f042 0202 	orrlt.w	r2, r2, #2
 800d8dc:	9307      	strge	r3, [sp, #28]
 800d8de:	9307      	strlt	r3, [sp, #28]
 800d8e0:	bfb8      	it	lt
 800d8e2:	9204      	strlt	r2, [sp, #16]
 800d8e4:	7823      	ldrb	r3, [r4, #0]
 800d8e6:	2b2e      	cmp	r3, #46	; 0x2e
 800d8e8:	d10c      	bne.n	800d904 <_svfiprintf_r+0x130>
 800d8ea:	7863      	ldrb	r3, [r4, #1]
 800d8ec:	2b2a      	cmp	r3, #42	; 0x2a
 800d8ee:	d135      	bne.n	800d95c <_svfiprintf_r+0x188>
 800d8f0:	9b03      	ldr	r3, [sp, #12]
 800d8f2:	1d1a      	adds	r2, r3, #4
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	9203      	str	r2, [sp, #12]
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	bfb8      	it	lt
 800d8fc:	f04f 33ff 	movlt.w	r3, #4294967295
 800d900:	3402      	adds	r4, #2
 800d902:	9305      	str	r3, [sp, #20]
 800d904:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d9d0 <_svfiprintf_r+0x1fc>
 800d908:	7821      	ldrb	r1, [r4, #0]
 800d90a:	2203      	movs	r2, #3
 800d90c:	4650      	mov	r0, sl
 800d90e:	f7f2 fc6f 	bl	80001f0 <memchr>
 800d912:	b140      	cbz	r0, 800d926 <_svfiprintf_r+0x152>
 800d914:	2340      	movs	r3, #64	; 0x40
 800d916:	eba0 000a 	sub.w	r0, r0, sl
 800d91a:	fa03 f000 	lsl.w	r0, r3, r0
 800d91e:	9b04      	ldr	r3, [sp, #16]
 800d920:	4303      	orrs	r3, r0
 800d922:	3401      	adds	r4, #1
 800d924:	9304      	str	r3, [sp, #16]
 800d926:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d92a:	4826      	ldr	r0, [pc, #152]	; (800d9c4 <_svfiprintf_r+0x1f0>)
 800d92c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d930:	2206      	movs	r2, #6
 800d932:	f7f2 fc5d 	bl	80001f0 <memchr>
 800d936:	2800      	cmp	r0, #0
 800d938:	d038      	beq.n	800d9ac <_svfiprintf_r+0x1d8>
 800d93a:	4b23      	ldr	r3, [pc, #140]	; (800d9c8 <_svfiprintf_r+0x1f4>)
 800d93c:	bb1b      	cbnz	r3, 800d986 <_svfiprintf_r+0x1b2>
 800d93e:	9b03      	ldr	r3, [sp, #12]
 800d940:	3307      	adds	r3, #7
 800d942:	f023 0307 	bic.w	r3, r3, #7
 800d946:	3308      	adds	r3, #8
 800d948:	9303      	str	r3, [sp, #12]
 800d94a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d94c:	4433      	add	r3, r6
 800d94e:	9309      	str	r3, [sp, #36]	; 0x24
 800d950:	e767      	b.n	800d822 <_svfiprintf_r+0x4e>
 800d952:	fb0c 3202 	mla	r2, ip, r2, r3
 800d956:	460c      	mov	r4, r1
 800d958:	2001      	movs	r0, #1
 800d95a:	e7a5      	b.n	800d8a8 <_svfiprintf_r+0xd4>
 800d95c:	2300      	movs	r3, #0
 800d95e:	3401      	adds	r4, #1
 800d960:	9305      	str	r3, [sp, #20]
 800d962:	4619      	mov	r1, r3
 800d964:	f04f 0c0a 	mov.w	ip, #10
 800d968:	4620      	mov	r0, r4
 800d96a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d96e:	3a30      	subs	r2, #48	; 0x30
 800d970:	2a09      	cmp	r2, #9
 800d972:	d903      	bls.n	800d97c <_svfiprintf_r+0x1a8>
 800d974:	2b00      	cmp	r3, #0
 800d976:	d0c5      	beq.n	800d904 <_svfiprintf_r+0x130>
 800d978:	9105      	str	r1, [sp, #20]
 800d97a:	e7c3      	b.n	800d904 <_svfiprintf_r+0x130>
 800d97c:	fb0c 2101 	mla	r1, ip, r1, r2
 800d980:	4604      	mov	r4, r0
 800d982:	2301      	movs	r3, #1
 800d984:	e7f0      	b.n	800d968 <_svfiprintf_r+0x194>
 800d986:	ab03      	add	r3, sp, #12
 800d988:	9300      	str	r3, [sp, #0]
 800d98a:	462a      	mov	r2, r5
 800d98c:	4b0f      	ldr	r3, [pc, #60]	; (800d9cc <_svfiprintf_r+0x1f8>)
 800d98e:	a904      	add	r1, sp, #16
 800d990:	4638      	mov	r0, r7
 800d992:	f3af 8000 	nop.w
 800d996:	1c42      	adds	r2, r0, #1
 800d998:	4606      	mov	r6, r0
 800d99a:	d1d6      	bne.n	800d94a <_svfiprintf_r+0x176>
 800d99c:	89ab      	ldrh	r3, [r5, #12]
 800d99e:	065b      	lsls	r3, r3, #25
 800d9a0:	f53f af2c 	bmi.w	800d7fc <_svfiprintf_r+0x28>
 800d9a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d9a6:	b01d      	add	sp, #116	; 0x74
 800d9a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9ac:	ab03      	add	r3, sp, #12
 800d9ae:	9300      	str	r3, [sp, #0]
 800d9b0:	462a      	mov	r2, r5
 800d9b2:	4b06      	ldr	r3, [pc, #24]	; (800d9cc <_svfiprintf_r+0x1f8>)
 800d9b4:	a904      	add	r1, sp, #16
 800d9b6:	4638      	mov	r0, r7
 800d9b8:	f000 f9d4 	bl	800dd64 <_printf_i>
 800d9bc:	e7eb      	b.n	800d996 <_svfiprintf_r+0x1c2>
 800d9be:	bf00      	nop
 800d9c0:	08011198 	.word	0x08011198
 800d9c4:	080111a2 	.word	0x080111a2
 800d9c8:	00000000 	.word	0x00000000
 800d9cc:	0800d71d 	.word	0x0800d71d
 800d9d0:	0801119e 	.word	0x0801119e

0800d9d4 <__sfputc_r>:
 800d9d4:	6893      	ldr	r3, [r2, #8]
 800d9d6:	3b01      	subs	r3, #1
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	b410      	push	{r4}
 800d9dc:	6093      	str	r3, [r2, #8]
 800d9de:	da08      	bge.n	800d9f2 <__sfputc_r+0x1e>
 800d9e0:	6994      	ldr	r4, [r2, #24]
 800d9e2:	42a3      	cmp	r3, r4
 800d9e4:	db01      	blt.n	800d9ea <__sfputc_r+0x16>
 800d9e6:	290a      	cmp	r1, #10
 800d9e8:	d103      	bne.n	800d9f2 <__sfputc_r+0x1e>
 800d9ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d9ee:	f000 bb33 	b.w	800e058 <__swbuf_r>
 800d9f2:	6813      	ldr	r3, [r2, #0]
 800d9f4:	1c58      	adds	r0, r3, #1
 800d9f6:	6010      	str	r0, [r2, #0]
 800d9f8:	7019      	strb	r1, [r3, #0]
 800d9fa:	4608      	mov	r0, r1
 800d9fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800da00:	4770      	bx	lr

0800da02 <__sfputs_r>:
 800da02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da04:	4606      	mov	r6, r0
 800da06:	460f      	mov	r7, r1
 800da08:	4614      	mov	r4, r2
 800da0a:	18d5      	adds	r5, r2, r3
 800da0c:	42ac      	cmp	r4, r5
 800da0e:	d101      	bne.n	800da14 <__sfputs_r+0x12>
 800da10:	2000      	movs	r0, #0
 800da12:	e007      	b.n	800da24 <__sfputs_r+0x22>
 800da14:	f814 1b01 	ldrb.w	r1, [r4], #1
 800da18:	463a      	mov	r2, r7
 800da1a:	4630      	mov	r0, r6
 800da1c:	f7ff ffda 	bl	800d9d4 <__sfputc_r>
 800da20:	1c43      	adds	r3, r0, #1
 800da22:	d1f3      	bne.n	800da0c <__sfputs_r+0xa>
 800da24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800da28 <_vfiprintf_r>:
 800da28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da2c:	460d      	mov	r5, r1
 800da2e:	b09d      	sub	sp, #116	; 0x74
 800da30:	4614      	mov	r4, r2
 800da32:	4698      	mov	r8, r3
 800da34:	4606      	mov	r6, r0
 800da36:	b118      	cbz	r0, 800da40 <_vfiprintf_r+0x18>
 800da38:	6983      	ldr	r3, [r0, #24]
 800da3a:	b90b      	cbnz	r3, 800da40 <_vfiprintf_r+0x18>
 800da3c:	f7ff fd0a 	bl	800d454 <__sinit>
 800da40:	4b89      	ldr	r3, [pc, #548]	; (800dc68 <_vfiprintf_r+0x240>)
 800da42:	429d      	cmp	r5, r3
 800da44:	d11b      	bne.n	800da7e <_vfiprintf_r+0x56>
 800da46:	6875      	ldr	r5, [r6, #4]
 800da48:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800da4a:	07d9      	lsls	r1, r3, #31
 800da4c:	d405      	bmi.n	800da5a <_vfiprintf_r+0x32>
 800da4e:	89ab      	ldrh	r3, [r5, #12]
 800da50:	059a      	lsls	r2, r3, #22
 800da52:	d402      	bmi.n	800da5a <_vfiprintf_r+0x32>
 800da54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800da56:	f7ff fdad 	bl	800d5b4 <__retarget_lock_acquire_recursive>
 800da5a:	89ab      	ldrh	r3, [r5, #12]
 800da5c:	071b      	lsls	r3, r3, #28
 800da5e:	d501      	bpl.n	800da64 <_vfiprintf_r+0x3c>
 800da60:	692b      	ldr	r3, [r5, #16]
 800da62:	b9eb      	cbnz	r3, 800daa0 <_vfiprintf_r+0x78>
 800da64:	4629      	mov	r1, r5
 800da66:	4630      	mov	r0, r6
 800da68:	f000 fb5a 	bl	800e120 <__swsetup_r>
 800da6c:	b1c0      	cbz	r0, 800daa0 <_vfiprintf_r+0x78>
 800da6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800da70:	07dc      	lsls	r4, r3, #31
 800da72:	d50e      	bpl.n	800da92 <_vfiprintf_r+0x6a>
 800da74:	f04f 30ff 	mov.w	r0, #4294967295
 800da78:	b01d      	add	sp, #116	; 0x74
 800da7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da7e:	4b7b      	ldr	r3, [pc, #492]	; (800dc6c <_vfiprintf_r+0x244>)
 800da80:	429d      	cmp	r5, r3
 800da82:	d101      	bne.n	800da88 <_vfiprintf_r+0x60>
 800da84:	68b5      	ldr	r5, [r6, #8]
 800da86:	e7df      	b.n	800da48 <_vfiprintf_r+0x20>
 800da88:	4b79      	ldr	r3, [pc, #484]	; (800dc70 <_vfiprintf_r+0x248>)
 800da8a:	429d      	cmp	r5, r3
 800da8c:	bf08      	it	eq
 800da8e:	68f5      	ldreq	r5, [r6, #12]
 800da90:	e7da      	b.n	800da48 <_vfiprintf_r+0x20>
 800da92:	89ab      	ldrh	r3, [r5, #12]
 800da94:	0598      	lsls	r0, r3, #22
 800da96:	d4ed      	bmi.n	800da74 <_vfiprintf_r+0x4c>
 800da98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800da9a:	f7ff fd8c 	bl	800d5b6 <__retarget_lock_release_recursive>
 800da9e:	e7e9      	b.n	800da74 <_vfiprintf_r+0x4c>
 800daa0:	2300      	movs	r3, #0
 800daa2:	9309      	str	r3, [sp, #36]	; 0x24
 800daa4:	2320      	movs	r3, #32
 800daa6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800daaa:	f8cd 800c 	str.w	r8, [sp, #12]
 800daae:	2330      	movs	r3, #48	; 0x30
 800dab0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800dc74 <_vfiprintf_r+0x24c>
 800dab4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dab8:	f04f 0901 	mov.w	r9, #1
 800dabc:	4623      	mov	r3, r4
 800dabe:	469a      	mov	sl, r3
 800dac0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dac4:	b10a      	cbz	r2, 800daca <_vfiprintf_r+0xa2>
 800dac6:	2a25      	cmp	r2, #37	; 0x25
 800dac8:	d1f9      	bne.n	800dabe <_vfiprintf_r+0x96>
 800daca:	ebba 0b04 	subs.w	fp, sl, r4
 800dace:	d00b      	beq.n	800dae8 <_vfiprintf_r+0xc0>
 800dad0:	465b      	mov	r3, fp
 800dad2:	4622      	mov	r2, r4
 800dad4:	4629      	mov	r1, r5
 800dad6:	4630      	mov	r0, r6
 800dad8:	f7ff ff93 	bl	800da02 <__sfputs_r>
 800dadc:	3001      	adds	r0, #1
 800dade:	f000 80aa 	beq.w	800dc36 <_vfiprintf_r+0x20e>
 800dae2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dae4:	445a      	add	r2, fp
 800dae6:	9209      	str	r2, [sp, #36]	; 0x24
 800dae8:	f89a 3000 	ldrb.w	r3, [sl]
 800daec:	2b00      	cmp	r3, #0
 800daee:	f000 80a2 	beq.w	800dc36 <_vfiprintf_r+0x20e>
 800daf2:	2300      	movs	r3, #0
 800daf4:	f04f 32ff 	mov.w	r2, #4294967295
 800daf8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dafc:	f10a 0a01 	add.w	sl, sl, #1
 800db00:	9304      	str	r3, [sp, #16]
 800db02:	9307      	str	r3, [sp, #28]
 800db04:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800db08:	931a      	str	r3, [sp, #104]	; 0x68
 800db0a:	4654      	mov	r4, sl
 800db0c:	2205      	movs	r2, #5
 800db0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db12:	4858      	ldr	r0, [pc, #352]	; (800dc74 <_vfiprintf_r+0x24c>)
 800db14:	f7f2 fb6c 	bl	80001f0 <memchr>
 800db18:	9a04      	ldr	r2, [sp, #16]
 800db1a:	b9d8      	cbnz	r0, 800db54 <_vfiprintf_r+0x12c>
 800db1c:	06d1      	lsls	r1, r2, #27
 800db1e:	bf44      	itt	mi
 800db20:	2320      	movmi	r3, #32
 800db22:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800db26:	0713      	lsls	r3, r2, #28
 800db28:	bf44      	itt	mi
 800db2a:	232b      	movmi	r3, #43	; 0x2b
 800db2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800db30:	f89a 3000 	ldrb.w	r3, [sl]
 800db34:	2b2a      	cmp	r3, #42	; 0x2a
 800db36:	d015      	beq.n	800db64 <_vfiprintf_r+0x13c>
 800db38:	9a07      	ldr	r2, [sp, #28]
 800db3a:	4654      	mov	r4, sl
 800db3c:	2000      	movs	r0, #0
 800db3e:	f04f 0c0a 	mov.w	ip, #10
 800db42:	4621      	mov	r1, r4
 800db44:	f811 3b01 	ldrb.w	r3, [r1], #1
 800db48:	3b30      	subs	r3, #48	; 0x30
 800db4a:	2b09      	cmp	r3, #9
 800db4c:	d94e      	bls.n	800dbec <_vfiprintf_r+0x1c4>
 800db4e:	b1b0      	cbz	r0, 800db7e <_vfiprintf_r+0x156>
 800db50:	9207      	str	r2, [sp, #28]
 800db52:	e014      	b.n	800db7e <_vfiprintf_r+0x156>
 800db54:	eba0 0308 	sub.w	r3, r0, r8
 800db58:	fa09 f303 	lsl.w	r3, r9, r3
 800db5c:	4313      	orrs	r3, r2
 800db5e:	9304      	str	r3, [sp, #16]
 800db60:	46a2      	mov	sl, r4
 800db62:	e7d2      	b.n	800db0a <_vfiprintf_r+0xe2>
 800db64:	9b03      	ldr	r3, [sp, #12]
 800db66:	1d19      	adds	r1, r3, #4
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	9103      	str	r1, [sp, #12]
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	bfbb      	ittet	lt
 800db70:	425b      	neglt	r3, r3
 800db72:	f042 0202 	orrlt.w	r2, r2, #2
 800db76:	9307      	strge	r3, [sp, #28]
 800db78:	9307      	strlt	r3, [sp, #28]
 800db7a:	bfb8      	it	lt
 800db7c:	9204      	strlt	r2, [sp, #16]
 800db7e:	7823      	ldrb	r3, [r4, #0]
 800db80:	2b2e      	cmp	r3, #46	; 0x2e
 800db82:	d10c      	bne.n	800db9e <_vfiprintf_r+0x176>
 800db84:	7863      	ldrb	r3, [r4, #1]
 800db86:	2b2a      	cmp	r3, #42	; 0x2a
 800db88:	d135      	bne.n	800dbf6 <_vfiprintf_r+0x1ce>
 800db8a:	9b03      	ldr	r3, [sp, #12]
 800db8c:	1d1a      	adds	r2, r3, #4
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	9203      	str	r2, [sp, #12]
 800db92:	2b00      	cmp	r3, #0
 800db94:	bfb8      	it	lt
 800db96:	f04f 33ff 	movlt.w	r3, #4294967295
 800db9a:	3402      	adds	r4, #2
 800db9c:	9305      	str	r3, [sp, #20]
 800db9e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800dc84 <_vfiprintf_r+0x25c>
 800dba2:	7821      	ldrb	r1, [r4, #0]
 800dba4:	2203      	movs	r2, #3
 800dba6:	4650      	mov	r0, sl
 800dba8:	f7f2 fb22 	bl	80001f0 <memchr>
 800dbac:	b140      	cbz	r0, 800dbc0 <_vfiprintf_r+0x198>
 800dbae:	2340      	movs	r3, #64	; 0x40
 800dbb0:	eba0 000a 	sub.w	r0, r0, sl
 800dbb4:	fa03 f000 	lsl.w	r0, r3, r0
 800dbb8:	9b04      	ldr	r3, [sp, #16]
 800dbba:	4303      	orrs	r3, r0
 800dbbc:	3401      	adds	r4, #1
 800dbbe:	9304      	str	r3, [sp, #16]
 800dbc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dbc4:	482c      	ldr	r0, [pc, #176]	; (800dc78 <_vfiprintf_r+0x250>)
 800dbc6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dbca:	2206      	movs	r2, #6
 800dbcc:	f7f2 fb10 	bl	80001f0 <memchr>
 800dbd0:	2800      	cmp	r0, #0
 800dbd2:	d03f      	beq.n	800dc54 <_vfiprintf_r+0x22c>
 800dbd4:	4b29      	ldr	r3, [pc, #164]	; (800dc7c <_vfiprintf_r+0x254>)
 800dbd6:	bb1b      	cbnz	r3, 800dc20 <_vfiprintf_r+0x1f8>
 800dbd8:	9b03      	ldr	r3, [sp, #12]
 800dbda:	3307      	adds	r3, #7
 800dbdc:	f023 0307 	bic.w	r3, r3, #7
 800dbe0:	3308      	adds	r3, #8
 800dbe2:	9303      	str	r3, [sp, #12]
 800dbe4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dbe6:	443b      	add	r3, r7
 800dbe8:	9309      	str	r3, [sp, #36]	; 0x24
 800dbea:	e767      	b.n	800dabc <_vfiprintf_r+0x94>
 800dbec:	fb0c 3202 	mla	r2, ip, r2, r3
 800dbf0:	460c      	mov	r4, r1
 800dbf2:	2001      	movs	r0, #1
 800dbf4:	e7a5      	b.n	800db42 <_vfiprintf_r+0x11a>
 800dbf6:	2300      	movs	r3, #0
 800dbf8:	3401      	adds	r4, #1
 800dbfa:	9305      	str	r3, [sp, #20]
 800dbfc:	4619      	mov	r1, r3
 800dbfe:	f04f 0c0a 	mov.w	ip, #10
 800dc02:	4620      	mov	r0, r4
 800dc04:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dc08:	3a30      	subs	r2, #48	; 0x30
 800dc0a:	2a09      	cmp	r2, #9
 800dc0c:	d903      	bls.n	800dc16 <_vfiprintf_r+0x1ee>
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d0c5      	beq.n	800db9e <_vfiprintf_r+0x176>
 800dc12:	9105      	str	r1, [sp, #20]
 800dc14:	e7c3      	b.n	800db9e <_vfiprintf_r+0x176>
 800dc16:	fb0c 2101 	mla	r1, ip, r1, r2
 800dc1a:	4604      	mov	r4, r0
 800dc1c:	2301      	movs	r3, #1
 800dc1e:	e7f0      	b.n	800dc02 <_vfiprintf_r+0x1da>
 800dc20:	ab03      	add	r3, sp, #12
 800dc22:	9300      	str	r3, [sp, #0]
 800dc24:	462a      	mov	r2, r5
 800dc26:	4b16      	ldr	r3, [pc, #88]	; (800dc80 <_vfiprintf_r+0x258>)
 800dc28:	a904      	add	r1, sp, #16
 800dc2a:	4630      	mov	r0, r6
 800dc2c:	f3af 8000 	nop.w
 800dc30:	4607      	mov	r7, r0
 800dc32:	1c78      	adds	r0, r7, #1
 800dc34:	d1d6      	bne.n	800dbe4 <_vfiprintf_r+0x1bc>
 800dc36:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dc38:	07d9      	lsls	r1, r3, #31
 800dc3a:	d405      	bmi.n	800dc48 <_vfiprintf_r+0x220>
 800dc3c:	89ab      	ldrh	r3, [r5, #12]
 800dc3e:	059a      	lsls	r2, r3, #22
 800dc40:	d402      	bmi.n	800dc48 <_vfiprintf_r+0x220>
 800dc42:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dc44:	f7ff fcb7 	bl	800d5b6 <__retarget_lock_release_recursive>
 800dc48:	89ab      	ldrh	r3, [r5, #12]
 800dc4a:	065b      	lsls	r3, r3, #25
 800dc4c:	f53f af12 	bmi.w	800da74 <_vfiprintf_r+0x4c>
 800dc50:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dc52:	e711      	b.n	800da78 <_vfiprintf_r+0x50>
 800dc54:	ab03      	add	r3, sp, #12
 800dc56:	9300      	str	r3, [sp, #0]
 800dc58:	462a      	mov	r2, r5
 800dc5a:	4b09      	ldr	r3, [pc, #36]	; (800dc80 <_vfiprintf_r+0x258>)
 800dc5c:	a904      	add	r1, sp, #16
 800dc5e:	4630      	mov	r0, r6
 800dc60:	f000 f880 	bl	800dd64 <_printf_i>
 800dc64:	e7e4      	b.n	800dc30 <_vfiprintf_r+0x208>
 800dc66:	bf00      	nop
 800dc68:	08011158 	.word	0x08011158
 800dc6c:	08011178 	.word	0x08011178
 800dc70:	08011138 	.word	0x08011138
 800dc74:	08011198 	.word	0x08011198
 800dc78:	080111a2 	.word	0x080111a2
 800dc7c:	00000000 	.word	0x00000000
 800dc80:	0800da03 	.word	0x0800da03
 800dc84:	0801119e 	.word	0x0801119e

0800dc88 <_printf_common>:
 800dc88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dc8c:	4616      	mov	r6, r2
 800dc8e:	4699      	mov	r9, r3
 800dc90:	688a      	ldr	r2, [r1, #8]
 800dc92:	690b      	ldr	r3, [r1, #16]
 800dc94:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800dc98:	4293      	cmp	r3, r2
 800dc9a:	bfb8      	it	lt
 800dc9c:	4613      	movlt	r3, r2
 800dc9e:	6033      	str	r3, [r6, #0]
 800dca0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800dca4:	4607      	mov	r7, r0
 800dca6:	460c      	mov	r4, r1
 800dca8:	b10a      	cbz	r2, 800dcae <_printf_common+0x26>
 800dcaa:	3301      	adds	r3, #1
 800dcac:	6033      	str	r3, [r6, #0]
 800dcae:	6823      	ldr	r3, [r4, #0]
 800dcb0:	0699      	lsls	r1, r3, #26
 800dcb2:	bf42      	ittt	mi
 800dcb4:	6833      	ldrmi	r3, [r6, #0]
 800dcb6:	3302      	addmi	r3, #2
 800dcb8:	6033      	strmi	r3, [r6, #0]
 800dcba:	6825      	ldr	r5, [r4, #0]
 800dcbc:	f015 0506 	ands.w	r5, r5, #6
 800dcc0:	d106      	bne.n	800dcd0 <_printf_common+0x48>
 800dcc2:	f104 0a19 	add.w	sl, r4, #25
 800dcc6:	68e3      	ldr	r3, [r4, #12]
 800dcc8:	6832      	ldr	r2, [r6, #0]
 800dcca:	1a9b      	subs	r3, r3, r2
 800dccc:	42ab      	cmp	r3, r5
 800dcce:	dc26      	bgt.n	800dd1e <_printf_common+0x96>
 800dcd0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800dcd4:	1e13      	subs	r3, r2, #0
 800dcd6:	6822      	ldr	r2, [r4, #0]
 800dcd8:	bf18      	it	ne
 800dcda:	2301      	movne	r3, #1
 800dcdc:	0692      	lsls	r2, r2, #26
 800dcde:	d42b      	bmi.n	800dd38 <_printf_common+0xb0>
 800dce0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800dce4:	4649      	mov	r1, r9
 800dce6:	4638      	mov	r0, r7
 800dce8:	47c0      	blx	r8
 800dcea:	3001      	adds	r0, #1
 800dcec:	d01e      	beq.n	800dd2c <_printf_common+0xa4>
 800dcee:	6823      	ldr	r3, [r4, #0]
 800dcf0:	68e5      	ldr	r5, [r4, #12]
 800dcf2:	6832      	ldr	r2, [r6, #0]
 800dcf4:	f003 0306 	and.w	r3, r3, #6
 800dcf8:	2b04      	cmp	r3, #4
 800dcfa:	bf08      	it	eq
 800dcfc:	1aad      	subeq	r5, r5, r2
 800dcfe:	68a3      	ldr	r3, [r4, #8]
 800dd00:	6922      	ldr	r2, [r4, #16]
 800dd02:	bf0c      	ite	eq
 800dd04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dd08:	2500      	movne	r5, #0
 800dd0a:	4293      	cmp	r3, r2
 800dd0c:	bfc4      	itt	gt
 800dd0e:	1a9b      	subgt	r3, r3, r2
 800dd10:	18ed      	addgt	r5, r5, r3
 800dd12:	2600      	movs	r6, #0
 800dd14:	341a      	adds	r4, #26
 800dd16:	42b5      	cmp	r5, r6
 800dd18:	d11a      	bne.n	800dd50 <_printf_common+0xc8>
 800dd1a:	2000      	movs	r0, #0
 800dd1c:	e008      	b.n	800dd30 <_printf_common+0xa8>
 800dd1e:	2301      	movs	r3, #1
 800dd20:	4652      	mov	r2, sl
 800dd22:	4649      	mov	r1, r9
 800dd24:	4638      	mov	r0, r7
 800dd26:	47c0      	blx	r8
 800dd28:	3001      	adds	r0, #1
 800dd2a:	d103      	bne.n	800dd34 <_printf_common+0xac>
 800dd2c:	f04f 30ff 	mov.w	r0, #4294967295
 800dd30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd34:	3501      	adds	r5, #1
 800dd36:	e7c6      	b.n	800dcc6 <_printf_common+0x3e>
 800dd38:	18e1      	adds	r1, r4, r3
 800dd3a:	1c5a      	adds	r2, r3, #1
 800dd3c:	2030      	movs	r0, #48	; 0x30
 800dd3e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800dd42:	4422      	add	r2, r4
 800dd44:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800dd48:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800dd4c:	3302      	adds	r3, #2
 800dd4e:	e7c7      	b.n	800dce0 <_printf_common+0x58>
 800dd50:	2301      	movs	r3, #1
 800dd52:	4622      	mov	r2, r4
 800dd54:	4649      	mov	r1, r9
 800dd56:	4638      	mov	r0, r7
 800dd58:	47c0      	blx	r8
 800dd5a:	3001      	adds	r0, #1
 800dd5c:	d0e6      	beq.n	800dd2c <_printf_common+0xa4>
 800dd5e:	3601      	adds	r6, #1
 800dd60:	e7d9      	b.n	800dd16 <_printf_common+0x8e>
	...

0800dd64 <_printf_i>:
 800dd64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dd68:	460c      	mov	r4, r1
 800dd6a:	4691      	mov	r9, r2
 800dd6c:	7e27      	ldrb	r7, [r4, #24]
 800dd6e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800dd70:	2f78      	cmp	r7, #120	; 0x78
 800dd72:	4680      	mov	r8, r0
 800dd74:	469a      	mov	sl, r3
 800dd76:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800dd7a:	d807      	bhi.n	800dd8c <_printf_i+0x28>
 800dd7c:	2f62      	cmp	r7, #98	; 0x62
 800dd7e:	d80a      	bhi.n	800dd96 <_printf_i+0x32>
 800dd80:	2f00      	cmp	r7, #0
 800dd82:	f000 80d8 	beq.w	800df36 <_printf_i+0x1d2>
 800dd86:	2f58      	cmp	r7, #88	; 0x58
 800dd88:	f000 80a3 	beq.w	800ded2 <_printf_i+0x16e>
 800dd8c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800dd90:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800dd94:	e03a      	b.n	800de0c <_printf_i+0xa8>
 800dd96:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800dd9a:	2b15      	cmp	r3, #21
 800dd9c:	d8f6      	bhi.n	800dd8c <_printf_i+0x28>
 800dd9e:	a001      	add	r0, pc, #4	; (adr r0, 800dda4 <_printf_i+0x40>)
 800dda0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800dda4:	0800ddfd 	.word	0x0800ddfd
 800dda8:	0800de11 	.word	0x0800de11
 800ddac:	0800dd8d 	.word	0x0800dd8d
 800ddb0:	0800dd8d 	.word	0x0800dd8d
 800ddb4:	0800dd8d 	.word	0x0800dd8d
 800ddb8:	0800dd8d 	.word	0x0800dd8d
 800ddbc:	0800de11 	.word	0x0800de11
 800ddc0:	0800dd8d 	.word	0x0800dd8d
 800ddc4:	0800dd8d 	.word	0x0800dd8d
 800ddc8:	0800dd8d 	.word	0x0800dd8d
 800ddcc:	0800dd8d 	.word	0x0800dd8d
 800ddd0:	0800df1d 	.word	0x0800df1d
 800ddd4:	0800de41 	.word	0x0800de41
 800ddd8:	0800deff 	.word	0x0800deff
 800dddc:	0800dd8d 	.word	0x0800dd8d
 800dde0:	0800dd8d 	.word	0x0800dd8d
 800dde4:	0800df3f 	.word	0x0800df3f
 800dde8:	0800dd8d 	.word	0x0800dd8d
 800ddec:	0800de41 	.word	0x0800de41
 800ddf0:	0800dd8d 	.word	0x0800dd8d
 800ddf4:	0800dd8d 	.word	0x0800dd8d
 800ddf8:	0800df07 	.word	0x0800df07
 800ddfc:	680b      	ldr	r3, [r1, #0]
 800ddfe:	1d1a      	adds	r2, r3, #4
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	600a      	str	r2, [r1, #0]
 800de04:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800de08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800de0c:	2301      	movs	r3, #1
 800de0e:	e0a3      	b.n	800df58 <_printf_i+0x1f4>
 800de10:	6825      	ldr	r5, [r4, #0]
 800de12:	6808      	ldr	r0, [r1, #0]
 800de14:	062e      	lsls	r6, r5, #24
 800de16:	f100 0304 	add.w	r3, r0, #4
 800de1a:	d50a      	bpl.n	800de32 <_printf_i+0xce>
 800de1c:	6805      	ldr	r5, [r0, #0]
 800de1e:	600b      	str	r3, [r1, #0]
 800de20:	2d00      	cmp	r5, #0
 800de22:	da03      	bge.n	800de2c <_printf_i+0xc8>
 800de24:	232d      	movs	r3, #45	; 0x2d
 800de26:	426d      	negs	r5, r5
 800de28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800de2c:	485e      	ldr	r0, [pc, #376]	; (800dfa8 <_printf_i+0x244>)
 800de2e:	230a      	movs	r3, #10
 800de30:	e019      	b.n	800de66 <_printf_i+0x102>
 800de32:	f015 0f40 	tst.w	r5, #64	; 0x40
 800de36:	6805      	ldr	r5, [r0, #0]
 800de38:	600b      	str	r3, [r1, #0]
 800de3a:	bf18      	it	ne
 800de3c:	b22d      	sxthne	r5, r5
 800de3e:	e7ef      	b.n	800de20 <_printf_i+0xbc>
 800de40:	680b      	ldr	r3, [r1, #0]
 800de42:	6825      	ldr	r5, [r4, #0]
 800de44:	1d18      	adds	r0, r3, #4
 800de46:	6008      	str	r0, [r1, #0]
 800de48:	0628      	lsls	r0, r5, #24
 800de4a:	d501      	bpl.n	800de50 <_printf_i+0xec>
 800de4c:	681d      	ldr	r5, [r3, #0]
 800de4e:	e002      	b.n	800de56 <_printf_i+0xf2>
 800de50:	0669      	lsls	r1, r5, #25
 800de52:	d5fb      	bpl.n	800de4c <_printf_i+0xe8>
 800de54:	881d      	ldrh	r5, [r3, #0]
 800de56:	4854      	ldr	r0, [pc, #336]	; (800dfa8 <_printf_i+0x244>)
 800de58:	2f6f      	cmp	r7, #111	; 0x6f
 800de5a:	bf0c      	ite	eq
 800de5c:	2308      	moveq	r3, #8
 800de5e:	230a      	movne	r3, #10
 800de60:	2100      	movs	r1, #0
 800de62:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800de66:	6866      	ldr	r6, [r4, #4]
 800de68:	60a6      	str	r6, [r4, #8]
 800de6a:	2e00      	cmp	r6, #0
 800de6c:	bfa2      	ittt	ge
 800de6e:	6821      	ldrge	r1, [r4, #0]
 800de70:	f021 0104 	bicge.w	r1, r1, #4
 800de74:	6021      	strge	r1, [r4, #0]
 800de76:	b90d      	cbnz	r5, 800de7c <_printf_i+0x118>
 800de78:	2e00      	cmp	r6, #0
 800de7a:	d04d      	beq.n	800df18 <_printf_i+0x1b4>
 800de7c:	4616      	mov	r6, r2
 800de7e:	fbb5 f1f3 	udiv	r1, r5, r3
 800de82:	fb03 5711 	mls	r7, r3, r1, r5
 800de86:	5dc7      	ldrb	r7, [r0, r7]
 800de88:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800de8c:	462f      	mov	r7, r5
 800de8e:	42bb      	cmp	r3, r7
 800de90:	460d      	mov	r5, r1
 800de92:	d9f4      	bls.n	800de7e <_printf_i+0x11a>
 800de94:	2b08      	cmp	r3, #8
 800de96:	d10b      	bne.n	800deb0 <_printf_i+0x14c>
 800de98:	6823      	ldr	r3, [r4, #0]
 800de9a:	07df      	lsls	r7, r3, #31
 800de9c:	d508      	bpl.n	800deb0 <_printf_i+0x14c>
 800de9e:	6923      	ldr	r3, [r4, #16]
 800dea0:	6861      	ldr	r1, [r4, #4]
 800dea2:	4299      	cmp	r1, r3
 800dea4:	bfde      	ittt	le
 800dea6:	2330      	movle	r3, #48	; 0x30
 800dea8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800deac:	f106 36ff 	addle.w	r6, r6, #4294967295
 800deb0:	1b92      	subs	r2, r2, r6
 800deb2:	6122      	str	r2, [r4, #16]
 800deb4:	f8cd a000 	str.w	sl, [sp]
 800deb8:	464b      	mov	r3, r9
 800deba:	aa03      	add	r2, sp, #12
 800debc:	4621      	mov	r1, r4
 800debe:	4640      	mov	r0, r8
 800dec0:	f7ff fee2 	bl	800dc88 <_printf_common>
 800dec4:	3001      	adds	r0, #1
 800dec6:	d14c      	bne.n	800df62 <_printf_i+0x1fe>
 800dec8:	f04f 30ff 	mov.w	r0, #4294967295
 800decc:	b004      	add	sp, #16
 800dece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ded2:	4835      	ldr	r0, [pc, #212]	; (800dfa8 <_printf_i+0x244>)
 800ded4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ded8:	6823      	ldr	r3, [r4, #0]
 800deda:	680e      	ldr	r6, [r1, #0]
 800dedc:	061f      	lsls	r7, r3, #24
 800dede:	f856 5b04 	ldr.w	r5, [r6], #4
 800dee2:	600e      	str	r6, [r1, #0]
 800dee4:	d514      	bpl.n	800df10 <_printf_i+0x1ac>
 800dee6:	07d9      	lsls	r1, r3, #31
 800dee8:	bf44      	itt	mi
 800deea:	f043 0320 	orrmi.w	r3, r3, #32
 800deee:	6023      	strmi	r3, [r4, #0]
 800def0:	b91d      	cbnz	r5, 800defa <_printf_i+0x196>
 800def2:	6823      	ldr	r3, [r4, #0]
 800def4:	f023 0320 	bic.w	r3, r3, #32
 800def8:	6023      	str	r3, [r4, #0]
 800defa:	2310      	movs	r3, #16
 800defc:	e7b0      	b.n	800de60 <_printf_i+0xfc>
 800defe:	6823      	ldr	r3, [r4, #0]
 800df00:	f043 0320 	orr.w	r3, r3, #32
 800df04:	6023      	str	r3, [r4, #0]
 800df06:	2378      	movs	r3, #120	; 0x78
 800df08:	4828      	ldr	r0, [pc, #160]	; (800dfac <_printf_i+0x248>)
 800df0a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800df0e:	e7e3      	b.n	800ded8 <_printf_i+0x174>
 800df10:	065e      	lsls	r6, r3, #25
 800df12:	bf48      	it	mi
 800df14:	b2ad      	uxthmi	r5, r5
 800df16:	e7e6      	b.n	800dee6 <_printf_i+0x182>
 800df18:	4616      	mov	r6, r2
 800df1a:	e7bb      	b.n	800de94 <_printf_i+0x130>
 800df1c:	680b      	ldr	r3, [r1, #0]
 800df1e:	6826      	ldr	r6, [r4, #0]
 800df20:	6960      	ldr	r0, [r4, #20]
 800df22:	1d1d      	adds	r5, r3, #4
 800df24:	600d      	str	r5, [r1, #0]
 800df26:	0635      	lsls	r5, r6, #24
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	d501      	bpl.n	800df30 <_printf_i+0x1cc>
 800df2c:	6018      	str	r0, [r3, #0]
 800df2e:	e002      	b.n	800df36 <_printf_i+0x1d2>
 800df30:	0671      	lsls	r1, r6, #25
 800df32:	d5fb      	bpl.n	800df2c <_printf_i+0x1c8>
 800df34:	8018      	strh	r0, [r3, #0]
 800df36:	2300      	movs	r3, #0
 800df38:	6123      	str	r3, [r4, #16]
 800df3a:	4616      	mov	r6, r2
 800df3c:	e7ba      	b.n	800deb4 <_printf_i+0x150>
 800df3e:	680b      	ldr	r3, [r1, #0]
 800df40:	1d1a      	adds	r2, r3, #4
 800df42:	600a      	str	r2, [r1, #0]
 800df44:	681e      	ldr	r6, [r3, #0]
 800df46:	6862      	ldr	r2, [r4, #4]
 800df48:	2100      	movs	r1, #0
 800df4a:	4630      	mov	r0, r6
 800df4c:	f7f2 f950 	bl	80001f0 <memchr>
 800df50:	b108      	cbz	r0, 800df56 <_printf_i+0x1f2>
 800df52:	1b80      	subs	r0, r0, r6
 800df54:	6060      	str	r0, [r4, #4]
 800df56:	6863      	ldr	r3, [r4, #4]
 800df58:	6123      	str	r3, [r4, #16]
 800df5a:	2300      	movs	r3, #0
 800df5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800df60:	e7a8      	b.n	800deb4 <_printf_i+0x150>
 800df62:	6923      	ldr	r3, [r4, #16]
 800df64:	4632      	mov	r2, r6
 800df66:	4649      	mov	r1, r9
 800df68:	4640      	mov	r0, r8
 800df6a:	47d0      	blx	sl
 800df6c:	3001      	adds	r0, #1
 800df6e:	d0ab      	beq.n	800dec8 <_printf_i+0x164>
 800df70:	6823      	ldr	r3, [r4, #0]
 800df72:	079b      	lsls	r3, r3, #30
 800df74:	d413      	bmi.n	800df9e <_printf_i+0x23a>
 800df76:	68e0      	ldr	r0, [r4, #12]
 800df78:	9b03      	ldr	r3, [sp, #12]
 800df7a:	4298      	cmp	r0, r3
 800df7c:	bfb8      	it	lt
 800df7e:	4618      	movlt	r0, r3
 800df80:	e7a4      	b.n	800decc <_printf_i+0x168>
 800df82:	2301      	movs	r3, #1
 800df84:	4632      	mov	r2, r6
 800df86:	4649      	mov	r1, r9
 800df88:	4640      	mov	r0, r8
 800df8a:	47d0      	blx	sl
 800df8c:	3001      	adds	r0, #1
 800df8e:	d09b      	beq.n	800dec8 <_printf_i+0x164>
 800df90:	3501      	adds	r5, #1
 800df92:	68e3      	ldr	r3, [r4, #12]
 800df94:	9903      	ldr	r1, [sp, #12]
 800df96:	1a5b      	subs	r3, r3, r1
 800df98:	42ab      	cmp	r3, r5
 800df9a:	dcf2      	bgt.n	800df82 <_printf_i+0x21e>
 800df9c:	e7eb      	b.n	800df76 <_printf_i+0x212>
 800df9e:	2500      	movs	r5, #0
 800dfa0:	f104 0619 	add.w	r6, r4, #25
 800dfa4:	e7f5      	b.n	800df92 <_printf_i+0x22e>
 800dfa6:	bf00      	nop
 800dfa8:	080111a9 	.word	0x080111a9
 800dfac:	080111ba 	.word	0x080111ba

0800dfb0 <_sbrk_r>:
 800dfb0:	b538      	push	{r3, r4, r5, lr}
 800dfb2:	4d06      	ldr	r5, [pc, #24]	; (800dfcc <_sbrk_r+0x1c>)
 800dfb4:	2300      	movs	r3, #0
 800dfb6:	4604      	mov	r4, r0
 800dfb8:	4608      	mov	r0, r1
 800dfba:	602b      	str	r3, [r5, #0]
 800dfbc:	f7f2 fd82 	bl	8000ac4 <_sbrk>
 800dfc0:	1c43      	adds	r3, r0, #1
 800dfc2:	d102      	bne.n	800dfca <_sbrk_r+0x1a>
 800dfc4:	682b      	ldr	r3, [r5, #0]
 800dfc6:	b103      	cbz	r3, 800dfca <_sbrk_r+0x1a>
 800dfc8:	6023      	str	r3, [r4, #0]
 800dfca:	bd38      	pop	{r3, r4, r5, pc}
 800dfcc:	20006890 	.word	0x20006890

0800dfd0 <__sread>:
 800dfd0:	b510      	push	{r4, lr}
 800dfd2:	460c      	mov	r4, r1
 800dfd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dfd8:	f000 fa92 	bl	800e500 <_read_r>
 800dfdc:	2800      	cmp	r0, #0
 800dfde:	bfab      	itete	ge
 800dfe0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800dfe2:	89a3      	ldrhlt	r3, [r4, #12]
 800dfe4:	181b      	addge	r3, r3, r0
 800dfe6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800dfea:	bfac      	ite	ge
 800dfec:	6563      	strge	r3, [r4, #84]	; 0x54
 800dfee:	81a3      	strhlt	r3, [r4, #12]
 800dff0:	bd10      	pop	{r4, pc}

0800dff2 <__swrite>:
 800dff2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dff6:	461f      	mov	r7, r3
 800dff8:	898b      	ldrh	r3, [r1, #12]
 800dffa:	05db      	lsls	r3, r3, #23
 800dffc:	4605      	mov	r5, r0
 800dffe:	460c      	mov	r4, r1
 800e000:	4616      	mov	r6, r2
 800e002:	d505      	bpl.n	800e010 <__swrite+0x1e>
 800e004:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e008:	2302      	movs	r3, #2
 800e00a:	2200      	movs	r2, #0
 800e00c:	f000 f9d0 	bl	800e3b0 <_lseek_r>
 800e010:	89a3      	ldrh	r3, [r4, #12]
 800e012:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e016:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e01a:	81a3      	strh	r3, [r4, #12]
 800e01c:	4632      	mov	r2, r6
 800e01e:	463b      	mov	r3, r7
 800e020:	4628      	mov	r0, r5
 800e022:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e026:	f000 b869 	b.w	800e0fc <_write_r>

0800e02a <__sseek>:
 800e02a:	b510      	push	{r4, lr}
 800e02c:	460c      	mov	r4, r1
 800e02e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e032:	f000 f9bd 	bl	800e3b0 <_lseek_r>
 800e036:	1c43      	adds	r3, r0, #1
 800e038:	89a3      	ldrh	r3, [r4, #12]
 800e03a:	bf15      	itete	ne
 800e03c:	6560      	strne	r0, [r4, #84]	; 0x54
 800e03e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e042:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e046:	81a3      	strheq	r3, [r4, #12]
 800e048:	bf18      	it	ne
 800e04a:	81a3      	strhne	r3, [r4, #12]
 800e04c:	bd10      	pop	{r4, pc}

0800e04e <__sclose>:
 800e04e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e052:	f000 b8db 	b.w	800e20c <_close_r>
	...

0800e058 <__swbuf_r>:
 800e058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e05a:	460e      	mov	r6, r1
 800e05c:	4614      	mov	r4, r2
 800e05e:	4605      	mov	r5, r0
 800e060:	b118      	cbz	r0, 800e06a <__swbuf_r+0x12>
 800e062:	6983      	ldr	r3, [r0, #24]
 800e064:	b90b      	cbnz	r3, 800e06a <__swbuf_r+0x12>
 800e066:	f7ff f9f5 	bl	800d454 <__sinit>
 800e06a:	4b21      	ldr	r3, [pc, #132]	; (800e0f0 <__swbuf_r+0x98>)
 800e06c:	429c      	cmp	r4, r3
 800e06e:	d12b      	bne.n	800e0c8 <__swbuf_r+0x70>
 800e070:	686c      	ldr	r4, [r5, #4]
 800e072:	69a3      	ldr	r3, [r4, #24]
 800e074:	60a3      	str	r3, [r4, #8]
 800e076:	89a3      	ldrh	r3, [r4, #12]
 800e078:	071a      	lsls	r2, r3, #28
 800e07a:	d52f      	bpl.n	800e0dc <__swbuf_r+0x84>
 800e07c:	6923      	ldr	r3, [r4, #16]
 800e07e:	b36b      	cbz	r3, 800e0dc <__swbuf_r+0x84>
 800e080:	6923      	ldr	r3, [r4, #16]
 800e082:	6820      	ldr	r0, [r4, #0]
 800e084:	1ac0      	subs	r0, r0, r3
 800e086:	6963      	ldr	r3, [r4, #20]
 800e088:	b2f6      	uxtb	r6, r6
 800e08a:	4283      	cmp	r3, r0
 800e08c:	4637      	mov	r7, r6
 800e08e:	dc04      	bgt.n	800e09a <__swbuf_r+0x42>
 800e090:	4621      	mov	r1, r4
 800e092:	4628      	mov	r0, r5
 800e094:	f000 f950 	bl	800e338 <_fflush_r>
 800e098:	bb30      	cbnz	r0, 800e0e8 <__swbuf_r+0x90>
 800e09a:	68a3      	ldr	r3, [r4, #8]
 800e09c:	3b01      	subs	r3, #1
 800e09e:	60a3      	str	r3, [r4, #8]
 800e0a0:	6823      	ldr	r3, [r4, #0]
 800e0a2:	1c5a      	adds	r2, r3, #1
 800e0a4:	6022      	str	r2, [r4, #0]
 800e0a6:	701e      	strb	r6, [r3, #0]
 800e0a8:	6963      	ldr	r3, [r4, #20]
 800e0aa:	3001      	adds	r0, #1
 800e0ac:	4283      	cmp	r3, r0
 800e0ae:	d004      	beq.n	800e0ba <__swbuf_r+0x62>
 800e0b0:	89a3      	ldrh	r3, [r4, #12]
 800e0b2:	07db      	lsls	r3, r3, #31
 800e0b4:	d506      	bpl.n	800e0c4 <__swbuf_r+0x6c>
 800e0b6:	2e0a      	cmp	r6, #10
 800e0b8:	d104      	bne.n	800e0c4 <__swbuf_r+0x6c>
 800e0ba:	4621      	mov	r1, r4
 800e0bc:	4628      	mov	r0, r5
 800e0be:	f000 f93b 	bl	800e338 <_fflush_r>
 800e0c2:	b988      	cbnz	r0, 800e0e8 <__swbuf_r+0x90>
 800e0c4:	4638      	mov	r0, r7
 800e0c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e0c8:	4b0a      	ldr	r3, [pc, #40]	; (800e0f4 <__swbuf_r+0x9c>)
 800e0ca:	429c      	cmp	r4, r3
 800e0cc:	d101      	bne.n	800e0d2 <__swbuf_r+0x7a>
 800e0ce:	68ac      	ldr	r4, [r5, #8]
 800e0d0:	e7cf      	b.n	800e072 <__swbuf_r+0x1a>
 800e0d2:	4b09      	ldr	r3, [pc, #36]	; (800e0f8 <__swbuf_r+0xa0>)
 800e0d4:	429c      	cmp	r4, r3
 800e0d6:	bf08      	it	eq
 800e0d8:	68ec      	ldreq	r4, [r5, #12]
 800e0da:	e7ca      	b.n	800e072 <__swbuf_r+0x1a>
 800e0dc:	4621      	mov	r1, r4
 800e0de:	4628      	mov	r0, r5
 800e0e0:	f000 f81e 	bl	800e120 <__swsetup_r>
 800e0e4:	2800      	cmp	r0, #0
 800e0e6:	d0cb      	beq.n	800e080 <__swbuf_r+0x28>
 800e0e8:	f04f 37ff 	mov.w	r7, #4294967295
 800e0ec:	e7ea      	b.n	800e0c4 <__swbuf_r+0x6c>
 800e0ee:	bf00      	nop
 800e0f0:	08011158 	.word	0x08011158
 800e0f4:	08011178 	.word	0x08011178
 800e0f8:	08011138 	.word	0x08011138

0800e0fc <_write_r>:
 800e0fc:	b538      	push	{r3, r4, r5, lr}
 800e0fe:	4d07      	ldr	r5, [pc, #28]	; (800e11c <_write_r+0x20>)
 800e100:	4604      	mov	r4, r0
 800e102:	4608      	mov	r0, r1
 800e104:	4611      	mov	r1, r2
 800e106:	2200      	movs	r2, #0
 800e108:	602a      	str	r2, [r5, #0]
 800e10a:	461a      	mov	r2, r3
 800e10c:	f7f2 fc89 	bl	8000a22 <_write>
 800e110:	1c43      	adds	r3, r0, #1
 800e112:	d102      	bne.n	800e11a <_write_r+0x1e>
 800e114:	682b      	ldr	r3, [r5, #0]
 800e116:	b103      	cbz	r3, 800e11a <_write_r+0x1e>
 800e118:	6023      	str	r3, [r4, #0]
 800e11a:	bd38      	pop	{r3, r4, r5, pc}
 800e11c:	20006890 	.word	0x20006890

0800e120 <__swsetup_r>:
 800e120:	4b32      	ldr	r3, [pc, #200]	; (800e1ec <__swsetup_r+0xcc>)
 800e122:	b570      	push	{r4, r5, r6, lr}
 800e124:	681d      	ldr	r5, [r3, #0]
 800e126:	4606      	mov	r6, r0
 800e128:	460c      	mov	r4, r1
 800e12a:	b125      	cbz	r5, 800e136 <__swsetup_r+0x16>
 800e12c:	69ab      	ldr	r3, [r5, #24]
 800e12e:	b913      	cbnz	r3, 800e136 <__swsetup_r+0x16>
 800e130:	4628      	mov	r0, r5
 800e132:	f7ff f98f 	bl	800d454 <__sinit>
 800e136:	4b2e      	ldr	r3, [pc, #184]	; (800e1f0 <__swsetup_r+0xd0>)
 800e138:	429c      	cmp	r4, r3
 800e13a:	d10f      	bne.n	800e15c <__swsetup_r+0x3c>
 800e13c:	686c      	ldr	r4, [r5, #4]
 800e13e:	89a3      	ldrh	r3, [r4, #12]
 800e140:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e144:	0719      	lsls	r1, r3, #28
 800e146:	d42c      	bmi.n	800e1a2 <__swsetup_r+0x82>
 800e148:	06dd      	lsls	r5, r3, #27
 800e14a:	d411      	bmi.n	800e170 <__swsetup_r+0x50>
 800e14c:	2309      	movs	r3, #9
 800e14e:	6033      	str	r3, [r6, #0]
 800e150:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e154:	81a3      	strh	r3, [r4, #12]
 800e156:	f04f 30ff 	mov.w	r0, #4294967295
 800e15a:	e03e      	b.n	800e1da <__swsetup_r+0xba>
 800e15c:	4b25      	ldr	r3, [pc, #148]	; (800e1f4 <__swsetup_r+0xd4>)
 800e15e:	429c      	cmp	r4, r3
 800e160:	d101      	bne.n	800e166 <__swsetup_r+0x46>
 800e162:	68ac      	ldr	r4, [r5, #8]
 800e164:	e7eb      	b.n	800e13e <__swsetup_r+0x1e>
 800e166:	4b24      	ldr	r3, [pc, #144]	; (800e1f8 <__swsetup_r+0xd8>)
 800e168:	429c      	cmp	r4, r3
 800e16a:	bf08      	it	eq
 800e16c:	68ec      	ldreq	r4, [r5, #12]
 800e16e:	e7e6      	b.n	800e13e <__swsetup_r+0x1e>
 800e170:	0758      	lsls	r0, r3, #29
 800e172:	d512      	bpl.n	800e19a <__swsetup_r+0x7a>
 800e174:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e176:	b141      	cbz	r1, 800e18a <__swsetup_r+0x6a>
 800e178:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e17c:	4299      	cmp	r1, r3
 800e17e:	d002      	beq.n	800e186 <__swsetup_r+0x66>
 800e180:	4630      	mov	r0, r6
 800e182:	f7ff fa21 	bl	800d5c8 <_free_r>
 800e186:	2300      	movs	r3, #0
 800e188:	6363      	str	r3, [r4, #52]	; 0x34
 800e18a:	89a3      	ldrh	r3, [r4, #12]
 800e18c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e190:	81a3      	strh	r3, [r4, #12]
 800e192:	2300      	movs	r3, #0
 800e194:	6063      	str	r3, [r4, #4]
 800e196:	6923      	ldr	r3, [r4, #16]
 800e198:	6023      	str	r3, [r4, #0]
 800e19a:	89a3      	ldrh	r3, [r4, #12]
 800e19c:	f043 0308 	orr.w	r3, r3, #8
 800e1a0:	81a3      	strh	r3, [r4, #12]
 800e1a2:	6923      	ldr	r3, [r4, #16]
 800e1a4:	b94b      	cbnz	r3, 800e1ba <__swsetup_r+0x9a>
 800e1a6:	89a3      	ldrh	r3, [r4, #12]
 800e1a8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e1ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e1b0:	d003      	beq.n	800e1ba <__swsetup_r+0x9a>
 800e1b2:	4621      	mov	r1, r4
 800e1b4:	4630      	mov	r0, r6
 800e1b6:	f000 f931 	bl	800e41c <__smakebuf_r>
 800e1ba:	89a0      	ldrh	r0, [r4, #12]
 800e1bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e1c0:	f010 0301 	ands.w	r3, r0, #1
 800e1c4:	d00a      	beq.n	800e1dc <__swsetup_r+0xbc>
 800e1c6:	2300      	movs	r3, #0
 800e1c8:	60a3      	str	r3, [r4, #8]
 800e1ca:	6963      	ldr	r3, [r4, #20]
 800e1cc:	425b      	negs	r3, r3
 800e1ce:	61a3      	str	r3, [r4, #24]
 800e1d0:	6923      	ldr	r3, [r4, #16]
 800e1d2:	b943      	cbnz	r3, 800e1e6 <__swsetup_r+0xc6>
 800e1d4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e1d8:	d1ba      	bne.n	800e150 <__swsetup_r+0x30>
 800e1da:	bd70      	pop	{r4, r5, r6, pc}
 800e1dc:	0781      	lsls	r1, r0, #30
 800e1de:	bf58      	it	pl
 800e1e0:	6963      	ldrpl	r3, [r4, #20]
 800e1e2:	60a3      	str	r3, [r4, #8]
 800e1e4:	e7f4      	b.n	800e1d0 <__swsetup_r+0xb0>
 800e1e6:	2000      	movs	r0, #0
 800e1e8:	e7f7      	b.n	800e1da <__swsetup_r+0xba>
 800e1ea:	bf00      	nop
 800e1ec:	20000014 	.word	0x20000014
 800e1f0:	08011158 	.word	0x08011158
 800e1f4:	08011178 	.word	0x08011178
 800e1f8:	08011138 	.word	0x08011138

0800e1fc <abort>:
 800e1fc:	b508      	push	{r3, lr}
 800e1fe:	2006      	movs	r0, #6
 800e200:	f000 f9b8 	bl	800e574 <raise>
 800e204:	2001      	movs	r0, #1
 800e206:	f7f2 fbe5 	bl	80009d4 <_exit>
	...

0800e20c <_close_r>:
 800e20c:	b538      	push	{r3, r4, r5, lr}
 800e20e:	4d06      	ldr	r5, [pc, #24]	; (800e228 <_close_r+0x1c>)
 800e210:	2300      	movs	r3, #0
 800e212:	4604      	mov	r4, r0
 800e214:	4608      	mov	r0, r1
 800e216:	602b      	str	r3, [r5, #0]
 800e218:	f7f2 fc1f 	bl	8000a5a <_close>
 800e21c:	1c43      	adds	r3, r0, #1
 800e21e:	d102      	bne.n	800e226 <_close_r+0x1a>
 800e220:	682b      	ldr	r3, [r5, #0]
 800e222:	b103      	cbz	r3, 800e226 <_close_r+0x1a>
 800e224:	6023      	str	r3, [r4, #0]
 800e226:	bd38      	pop	{r3, r4, r5, pc}
 800e228:	20006890 	.word	0x20006890

0800e22c <__sflush_r>:
 800e22c:	898a      	ldrh	r2, [r1, #12]
 800e22e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e232:	4605      	mov	r5, r0
 800e234:	0710      	lsls	r0, r2, #28
 800e236:	460c      	mov	r4, r1
 800e238:	d458      	bmi.n	800e2ec <__sflush_r+0xc0>
 800e23a:	684b      	ldr	r3, [r1, #4]
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	dc05      	bgt.n	800e24c <__sflush_r+0x20>
 800e240:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e242:	2b00      	cmp	r3, #0
 800e244:	dc02      	bgt.n	800e24c <__sflush_r+0x20>
 800e246:	2000      	movs	r0, #0
 800e248:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e24c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e24e:	2e00      	cmp	r6, #0
 800e250:	d0f9      	beq.n	800e246 <__sflush_r+0x1a>
 800e252:	2300      	movs	r3, #0
 800e254:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e258:	682f      	ldr	r7, [r5, #0]
 800e25a:	602b      	str	r3, [r5, #0]
 800e25c:	d032      	beq.n	800e2c4 <__sflush_r+0x98>
 800e25e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e260:	89a3      	ldrh	r3, [r4, #12]
 800e262:	075a      	lsls	r2, r3, #29
 800e264:	d505      	bpl.n	800e272 <__sflush_r+0x46>
 800e266:	6863      	ldr	r3, [r4, #4]
 800e268:	1ac0      	subs	r0, r0, r3
 800e26a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e26c:	b10b      	cbz	r3, 800e272 <__sflush_r+0x46>
 800e26e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e270:	1ac0      	subs	r0, r0, r3
 800e272:	2300      	movs	r3, #0
 800e274:	4602      	mov	r2, r0
 800e276:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e278:	6a21      	ldr	r1, [r4, #32]
 800e27a:	4628      	mov	r0, r5
 800e27c:	47b0      	blx	r6
 800e27e:	1c43      	adds	r3, r0, #1
 800e280:	89a3      	ldrh	r3, [r4, #12]
 800e282:	d106      	bne.n	800e292 <__sflush_r+0x66>
 800e284:	6829      	ldr	r1, [r5, #0]
 800e286:	291d      	cmp	r1, #29
 800e288:	d82c      	bhi.n	800e2e4 <__sflush_r+0xb8>
 800e28a:	4a2a      	ldr	r2, [pc, #168]	; (800e334 <__sflush_r+0x108>)
 800e28c:	40ca      	lsrs	r2, r1
 800e28e:	07d6      	lsls	r6, r2, #31
 800e290:	d528      	bpl.n	800e2e4 <__sflush_r+0xb8>
 800e292:	2200      	movs	r2, #0
 800e294:	6062      	str	r2, [r4, #4]
 800e296:	04d9      	lsls	r1, r3, #19
 800e298:	6922      	ldr	r2, [r4, #16]
 800e29a:	6022      	str	r2, [r4, #0]
 800e29c:	d504      	bpl.n	800e2a8 <__sflush_r+0x7c>
 800e29e:	1c42      	adds	r2, r0, #1
 800e2a0:	d101      	bne.n	800e2a6 <__sflush_r+0x7a>
 800e2a2:	682b      	ldr	r3, [r5, #0]
 800e2a4:	b903      	cbnz	r3, 800e2a8 <__sflush_r+0x7c>
 800e2a6:	6560      	str	r0, [r4, #84]	; 0x54
 800e2a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e2aa:	602f      	str	r7, [r5, #0]
 800e2ac:	2900      	cmp	r1, #0
 800e2ae:	d0ca      	beq.n	800e246 <__sflush_r+0x1a>
 800e2b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e2b4:	4299      	cmp	r1, r3
 800e2b6:	d002      	beq.n	800e2be <__sflush_r+0x92>
 800e2b8:	4628      	mov	r0, r5
 800e2ba:	f7ff f985 	bl	800d5c8 <_free_r>
 800e2be:	2000      	movs	r0, #0
 800e2c0:	6360      	str	r0, [r4, #52]	; 0x34
 800e2c2:	e7c1      	b.n	800e248 <__sflush_r+0x1c>
 800e2c4:	6a21      	ldr	r1, [r4, #32]
 800e2c6:	2301      	movs	r3, #1
 800e2c8:	4628      	mov	r0, r5
 800e2ca:	47b0      	blx	r6
 800e2cc:	1c41      	adds	r1, r0, #1
 800e2ce:	d1c7      	bne.n	800e260 <__sflush_r+0x34>
 800e2d0:	682b      	ldr	r3, [r5, #0]
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d0c4      	beq.n	800e260 <__sflush_r+0x34>
 800e2d6:	2b1d      	cmp	r3, #29
 800e2d8:	d001      	beq.n	800e2de <__sflush_r+0xb2>
 800e2da:	2b16      	cmp	r3, #22
 800e2dc:	d101      	bne.n	800e2e2 <__sflush_r+0xb6>
 800e2de:	602f      	str	r7, [r5, #0]
 800e2e0:	e7b1      	b.n	800e246 <__sflush_r+0x1a>
 800e2e2:	89a3      	ldrh	r3, [r4, #12]
 800e2e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e2e8:	81a3      	strh	r3, [r4, #12]
 800e2ea:	e7ad      	b.n	800e248 <__sflush_r+0x1c>
 800e2ec:	690f      	ldr	r7, [r1, #16]
 800e2ee:	2f00      	cmp	r7, #0
 800e2f0:	d0a9      	beq.n	800e246 <__sflush_r+0x1a>
 800e2f2:	0793      	lsls	r3, r2, #30
 800e2f4:	680e      	ldr	r6, [r1, #0]
 800e2f6:	bf08      	it	eq
 800e2f8:	694b      	ldreq	r3, [r1, #20]
 800e2fa:	600f      	str	r7, [r1, #0]
 800e2fc:	bf18      	it	ne
 800e2fe:	2300      	movne	r3, #0
 800e300:	eba6 0807 	sub.w	r8, r6, r7
 800e304:	608b      	str	r3, [r1, #8]
 800e306:	f1b8 0f00 	cmp.w	r8, #0
 800e30a:	dd9c      	ble.n	800e246 <__sflush_r+0x1a>
 800e30c:	6a21      	ldr	r1, [r4, #32]
 800e30e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e310:	4643      	mov	r3, r8
 800e312:	463a      	mov	r2, r7
 800e314:	4628      	mov	r0, r5
 800e316:	47b0      	blx	r6
 800e318:	2800      	cmp	r0, #0
 800e31a:	dc06      	bgt.n	800e32a <__sflush_r+0xfe>
 800e31c:	89a3      	ldrh	r3, [r4, #12]
 800e31e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e322:	81a3      	strh	r3, [r4, #12]
 800e324:	f04f 30ff 	mov.w	r0, #4294967295
 800e328:	e78e      	b.n	800e248 <__sflush_r+0x1c>
 800e32a:	4407      	add	r7, r0
 800e32c:	eba8 0800 	sub.w	r8, r8, r0
 800e330:	e7e9      	b.n	800e306 <__sflush_r+0xda>
 800e332:	bf00      	nop
 800e334:	20400001 	.word	0x20400001

0800e338 <_fflush_r>:
 800e338:	b538      	push	{r3, r4, r5, lr}
 800e33a:	690b      	ldr	r3, [r1, #16]
 800e33c:	4605      	mov	r5, r0
 800e33e:	460c      	mov	r4, r1
 800e340:	b913      	cbnz	r3, 800e348 <_fflush_r+0x10>
 800e342:	2500      	movs	r5, #0
 800e344:	4628      	mov	r0, r5
 800e346:	bd38      	pop	{r3, r4, r5, pc}
 800e348:	b118      	cbz	r0, 800e352 <_fflush_r+0x1a>
 800e34a:	6983      	ldr	r3, [r0, #24]
 800e34c:	b90b      	cbnz	r3, 800e352 <_fflush_r+0x1a>
 800e34e:	f7ff f881 	bl	800d454 <__sinit>
 800e352:	4b14      	ldr	r3, [pc, #80]	; (800e3a4 <_fflush_r+0x6c>)
 800e354:	429c      	cmp	r4, r3
 800e356:	d11b      	bne.n	800e390 <_fflush_r+0x58>
 800e358:	686c      	ldr	r4, [r5, #4]
 800e35a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d0ef      	beq.n	800e342 <_fflush_r+0xa>
 800e362:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e364:	07d0      	lsls	r0, r2, #31
 800e366:	d404      	bmi.n	800e372 <_fflush_r+0x3a>
 800e368:	0599      	lsls	r1, r3, #22
 800e36a:	d402      	bmi.n	800e372 <_fflush_r+0x3a>
 800e36c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e36e:	f7ff f921 	bl	800d5b4 <__retarget_lock_acquire_recursive>
 800e372:	4628      	mov	r0, r5
 800e374:	4621      	mov	r1, r4
 800e376:	f7ff ff59 	bl	800e22c <__sflush_r>
 800e37a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e37c:	07da      	lsls	r2, r3, #31
 800e37e:	4605      	mov	r5, r0
 800e380:	d4e0      	bmi.n	800e344 <_fflush_r+0xc>
 800e382:	89a3      	ldrh	r3, [r4, #12]
 800e384:	059b      	lsls	r3, r3, #22
 800e386:	d4dd      	bmi.n	800e344 <_fflush_r+0xc>
 800e388:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e38a:	f7ff f914 	bl	800d5b6 <__retarget_lock_release_recursive>
 800e38e:	e7d9      	b.n	800e344 <_fflush_r+0xc>
 800e390:	4b05      	ldr	r3, [pc, #20]	; (800e3a8 <_fflush_r+0x70>)
 800e392:	429c      	cmp	r4, r3
 800e394:	d101      	bne.n	800e39a <_fflush_r+0x62>
 800e396:	68ac      	ldr	r4, [r5, #8]
 800e398:	e7df      	b.n	800e35a <_fflush_r+0x22>
 800e39a:	4b04      	ldr	r3, [pc, #16]	; (800e3ac <_fflush_r+0x74>)
 800e39c:	429c      	cmp	r4, r3
 800e39e:	bf08      	it	eq
 800e3a0:	68ec      	ldreq	r4, [r5, #12]
 800e3a2:	e7da      	b.n	800e35a <_fflush_r+0x22>
 800e3a4:	08011158 	.word	0x08011158
 800e3a8:	08011178 	.word	0x08011178
 800e3ac:	08011138 	.word	0x08011138

0800e3b0 <_lseek_r>:
 800e3b0:	b538      	push	{r3, r4, r5, lr}
 800e3b2:	4d07      	ldr	r5, [pc, #28]	; (800e3d0 <_lseek_r+0x20>)
 800e3b4:	4604      	mov	r4, r0
 800e3b6:	4608      	mov	r0, r1
 800e3b8:	4611      	mov	r1, r2
 800e3ba:	2200      	movs	r2, #0
 800e3bc:	602a      	str	r2, [r5, #0]
 800e3be:	461a      	mov	r2, r3
 800e3c0:	f7f2 fb72 	bl	8000aa8 <_lseek>
 800e3c4:	1c43      	adds	r3, r0, #1
 800e3c6:	d102      	bne.n	800e3ce <_lseek_r+0x1e>
 800e3c8:	682b      	ldr	r3, [r5, #0]
 800e3ca:	b103      	cbz	r3, 800e3ce <_lseek_r+0x1e>
 800e3cc:	6023      	str	r3, [r4, #0]
 800e3ce:	bd38      	pop	{r3, r4, r5, pc}
 800e3d0:	20006890 	.word	0x20006890

0800e3d4 <__swhatbuf_r>:
 800e3d4:	b570      	push	{r4, r5, r6, lr}
 800e3d6:	460e      	mov	r6, r1
 800e3d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e3dc:	2900      	cmp	r1, #0
 800e3de:	b096      	sub	sp, #88	; 0x58
 800e3e0:	4614      	mov	r4, r2
 800e3e2:	461d      	mov	r5, r3
 800e3e4:	da07      	bge.n	800e3f6 <__swhatbuf_r+0x22>
 800e3e6:	2300      	movs	r3, #0
 800e3e8:	602b      	str	r3, [r5, #0]
 800e3ea:	89b3      	ldrh	r3, [r6, #12]
 800e3ec:	061a      	lsls	r2, r3, #24
 800e3ee:	d410      	bmi.n	800e412 <__swhatbuf_r+0x3e>
 800e3f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e3f4:	e00e      	b.n	800e414 <__swhatbuf_r+0x40>
 800e3f6:	466a      	mov	r2, sp
 800e3f8:	f000 f8d8 	bl	800e5ac <_fstat_r>
 800e3fc:	2800      	cmp	r0, #0
 800e3fe:	dbf2      	blt.n	800e3e6 <__swhatbuf_r+0x12>
 800e400:	9a01      	ldr	r2, [sp, #4]
 800e402:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e406:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e40a:	425a      	negs	r2, r3
 800e40c:	415a      	adcs	r2, r3
 800e40e:	602a      	str	r2, [r5, #0]
 800e410:	e7ee      	b.n	800e3f0 <__swhatbuf_r+0x1c>
 800e412:	2340      	movs	r3, #64	; 0x40
 800e414:	2000      	movs	r0, #0
 800e416:	6023      	str	r3, [r4, #0]
 800e418:	b016      	add	sp, #88	; 0x58
 800e41a:	bd70      	pop	{r4, r5, r6, pc}

0800e41c <__smakebuf_r>:
 800e41c:	898b      	ldrh	r3, [r1, #12]
 800e41e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e420:	079d      	lsls	r5, r3, #30
 800e422:	4606      	mov	r6, r0
 800e424:	460c      	mov	r4, r1
 800e426:	d507      	bpl.n	800e438 <__smakebuf_r+0x1c>
 800e428:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e42c:	6023      	str	r3, [r4, #0]
 800e42e:	6123      	str	r3, [r4, #16]
 800e430:	2301      	movs	r3, #1
 800e432:	6163      	str	r3, [r4, #20]
 800e434:	b002      	add	sp, #8
 800e436:	bd70      	pop	{r4, r5, r6, pc}
 800e438:	ab01      	add	r3, sp, #4
 800e43a:	466a      	mov	r2, sp
 800e43c:	f7ff ffca 	bl	800e3d4 <__swhatbuf_r>
 800e440:	9900      	ldr	r1, [sp, #0]
 800e442:	4605      	mov	r5, r0
 800e444:	4630      	mov	r0, r6
 800e446:	f7ff f90f 	bl	800d668 <_malloc_r>
 800e44a:	b948      	cbnz	r0, 800e460 <__smakebuf_r+0x44>
 800e44c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e450:	059a      	lsls	r2, r3, #22
 800e452:	d4ef      	bmi.n	800e434 <__smakebuf_r+0x18>
 800e454:	f023 0303 	bic.w	r3, r3, #3
 800e458:	f043 0302 	orr.w	r3, r3, #2
 800e45c:	81a3      	strh	r3, [r4, #12]
 800e45e:	e7e3      	b.n	800e428 <__smakebuf_r+0xc>
 800e460:	4b0d      	ldr	r3, [pc, #52]	; (800e498 <__smakebuf_r+0x7c>)
 800e462:	62b3      	str	r3, [r6, #40]	; 0x28
 800e464:	89a3      	ldrh	r3, [r4, #12]
 800e466:	6020      	str	r0, [r4, #0]
 800e468:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e46c:	81a3      	strh	r3, [r4, #12]
 800e46e:	9b00      	ldr	r3, [sp, #0]
 800e470:	6163      	str	r3, [r4, #20]
 800e472:	9b01      	ldr	r3, [sp, #4]
 800e474:	6120      	str	r0, [r4, #16]
 800e476:	b15b      	cbz	r3, 800e490 <__smakebuf_r+0x74>
 800e478:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e47c:	4630      	mov	r0, r6
 800e47e:	f000 f8a7 	bl	800e5d0 <_isatty_r>
 800e482:	b128      	cbz	r0, 800e490 <__smakebuf_r+0x74>
 800e484:	89a3      	ldrh	r3, [r4, #12]
 800e486:	f023 0303 	bic.w	r3, r3, #3
 800e48a:	f043 0301 	orr.w	r3, r3, #1
 800e48e:	81a3      	strh	r3, [r4, #12]
 800e490:	89a0      	ldrh	r0, [r4, #12]
 800e492:	4305      	orrs	r5, r0
 800e494:	81a5      	strh	r5, [r4, #12]
 800e496:	e7cd      	b.n	800e434 <__smakebuf_r+0x18>
 800e498:	0800d3ed 	.word	0x0800d3ed

0800e49c <__malloc_lock>:
 800e49c:	4801      	ldr	r0, [pc, #4]	; (800e4a4 <__malloc_lock+0x8>)
 800e49e:	f7ff b889 	b.w	800d5b4 <__retarget_lock_acquire_recursive>
 800e4a2:	bf00      	nop
 800e4a4:	20006898 	.word	0x20006898

0800e4a8 <__malloc_unlock>:
 800e4a8:	4801      	ldr	r0, [pc, #4]	; (800e4b0 <__malloc_unlock+0x8>)
 800e4aa:	f7ff b884 	b.w	800d5b6 <__retarget_lock_release_recursive>
 800e4ae:	bf00      	nop
 800e4b0:	20006898 	.word	0x20006898

0800e4b4 <_realloc_r>:
 800e4b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4b6:	4607      	mov	r7, r0
 800e4b8:	4614      	mov	r4, r2
 800e4ba:	460e      	mov	r6, r1
 800e4bc:	b921      	cbnz	r1, 800e4c8 <_realloc_r+0x14>
 800e4be:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e4c2:	4611      	mov	r1, r2
 800e4c4:	f7ff b8d0 	b.w	800d668 <_malloc_r>
 800e4c8:	b922      	cbnz	r2, 800e4d4 <_realloc_r+0x20>
 800e4ca:	f7ff f87d 	bl	800d5c8 <_free_r>
 800e4ce:	4625      	mov	r5, r4
 800e4d0:	4628      	mov	r0, r5
 800e4d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e4d4:	f000 f88c 	bl	800e5f0 <_malloc_usable_size_r>
 800e4d8:	42a0      	cmp	r0, r4
 800e4da:	d20f      	bcs.n	800e4fc <_realloc_r+0x48>
 800e4dc:	4621      	mov	r1, r4
 800e4de:	4638      	mov	r0, r7
 800e4e0:	f7ff f8c2 	bl	800d668 <_malloc_r>
 800e4e4:	4605      	mov	r5, r0
 800e4e6:	2800      	cmp	r0, #0
 800e4e8:	d0f2      	beq.n	800e4d0 <_realloc_r+0x1c>
 800e4ea:	4631      	mov	r1, r6
 800e4ec:	4622      	mov	r2, r4
 800e4ee:	f7fe fe8b 	bl	800d208 <memcpy>
 800e4f2:	4631      	mov	r1, r6
 800e4f4:	4638      	mov	r0, r7
 800e4f6:	f7ff f867 	bl	800d5c8 <_free_r>
 800e4fa:	e7e9      	b.n	800e4d0 <_realloc_r+0x1c>
 800e4fc:	4635      	mov	r5, r6
 800e4fe:	e7e7      	b.n	800e4d0 <_realloc_r+0x1c>

0800e500 <_read_r>:
 800e500:	b538      	push	{r3, r4, r5, lr}
 800e502:	4d07      	ldr	r5, [pc, #28]	; (800e520 <_read_r+0x20>)
 800e504:	4604      	mov	r4, r0
 800e506:	4608      	mov	r0, r1
 800e508:	4611      	mov	r1, r2
 800e50a:	2200      	movs	r2, #0
 800e50c:	602a      	str	r2, [r5, #0]
 800e50e:	461a      	mov	r2, r3
 800e510:	f7f2 fa6a 	bl	80009e8 <_read>
 800e514:	1c43      	adds	r3, r0, #1
 800e516:	d102      	bne.n	800e51e <_read_r+0x1e>
 800e518:	682b      	ldr	r3, [r5, #0]
 800e51a:	b103      	cbz	r3, 800e51e <_read_r+0x1e>
 800e51c:	6023      	str	r3, [r4, #0]
 800e51e:	bd38      	pop	{r3, r4, r5, pc}
 800e520:	20006890 	.word	0x20006890

0800e524 <_raise_r>:
 800e524:	291f      	cmp	r1, #31
 800e526:	b538      	push	{r3, r4, r5, lr}
 800e528:	4604      	mov	r4, r0
 800e52a:	460d      	mov	r5, r1
 800e52c:	d904      	bls.n	800e538 <_raise_r+0x14>
 800e52e:	2316      	movs	r3, #22
 800e530:	6003      	str	r3, [r0, #0]
 800e532:	f04f 30ff 	mov.w	r0, #4294967295
 800e536:	bd38      	pop	{r3, r4, r5, pc}
 800e538:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e53a:	b112      	cbz	r2, 800e542 <_raise_r+0x1e>
 800e53c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e540:	b94b      	cbnz	r3, 800e556 <_raise_r+0x32>
 800e542:	4620      	mov	r0, r4
 800e544:	f000 f830 	bl	800e5a8 <_getpid_r>
 800e548:	462a      	mov	r2, r5
 800e54a:	4601      	mov	r1, r0
 800e54c:	4620      	mov	r0, r4
 800e54e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e552:	f000 b817 	b.w	800e584 <_kill_r>
 800e556:	2b01      	cmp	r3, #1
 800e558:	d00a      	beq.n	800e570 <_raise_r+0x4c>
 800e55a:	1c59      	adds	r1, r3, #1
 800e55c:	d103      	bne.n	800e566 <_raise_r+0x42>
 800e55e:	2316      	movs	r3, #22
 800e560:	6003      	str	r3, [r0, #0]
 800e562:	2001      	movs	r0, #1
 800e564:	e7e7      	b.n	800e536 <_raise_r+0x12>
 800e566:	2400      	movs	r4, #0
 800e568:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e56c:	4628      	mov	r0, r5
 800e56e:	4798      	blx	r3
 800e570:	2000      	movs	r0, #0
 800e572:	e7e0      	b.n	800e536 <_raise_r+0x12>

0800e574 <raise>:
 800e574:	4b02      	ldr	r3, [pc, #8]	; (800e580 <raise+0xc>)
 800e576:	4601      	mov	r1, r0
 800e578:	6818      	ldr	r0, [r3, #0]
 800e57a:	f7ff bfd3 	b.w	800e524 <_raise_r>
 800e57e:	bf00      	nop
 800e580:	20000014 	.word	0x20000014

0800e584 <_kill_r>:
 800e584:	b538      	push	{r3, r4, r5, lr}
 800e586:	4d07      	ldr	r5, [pc, #28]	; (800e5a4 <_kill_r+0x20>)
 800e588:	2300      	movs	r3, #0
 800e58a:	4604      	mov	r4, r0
 800e58c:	4608      	mov	r0, r1
 800e58e:	4611      	mov	r1, r2
 800e590:	602b      	str	r3, [r5, #0]
 800e592:	f7f2 fa0d 	bl	80009b0 <_kill>
 800e596:	1c43      	adds	r3, r0, #1
 800e598:	d102      	bne.n	800e5a0 <_kill_r+0x1c>
 800e59a:	682b      	ldr	r3, [r5, #0]
 800e59c:	b103      	cbz	r3, 800e5a0 <_kill_r+0x1c>
 800e59e:	6023      	str	r3, [r4, #0]
 800e5a0:	bd38      	pop	{r3, r4, r5, pc}
 800e5a2:	bf00      	nop
 800e5a4:	20006890 	.word	0x20006890

0800e5a8 <_getpid_r>:
 800e5a8:	f7f2 b9fa 	b.w	80009a0 <_getpid>

0800e5ac <_fstat_r>:
 800e5ac:	b538      	push	{r3, r4, r5, lr}
 800e5ae:	4d07      	ldr	r5, [pc, #28]	; (800e5cc <_fstat_r+0x20>)
 800e5b0:	2300      	movs	r3, #0
 800e5b2:	4604      	mov	r4, r0
 800e5b4:	4608      	mov	r0, r1
 800e5b6:	4611      	mov	r1, r2
 800e5b8:	602b      	str	r3, [r5, #0]
 800e5ba:	f7f2 fa5a 	bl	8000a72 <_fstat>
 800e5be:	1c43      	adds	r3, r0, #1
 800e5c0:	d102      	bne.n	800e5c8 <_fstat_r+0x1c>
 800e5c2:	682b      	ldr	r3, [r5, #0]
 800e5c4:	b103      	cbz	r3, 800e5c8 <_fstat_r+0x1c>
 800e5c6:	6023      	str	r3, [r4, #0]
 800e5c8:	bd38      	pop	{r3, r4, r5, pc}
 800e5ca:	bf00      	nop
 800e5cc:	20006890 	.word	0x20006890

0800e5d0 <_isatty_r>:
 800e5d0:	b538      	push	{r3, r4, r5, lr}
 800e5d2:	4d06      	ldr	r5, [pc, #24]	; (800e5ec <_isatty_r+0x1c>)
 800e5d4:	2300      	movs	r3, #0
 800e5d6:	4604      	mov	r4, r0
 800e5d8:	4608      	mov	r0, r1
 800e5da:	602b      	str	r3, [r5, #0]
 800e5dc:	f7f2 fa59 	bl	8000a92 <_isatty>
 800e5e0:	1c43      	adds	r3, r0, #1
 800e5e2:	d102      	bne.n	800e5ea <_isatty_r+0x1a>
 800e5e4:	682b      	ldr	r3, [r5, #0]
 800e5e6:	b103      	cbz	r3, 800e5ea <_isatty_r+0x1a>
 800e5e8:	6023      	str	r3, [r4, #0]
 800e5ea:	bd38      	pop	{r3, r4, r5, pc}
 800e5ec:	20006890 	.word	0x20006890

0800e5f0 <_malloc_usable_size_r>:
 800e5f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e5f4:	1f18      	subs	r0, r3, #4
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	bfbc      	itt	lt
 800e5fa:	580b      	ldrlt	r3, [r1, r0]
 800e5fc:	18c0      	addlt	r0, r0, r3
 800e5fe:	4770      	bx	lr

0800e600 <_init>:
 800e600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e602:	bf00      	nop
 800e604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e606:	bc08      	pop	{r3}
 800e608:	469e      	mov	lr, r3
 800e60a:	4770      	bx	lr

0800e60c <_fini>:
 800e60c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e60e:	bf00      	nop
 800e610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e612:	bc08      	pop	{r3}
 800e614:	469e      	mov	lr, r3
 800e616:	4770      	bx	lr
